{"meta":{"title":"崎径 其镜","subtitle":"求学道路上的行车记录仪","description":null,"author":"Anqi Zhao","url":"http://www.z16388.win"},"pages":[{"title":"","date":"2016-10-06T15:34:49.000Z","updated":"2016-10-01T14:52:04.000Z","comments":true,"path":"baidu_verify_bJsKt9rMJw.html","permalink":"http://www.z16388.win/baidu_verify_bJsKt9rMJw.html","excerpt":"","text":"bJsKt9rMJw"},{"title":"","date":"2016-10-06T15:34:49.000Z","updated":"2016-10-04T14:44:04.000Z","comments":true,"path":"README.html","permalink":"http://www.z16388.win/README.html","excerpt":"","text":"blogsource"},{"title":"下载资源","date":"2016-09-11T05:56:07.000Z","updated":"2016-09-11T07:54:20.000Z","comments":true,"path":"Download/index.html","permalink":"http://www.z16388.win/Download/index.html","excerpt":"","text":"工具锐捷破解版:http://pan.baidu.com/s/1slCLdFn SQSXvpn:http://pan.baidu.com/s/1qX9Pb20 everything:https://pan.baidu.com/s/1gfE1wD9 vegas Pro12.0-64:https://pan.baidu.com/s/1slVHVNB vegas Pro12.0-64汉化补丁：https://pan.baidu.com/s/1dEHDamt matlab 2014b:https://pan.baidu.com/s/1qYo0AG8 Guitar Pro 5.2:https://pan.baidu.com/s/1dF2ukpz Adobe Audition CC:http://pan.baidu.com/s/1dFgF4Hj Adobe Photoshop CC:http://pan.baidu.com/s/1slvkkjz 软件开发ADTx86:https://pan.baidu.com/s/1nuABjxJ Eclipse:http://pan.baidu.com/s/1mio8JxQ Code:Blocks:http://pan.baidu.com/s/1mihhkvu Dev-C++:http://pan.baidu.com/s/1kVoALH9 MarkdownPad 2:http://markdownpad.com/download/markdownpad2-setup.exe notepad++:https://notepad-plus-plus.org/repository/6.x/6.9.2/npp.6.9.2.Installer.exe 电子书Qt及Qt Quick开发实战精解：https://pan.baidu.com/s/1gfqeSCj Qt+Creator快速入门：https://pan.baidu.com/s/1bo2ib1P 《从你的全世界路过》:https://pan.baidu.com/s/1dE9569r 音乐相关一万首吉他谱：https://pan.baidu.com/s/1kUOmzPH Sound Horizon全专辑：https://pan.baidu.com/s/1o8k0Ujo 游戏白色相簿2：https://pan.baidu.com/s/1jHCJiia 补丁暗黑血统1&amp;2汉化补丁：https://pan.baidu.com/s/1pKV5LrH sakura swimming club汉化&amp;18x补丁：https://pan.baidu.com/s/1jIhloCA sakura angel汉化补丁：https://pan.baidu.com/s/1dEPe8jZ nokopara 18x补丁：https://pan.baidu.com/s/1pLeZnjP overlord汉化补丁：https://pan.baidu.com/s/1hr2DMXQ"},{"title":"关于我","date":"2016-09-09T11:54:10.000Z","updated":"2016-09-11T15:46:32.000Z","comments":true,"path":"about/index.html","permalink":"http://www.z16388.win/about/index.html","excerpt":"","text":"关于我姓名：赵安琪 E-mail:z16388@outlook.com weibo:@六级是你的谎言 add:Guoyang，Anhui，China 准程序猿，Steamer，Dotaer，喜欢音乐。"},{"title":"友情链接","date":"2016-09-10T07:46:28.000Z","updated":"2016-09-12T03:23:13.000Z","comments":true,"path":"friend/index.html","permalink":"http://www.z16388.win/friend/index.html","excerpt":"","text":"&emsp;&emsp;李宇嘉：http://www.superxc.com/ &emsp;&emsp;田&emsp;浩：http://tianhao.site &emsp;&emsp;唐&emsp;飞：http://www.tangfei.space/ &emsp;&emsp;李珺玮："},{"title":"常用网址导航","date":"2016-09-09T12:08:29.000Z","updated":"2016-09-13T14:03:50.000Z","comments":true,"path":"int/index.html","permalink":"http://www.z16388.win/int/index.html","excerpt":"","text":"分析 视频网站Bilibili 斗鱼TV 战旗TV 火猫TV PandaTV 学习廖雪峰的官方网站：Python，js，git教程 程序猿ACM-ICPC 蓝桥杯 杭电 C语言网 CodeVS 51nod CSDN 慕课网 王道论坛 七牛云 游戏Steam 杉果游戏 战网 守望先锋 地下城与勇士 购物网站京东 淘宝 HB包 学校教务在线 网络中心 创新教育基地"},{"title":"tags","date":"2016-09-09T07:42:07.000Z","updated":"2016-09-09T07:43:36.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.z16388.win/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MAC下hexo的安装与使用","slug":"MAC下hexo的安装与使用","date":"2016-10-06T15:37:24.000Z","updated":"2016-10-06T15:55:02.000Z","comments":true,"path":"2016/10/06/MAC下hexo的安装与使用/","link":"","permalink":"http://www.z16388.win/2016/10/06/MAC下hexo的安装与使用/","excerpt":"","text":"&emsp;&emsp;不知道就是造了什么孽，电脑，又炸了。唉～没想到，我这么肝，倒下的竟然是我的电脑，也是可怕。 &emsp;&emsp;闲话不多说了。哥哥把他的Mac接我救急用了，刚到手还没捂热乎呢，只是随意的装了一些必须的东西。什么java啦，jsp啦，xcode啦。总之搞了很多，但是博客这个东西一直没搞好，因为一直没去研究Mac下GitHub的使用。今天，借着这个炸的机会，把我的博客给挪到啦Mac上，继续更新啦。 &emsp;&emsp;讲道理，苹果的工业设计还是很好的。到手没几天，已经熟悉的七七八八了；当然也不能说熟悉到windows这种程度，但是也是到了能够日常使用，应付一些简单的coding。我们话说回来啊，这个hexo我本来是打算放弃掉的。因为前几天，我用微软的azure搭建了一个Wordpress的博客。但是令人蛋疼的是，DreamSpark订阅的微软Azure它不能使用域名绑定功能，这就很尴尬了，谁会顶着一个超长的链接去看你的博客呢对不对。所以既然电脑炸了，没了办法，那只能研究mac上怎么去使用hexo了。来，我们闲话不多说，正式开始了。 第一步 安装Node.js&emsp;&emsp;这是hexo必须的一步，毕竟是基于Node.js的框架嘛。至于在哪里下载，怎么安装，以及GitHub的注册，域名什么的，我就不过多赘述了，这在我之前的博客里面都有的。 第二步 安装hexo&emsp;&emsp;这里直接使用Node.js的npm去安装，在终端中，浏览到你想要存放博客内容的文件夹，比如cd /Applications/blog。之后执行hexo的安装命令： 1sudo npm install -g hexo &emsp;&emsp;安装好之后，把你之前博客的内容放到里面去；如果没有，则执行hexo init。然后就可以正常地去使用你的hexo了，和windows环境下的操作完全一样。 &emsp;&emsp;唉～说点题外话，讲道理，上天真的是逼我这学期要好好学习啊，害怕。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"}],"keywords":[]},{"title":"联想Y400折腾第二天","slug":"联想Y400折腾第二天","date":"2016-09-30T13:45:23.000Z","updated":"2016-09-30T14:45:56.000Z","comments":true,"path":"2016/09/30/联想Y400折腾第二天/","link":"","permalink":"http://www.z16388.win/2016/09/30/联想Y400折腾第二天/","excerpt":"","text":"&emsp;&emsp;我也是够闲的。本着不抛弃，不放弃地原则，抢救我的笔记本小Y。虽然从早上开机到现在，我。。。不不不，不能奶！总之，倒持了一天吧，不说成果怎么样，也是有一些收获的。相比于昨天的硬件，我把今天折腾的方向转向了软件。 &emsp;&emsp;嘛，有一只老学长，作为长者，在计算机的各种心肝脾肺肾上都有涉猎，我很是佩服的一颗赛艇。其实我昨天就想请教他的，但是硅脂到了，也就没麻烦他了。但是，对于硬件靠脚踹，软件做系统的我，想要搞个大新闻出来，也是没那么容易的。 &emsp;&emsp;看了一上午的《齐木楠雄的灾难》，真的希望万能的齐神能够保佑我。打开了AIDA64，一直监测着CPU的温度——毕竟我是怀疑CPU出问题了的。然后我就发现，AIDA64有个功能，叫做“生成报告”，随手就点了进去。然后，搞了一大串东西出来。我就看啊看，天哪，这个东西把我电脑里各种信息都搞出来了，比香港记者的新闻还要详细，不能忍。我就往下看，看到了超频这一项，发现我的CPU超频了15%。我就怀疑，是不是超频让CPU过热了，才造成的死机。 &emsp;&emsp;我就去百毒了一下，怎么去关掉超频。看了一会儿觉得太麻烦，就放弃了。哎~还要进BIOS,还不如等我哥把他的笔记本给我寄过来呢。。。好麻烦~好麻烦。 &emsp;&emsp;刚好，这会儿去问候了一下我们的老学长。老学长提了提裤腰回复道：“你这是睿频吧”。 &emsp;&emsp;天哪，睿频，睿频是啥，我不能说我不知道什么是睿频吧，多丢人。百毒，百毒，赶紧百毒。很关键啊，有一篇很关键的博文告诉我了睿频和超频的区别。好吧，不是这玩意儿的错，那我只能继续求助长者了。 &emsp;&emsp;“是不是你的系统炸了”。 &emsp;&emsp;ありえない、ありえない！有时候关机之后都开不开，怎么可能是软件的问题，肯定是硬件的问题。 &emsp;&emsp;“我觉得不是CPU导致的，你硅脂没涂好吧。” &emsp;&emsp;嘛~不排除这种可能，但是至少比之前的强很多啊。 &emsp;&emsp;长者的话总是言简意赅：“唔。。。那你去看看事件管理器吧。” &emsp;&emsp;事件管理器？事件管理器！事件管理器はなに～？わがりｒない！！！はやく百毒！百毒百毒愛してる～！嗯嗯，百毒不负众望，在众多广告和莆田系医院和工口网站中，我找到了正确答案。 &emsp;&emsp;找啊找啊，摸索了两分钟，搞清楚了这是个什么东西。あああああ～一堆错误和警告啊，作为程序猿，肯定要看错误嘛，警告是个什么东西!程序猿会看的警告，只有FBI的好吗！！！咳~咳~~ &emsp;&emsp;在事件管理器中，我看到了一个比较敏感的时间。2016年9月26日晚上21：40：23。没错了！就是这个时间!第一次自动关机的时候！只要看每次错误关机的时间，以及前面发生了什么！不就知道错误在哪里了吗！！！我真是太机智了!! &emsp;&emsp;这时候，我看到了一连串的四个来自CPU的错误，天哪！肯定是它！绝对是CPU！还说不是！呵呵呵!被我打脸了吧！哈哈哈哈~但是。。。我又去查了一下，好吧，然而并没有什么卵关系，这是因特尔节能技术的那个功能。哎，又一次失望了。 &emsp;&emsp;但是，我又多看了一眼！！！就是你了！犯人就是你!!!! &emsp;&emsp;查了一下，果然，这个服务！就是鲁大师！！！修改的！！！！！鲁大娘！！！！原来罪魁祸首！！！就是你啊！！！！害怕。然后我去开启这个服务，但是发现，缺少模块，还原服务的话虽然可以做到，但是我觉得可以顺便做一个系统嘛，一年了也该换了。再说今天一天都没。。。。不不不！不能奶!好吧，再死机我就装win10。 &emsp;&emsp;胆儿肥了之后，我又上FF14排了个本，打了2小时！@#￥%。（23333懂的都懂）都没有问题。嘛~今天是撑过去了，但是，还是再观察一下吧。反正万一修不好的话（这不是钦定！），有我哥的笔记本嘛~233333。讲道理，这么赛艇的大新闻，还是第一次搞。嘛~自己修的话，还是比那些个电脑店放心靠谱的~。","categories":[],"tags":[{"name":"笔记本","slug":"笔记本","permalink":"http://www.z16388.win/tags/笔记本/"}],"keywords":[]},{"title":"联想Y400拆机换硅脂过程","slug":"联想Y400拆机换硅脂过程","date":"2016-09-29T08:02:08.000Z","updated":"2016-09-29T09:39:04.000Z","comments":true,"path":"2016/09/29/联想Y400拆机换硅脂过程/","link":"","permalink":"http://www.z16388.win/2016/09/29/联想Y400拆机换硅脂过程/","excerpt":"","text":"&emsp;&emsp;最近笔记本出了一个问题，从前天开始，玩着玩着就炸了。从讨鬼传开始，一玩就自动断电，一点办法都没有。前天晚上开始炸了1次，昨天炸了3次，但是还是可以玩的。然后查了一下，可能是散热的问题，就去网上买了硅脂换了。今天换上，还是有些问题，但是整个拆机的过程还是很惊险刺激的，下面分享给大家： &emsp;&emsp;首先是我们今天的患者，联想Y400。 &emsp;&emsp;然后是我们的硅脂：MX-4 &emsp;&emsp;接下来是工具介绍： 一套小螺丝刀一个用来吸螺丝的螺丝刀一个拆笔记本专用的小螺丝刀棉签酒精雕刻刀（不知道干什么用）清灰刷 &emsp;&emsp;之后进行的是Y400的标准拆解过程，将电池拆掉，后盖打开，拆掉硬盘光驱以及内存条。 &emsp;&emsp;然后我们可以拆一下网卡的排线。小心翼翼的用镊子夹掉，然后卸下唯一一个螺丝，就可以拿掉了。 &emsp;&emsp;接下来是拆键盘了。键盘还是比较好拆的，把两个螺丝卸掉，就可以抠出来了。 &emsp;&emsp;然后我们要把键盘面的电源键排线，触控板排线和键盘排线拆掉；再把反面的风扇排线拆掉，再卸掉螺丝，就可以拆掉键盘面的面板了：&emsp;&emsp;这是卸掉的键盘面板： &emsp;&emsp;拆掉之后，把摄像头排线和硬盘排线拆掉，再卸掉主板的两个螺丝就可以拆了。因为有一个风扇的排线不是太好拆，所以我就没拆，但是这样已经可以拆散热件了： &emsp;&emsp;我怕刮花了屏幕，所以就垫了一本书，然后拧掉散热片的螺丝，就可以涂硅脂了。 &emsp;&emsp;涂完之后我就迫不及待地装上去了，虽然打开了，表示存活，也开了下摄像头测试了一下没问题，但是还是会炸。没办法，只能等过年回家找售后了。这学期的话，先学习好吧。这是上天给我的学习的好机会，玩什么游戏！学习！","categories":[],"tags":[{"name":"笔记本","slug":"笔记本","permalink":"http://www.z16388.win/tags/笔记本/"}],"keywords":[]},{"title":"hexo+github博客搭建教程","slug":"hexo-github博客搭建教程","date":"2016-09-13T10:24:56.000Z","updated":"2016-09-13T11:14:19.000Z","comments":true,"path":"2016/09/13/hexo-github博客搭建教程/","link":"","permalink":"http://www.z16388.win/2016/09/13/hexo-github博客搭建教程/","excerpt":"","text":"&emsp;&emsp;之前写了一篇域名绑定的教程，但是只有域名没有东西也不行啊。其实早在前几天就想写这样一篇总结性教程了，但是一直没有抽出时间。我这个博客最初也是在朋友的帮助之下搭建的，这个技术并不难用，所以我想让更多的人能够使用它。 &emsp;&emsp;hexo是一个基于node.jsd静态博客框架。另外，我们可以使用github pages来存放我们的博客。这才有了现在静态博客的黄金搭档hexo+github。 账号注册我们需要以下的账号： &emsp;&emsp;github：用于存放页面，是一个非常流行的开源社区，拥有众多的开源项目。 &emsp;&emsp;多说:用来实现博客的评论和点赞。 &emsp;&emsp;七牛云：用来存放博客中使用的图片。 &emsp;&emsp;阿里云：如果你需要一个域名，可以到阿里云购买。 &emsp;&emsp;CNZZ：如果你需要统计你的博客访问，可以注册一个CNZZ账号，或者是在你的博客首页加上google统计。 环境搭建你需要下载以下几种软件： &emsp;&emsp;Node.js:用来生成静态页面，hexo的环境。 &emsp;&emsp;Git Bash:把本地的内容提交到github上的软件。 &emsp;&emsp;Markdown Pad:用来写博客。 &emsp;&emsp;NotePad++:一款比较好的记事本，用来修改配置文件。 &emsp;&emsp;在github创建一个新的项目，命名为： YourUserName.github.io 开始安装&emsp;&emsp;Node.js和Git Bash安装好之后，首先，创建一个文件夹,比如叫blog，用于存放你的博客相关的文件。然后进入文件夹，开始安装hexo。 &emsp;&emsp;右键，git bash here,打开git bash，然后运行安装命令： npm install -g hexo &emsp;&emsp;然后执行初始化命令： hexo init &emsp;&emsp;打开根目录下的_config.yml配置文件，修改最后的信息为：1234567deploy: type: git repo: Your_git_io_url branch: master &emsp;&emsp;按照备注修改相关的参数，比如博客的名字，你的姓名等等。除此之外，你还可以到hexo的官网的主题页面，去下载你喜欢的主题，放在themes文件夹下。需要修改的参数大部分在主题的配置文件上。当然这一步你以后都可以去做。 &emsp;&emsp;执行命令： npm install hexo-deployer-git –save &emsp;&emsp;执行配置命令： hexo deploy （或者是缩写：hexo d） &emsp;&emsp;至此，博客搭建完成，你可以在浏览器输入http://YourUserName.github.io来访问。每次对博客修改之后，我们都需要先生成(hexo g)，再提交到git(hexo d)。当然，我们可以先进行本地预览，运行本地的服务器(hexo s)，然后用浏览器访问。hexo g和hexo d可以合并成一个指令：hexo d -g &emsp;&emsp;hexo的常用命令和写博客使用的markdown语法请参考： hexo常用命令：http://z16388.win/2016/09/09/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/Markdown常用语法：http://z16388.win/2016/09/09/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"}],"keywords":[]},{"title":"Python常用知识","slug":"Python常用知识","date":"2016-09-12T14:04:46.000Z","updated":"2016-09-28T05:12:15.000Z","comments":true,"path":"2016/09/12/Python常用知识/","link":"","permalink":"http://www.z16388.win/2016/09/12/Python常用知识/","excerpt":"","text":"&emsp;&emsp;想要学Python很久了。一是流行，再是强大。现在写一篇博客，整理一下常用的知识点，以备复习。 1.数据类型数据Python可以处理任意大小的整数可以用0xff00的方法表示十六进制整数 浮点数处理的精度也比较高，但是太高精度需要用科学记数法表示 字符串用单引号或双引号括起来转义字符大体同C大量需要转义字符的地方，可以简写成：r’\\\\\\\\\\’Python允许字符串内换行，使用…来表示：123print(str1...str2...str3) 布尔值：true false可使用and or not 运算 Python中的强制类型转换方法如下：12&gt;&gt;&gt;s=input('birth:')&gt;&gt;&gt;birth=int(s) 注意，input()返回的数据类型是str。 运算符/ 除法，结果一定是浮点型// 整除% 求余 2.字符串和字符编码字符串和整数的转换ord()函数，获取字符的整数表示chr()函数，把编码转换成对应的字符可以使用转义字符表示，例如：\\u4e2d会显示代表的汉字”中” 字符串和字节str是字符串类型bytes是字节类型，需要用带b前缀的单引号或双引号表示：x=b’ABC’‘ABC’和b’ABC’占用的内存不同，后者每个字符都只占用一个字节encode()方法可以把str转换成指定的bytes，例如：12&gt;&gt;&gt;'ABC'.encode('ascii')&gt;&gt;&gt;'中文'.encode('utf-8') 把字节转换成字符串需要使用decode()方法：1&gt;&gt;&gt;'ABC'.decode('ascii') len()函数，用于计算str中的字符数和bytes中的字节数（英文字符只占一个字节，中文字符经常占3个字节） 要保证编译的python文件能够正确显示中文，我们除了在编写环境中指定编码类型为utf-8之外，通常还要在开头加上两行：12#!/usr/bin/env python3# -*- coding: utf-8 -*- 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。 replace()方法，用于取代字符串中某个字符，但是不影响字符串本身：12345&gt;&gt;&gt;a='abc'&gt;&gt;&gt;a.replace('a','A')'Abc'&gt;&gt;&gt;a'abc' 格式化同C的格式化类似1&gt;&gt;&gt; 'Hello, %s' % 'world' %开头的叫做占位字符，常用的占位字符有： %&emsp;&emsp;&emsp;&emsp;整数 %f&emsp;&emsp;&emsp;&emsp;浮点数 %s&emsp;&emsp;&emsp;&emsp;字符串 %x&emsp;&emsp;&emsp;&emsp;十六进制整数 格式化整数和浮点数可以指定是否补0或者确定小数的位数1234&gt;&gt;&gt; '%2d-%02d' % (3, 1)' 3-01'&gt;&gt;&gt; '%.2f' % 3.1415926'3.14' 3.list和tuplelistlist是Python内置的一种数据类型，列表。它是一种有序的集合，可以随时添加和删除其中的元素，声明方式如下：1&gt;&gt;&gt;name=['tom','cat','car'] 可以使用len()函数获取list元素的个数用索引来访问每个元素，索引从0开始：12&gt;&gt;&gt;name[0]tom 可以使用-1做索引，访问最后一个元素，依次类推，可以访问倒数第二，第三个元素：1234&gt;&gt;&gt;name[-1]car&gt;&gt;&gt;name[-2]cat 可以使用append()方法，向list中追加元素到末尾：123&gt;&gt;&gt;name.append('apple')&gt;&gt;&gt;name['tom','cat','car','apple'] 可以使用insert()方法，将元素插入到指定位置，比如下标为1的位置：123&gt;&gt;&gt;name.insert(1,'banana')&gt;&gt;&gt;name['tom','banana','cat','car','apple'] 可以使用pop()方法，删除list末尾的元素：123&gt;&gt;&gt;name.pop()&gt;&gt;&gt;name['tom','banana','cat','car'] 可以使用pop(i)方法，删除指定位置的元素：123&gt;&gt;&gt;name.pop(1)&gt;&gt;&gt;name['tom','cat','car'] 可以使用直接赋值的方法将某元素替换成别的元素：123&gt;&gt;&gt;name.[2]='apache'&gt;&gt;&gt;name['tom','cat','apache'] list中可以存放不同类型的元素，也可以存放list（可以看做二维数组）如果list中没有元素，就是一个空list，长度为0。 tupletuple叫做元组，一旦初始化就不能修改，可以使用索引来访问每个元素，但是不能赋值成另外的元素。因为它无法被修改，所以更加安全。 tuple的定义方法：1234567891011&gt;&gt;&gt;t=(1,2)&gt;&gt;&gt;t(1,2)&gt;&gt;&gt;t=()&gt;&gt;&gt;t()&gt;&gt;&gt;t=(1,)&gt;&gt;&gt;t(1,) 不能使用t=(1)的方法来定义只有一个元素的tuple，这会让python认为它是个括号，而将t认为是一个整形变量。 4.dict和setdictdict即C++中的map，全称是dictionary，具有极快的查找速度。它的元素有两种，一种叫做key，另一种叫做value。前者是查询的参数，后者则是它所对应的值。dict的声明方法如下：123&gt;&gt;&gt;d=&#123;'tom':90,'cat':80,'apache':70&#125;&gt;&gt;&gt;d['tom']90 当然，我们在“放入”的时候也很方便：123&gt;&gt;&gt;d['apache']=60&gt;&gt;&gt;d['apache']60 每个key只对应一个值，后面赋的值会将前面的覆盖。 我们可以使用in来判断一个key是否存在：12&gt;&gt;&gt;'toom' in dFalse 可以使用get方法来获取指定的value。如果不存在，可以返回指定的值：1234&gt;&gt;&gt;d.get('tom')90&gt;&gt;&gt;d.get('tomm',-1)-1 dict的特点 查找和插入的速度极快，不会随着key的增加而变慢； 需要占用大量的内存，内存浪费多。 setset是一组key的集合，但不存储value。因为key不能重复，所以在set中没有重复的元素。要创建一个set需要提供一个list作为输入集合：1234567&gt;&gt;&gt;s=set([1,2,3])&gt;&gt;&gt;s&#123;1,2,3&#125;&gt;&gt;&gt;s=set([1,1,2,2,3,3])&gt;&gt;&gt;s&gt;&#123;1,2,3&#125; 通过add(key)方法可以添加到set中：123&gt;&gt;&gt;s.add(4)&gt;&gt;&gt;s&#123;1,2,3,4&#125; 通过remove(key)方法可以删除元素：123&gt;&gt;&gt;s.remove(4)&gt;&gt;&gt;s&#123;1,2,3&#125; set可以看成无序无重复元素的集合，可以进行交集，并集等操作：123456&gt;&gt;&gt;s1=set([1,2,3])&gt;&gt;&gt;s2=set([2,3,4])&gt;&gt;&gt;s1&amp;s2&#123;2,3&#125;&gt;&gt;&gt;s1|s2&#123;1,2,3,4&#125; 5.判断与循环判断Python也有if和else语句，但是和C比起来又显得非常“任性”。它没有小括号，也没有大括号，具体例子如下：1234age = 20if age &gt;= 18: print(\"your age is %d\",age) print('adult') 根据Python的缩进规则，如果满足if后的条件，则会执行缩进的两个print语句，else也类似：1234567age = 3if age &gt;= 18: print('your age is', age) print('adult')else: print('your age is', age) print('teenager') 注意不要少写了：。 Python中还有elif语句，也就是else if的缩写，所以if语句的完整版就是：12345678if &lt;条件判断1&gt;: &lt;执行1&gt;elif &lt;条件判断2&gt;: &lt;执行2&gt;elif &lt;条件判断3&gt;: &lt;执行3&gt;else: &lt;执行4&gt; 循环for…in循环，可以依次将list或tuple中的每个元素迭代出来：123names=['tom','cat','apache']for name in names: print(name) 执行这段代码，就会依次打印出names中的每个元素：123tomcatapache for x in …循环，可以将元素依次代入变量x，然后执行缩进的语句，例如：1234sum=0;for x in [1,2,3,4,5,6,7,8,9,10]: sum+=x;print(sum) 这段代码显示的结果是0-10的累加和 Python提供了range()函数来生成一个整数序列，比如range(5)生成的是从0开始的5个整数：12&gt;&gt;&gt;list(rangr(5))[0,1,2,3,4] 则0累加到100的程序可以写成：1234sum=0for x in range(101): sum+=xprint(sum) Python中也有while循环，用法和C类似：123456sum=0n=0;while n&lt;101: sum+=n n+=1print(sum)","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://www.z16388.win/tags/Python/"}],"keywords":[]},{"title":"博客第三天","slug":"博客第三天","date":"2016-09-11T14:29:29.000Z","updated":"2016-09-11T15:36:24.000Z","comments":true,"path":"2016/09/11/博客第三天/","link":"","permalink":"http://www.z16388.win/2016/09/11/博客第三天/","excerpt":"","text":"&emsp;&emsp;今天零零星星看了好多东西。早上知乎给我推送了一篇文章，讲的是一些比较好的Python资料。随便点进去一个看了，然后就收藏在手机上了，打算下床用电脑看。之后研究了一会儿插入网易云音乐歌单，然后看了一点儿java，打算写一点网络程序。 &emsp;&emsp;一口气零零散散搞了好多东西，但是什么都没有搞成，什么都没有学到。看来以后应当集中精力去做一件事，一步一个脚印，走好做好，这样才能有更多的收获吧。感觉应该先去整理一下Python的基础知识，然后再看java的多线程和网络，再做一个小东西。当然，六级也要开始准备了，之前计划的日语学习也要开始了。 &emsp;&emsp;要做的事情还有很多，，， &emsp;&emsp;博客的话，明天把插入的音乐改掉，侧边栏减少内容，想办法增加右上角的功能按钮。另外再研究一下今天刚刚搞的Font-Awesome的用法。 &emsp;&emsp;学习是一件很难的事，但是一点一点来，总有能够学成的时候，加油。Yes you can！","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://www.z16388.win/tags/心情/"}],"keywords":[]},{"title":"在博客中插入网易云音乐歌单","slug":"在博客中插入网易云音乐歌单","date":"2016-09-11T03:37:44.000Z","updated":"2016-09-11T04:09:30.000Z","comments":true,"path":"2016/09/11/在博客中插入网易云音乐歌单/","link":"","permalink":"http://www.z16388.win/2016/09/11/在博客中插入网易云音乐歌单/","excerpt":"","text":"&emsp;&emsp;因为版权的原因，网易云音乐已经禁止了歌单的“生成外链播放器”的功能，只能单首歌曲的进行。之前还有查看代码的方法，现在连生成外链播放器的代码都找不到了。但是，方法还是有的。 &emsp;&emsp;首先我们找到以前的代码，以我的歌单为例：1234&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=240 height=100 src=&quot;http://music.163.com/outchain/player?type=0&amp;id=462197233&amp;auto=0&amp;height=430&quot;&gt;&lt;/iframe&gt; &emsp;&emsp;我们来解释一下里面几个比较有用的几个参数： &emsp;&emsp;1.第二行里面的 width=240 height=100 是用来控制播放器的大小的。但是要注意的是，播放器左侧有图片，如果要完全显示的话，宽度一定要长于270&emsp;&emsp;2.第三行有两个比较有用的参数，一个是id 一个是auto。id改成你歌单的ID，可以在网页端进入你的歌单，在地址栏里查看；auto是自动播放属性，0是关闭，非0即开启。后面的height没有任何意义。 &emsp;&emsp;另外歌单的歌曲顺序由加入歌单的顺序决定，这点很麻烦，在歌曲时一定要注意次序。 &emsp;&emsp;令人遗憾的是，网易云音乐的歌单插入毕竟是已经禁止了的功能，有些时候会出现资源加载失败的状况。所以说，想要让自己的博客唱起来，还是只能单个音乐地用。如果想要更好的效果，还是要选用第三方播放器。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"},{"name":"音乐","slug":"音乐","permalink":"http://www.z16388.win/tags/音乐/"}],"keywords":[]},{"title":"博客第二天","slug":"博客第二天","date":"2016-09-10T10:12:05.000Z","updated":"2016-09-11T14:32:28.000Z","comments":true,"path":"2016/09/10/博客第二天/","link":"","permalink":"http://www.z16388.win/2016/09/10/博客第二天/","excerpt":"","text":"&emsp;&emsp;昨天转了很多以前写的东西，搞域名解析到一点多，直到笔记本没电，写博客真心会上瘾啊。 &emsp;&emsp;上午十一点多到一期，等开题，谁知道搞到四点一道都没做出来，真心心累。回到寝室什么都不想干，浑身乏力，好久没有体会过学习的辛苦了。 &emsp;&emsp;总之，从昨天起，开始坚持写吧，也算是对自己的督促。养成习惯，记录自己今天学到了什么，有哪些不做。积少成多，这么做真真是极好的233333。","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://www.z16388.win/tags/心情/"}],"keywords":[]},{"title":"【ACM教程】3.1递归","slug":"【ACM教程】3-1递归","date":"2016-09-10T07:12:02.000Z","updated":"2016-09-10T07:21:37.000Z","comments":true,"path":"2016/09/10/【ACM教程】3-1递归/","link":"","permalink":"http://www.z16388.win/2016/09/10/【ACM教程】3-1递归/","excerpt":"","text":"第一节 递归&emsp;&emsp;递归是一个语言中最难理解的内容之一，它是通过自己调用自己的方法，来进行运算的方法。关于递归有一个非常有意思的定义： 递归：参见“递归” &emsp;&emsp;在生活中，我们也会遇到这样的递归例子： 导员：“你给任课老师请假就行了”。任课老师：“去让你导员给你写个假条”。 &emsp;&emsp;其实在以前的学习中，我们也遇到过递归的思想，数学归纳法就是： 1是正整数如果k是正整数，证明k+1也是正整数若①和②满足，则证明序列n是正整数序列 &emsp;&emsp;C语言和C++是支持递归的。但是，在使用递归的时候，大家应该注意跳出递归的条件，不然就会发生上面导员和任课老师模型之间的无限循环问题。C/C++语言中的递归一般是通过函数来实现的：1234567func(n) &#123; if(xxx) &#123; func(n+1);&#125;else return xxx;&#125; &emsp;&emsp;下面进行几道简单的递归练习题： &emsp;&emsp;最小公倍数 &emsp;&emsp;母牛生小牛","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【游戏安利】噬神者","slug":"【游戏安利】噬神者","date":"2016-09-10T00:56:37.000Z","updated":"2016-09-10T07:43:20.000Z","comments":true,"path":"2016/09/10/【游戏安利】噬神者/","link":"","permalink":"http://www.z16388.win/2016/09/10/【游戏安利】噬神者/","excerpt":"","text":"【游戏安利】噬神者&emsp;&emsp;噬神者是我非常喜欢的游戏系列，它由日本万代南梦宫制作发行，初版在psp上，二代之后以及我要安利的狂怒解放和解放重生都是在PS4，PSV，Steam三平台都有的。 &emsp;&emsp;要说玩，那玩的时间可不少，但是让我安利的话，我却不知道怎么说了。于是，我就问我的联机群里的小伙伴们，如果让他们安利，他们会怎么做。 乳摇 大枪 啪啪啪 &emsp;&emsp;群里的月冷dalao是这么说的。 mh式的操作，精美的人设，未来风，武器多且酷炫，各种大触的子弹，alisa &emsp;&emsp;群里的英灵Archer是这么说的。 &emsp;&emsp;嘛~这里顺便说一下，噬神者Steam联机群： &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;533840872 &emsp;&emsp;但是，其实让我来说的话，作为一个动漫风格，剧情很好的共斗游戏，和朋友在一起联机的体验是最好的。当劳累了一天，和朋友们在游戏里用子弹对♂轰时，仿佛一天的压力都没了。 &emsp;&emsp;嘛~总之，我安利一个人也是马马虎虎的。拉他进群，下午就买游戏了。。。 &emsp;&emsp;还是放一个宣传片吧，官方的安利还是更可靠点的呢2333。","categories":[],"tags":[{"name":"游戏安利","slug":"游戏安利","permalink":"http://www.z16388.win/tags/游戏安利/"},{"name":"游戏","slug":"游戏","permalink":"http://www.z16388.win/tags/游戏/"},{"name":"Steam","slug":"Steam","permalink":"http://www.z16388.win/tags/Steam/"},{"name":"心情","slug":"心情","permalink":"http://www.z16388.win/tags/心情/"}],"keywords":[]},{"title":"给Github Pages绑定阿里云域名","slug":"给Github-Pages绑定阿里云域名","date":"2016-09-09T15:54:20.000Z","updated":"2016-09-13T10:26:13.000Z","comments":true,"path":"2016/09/09/给Github-Pages绑定阿里云域名/","link":"","permalink":"http://www.z16388.win/2016/09/09/给Github-Pages绑定阿里云域名/","excerpt":"","text":"&emsp;&emsp;我在阿里云上注册了一个域名，现在想把它和我的Github Pages绑定起来，也就是说我想达到访问这个域名，能够进入我的博客的目的。 第一步&emsp;&emsp;运行cmd，输入 1ping yourusername.github.io &emsp;&emsp;然后我们会看到一个IP地址。 第二步&emsp;&emsp;在你的阿里云域名解析设置中，添加以下两项内容 A&emsp;&emsp;&emsp;&emsp;www&emsp;&emsp;&emsp;&emsp;&emsp; Your IPA&emsp;&emsp;&emsp;&emsp;@&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Your IP &emsp;&emsp;保存，等待十分钟左右，你就可以使用你的域名来访问你的博客了。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"},{"name":"域名","slug":"域名","permalink":"http://www.z16388.win/tags/域名/"}],"keywords":[]},{"title":"【ACM教程】2.4JAVA大数","slug":"【ACM教程】2-4JAVA大数","date":"2016-09-09T14:35:24.000Z","updated":"2016-09-09T14:39:36.000Z","comments":true,"path":"2016/09/09/【ACM教程】2-4JAVA大数/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】2-4JAVA大数/","excerpt":"","text":"第四节 JAVA大数&emsp;&emsp;由于近些年，大数据的兴起，在ACM比赛中，经常会出现大数的问题。 &emsp;&emsp;大数，字面意思很简单。而在编程中，特指超过32位二进制的数。虽然低于64位的数据计算可以使用long long 的数据类型，但是如果出现乘法，则难免会越界。这样的问题，我们称为大数问题。 &emsp;&emsp;虽然C++给我们提供了大数，但是使用起来不是很方便。特别是在处理乘法和除法的时候，代码可能会达到上百行。JAVA的大数类则比较实用，在ACM竞赛中，我们大多使用JAVA语言进行大数题目的计算。下面是JAVA大数加法的程序:12345678910111213import java.math.BigInteger; import java.util.Scanner; public class Main &#123; public static void main (String args[]) &#123; Scanner in = new Scanner(System.in); while(in.hasNextBigInteger()) &#123; BigInteger a = in.nextBigInteger(); BigInteger b = in.nextBigInteger(); System.out.println(b.add(a)); &#125; in.close(); &#125; &#125; &emsp;&emsp;需要特别注意的是，普通的四则运算符号在大数加减时不能使用，我们要使用类似于C++中运算符重载的方法来进行计算。常用的几种运算如下： add( ) 加法subtract( ) 减法multiply( ) 乘法divide( ) 除法remainder ( ) 求余abs( ) 绝对值pow( int n ) n次幂 &emsp;&emsp;不仅如此，大数只能和大数进行运算。在需要使用常数的时候，我们需要用下面这种方法进行定义：1BigInteger a = new BigInteger ( “XXXXXXX” ); 练习： &emsp;&emsp;&emsp;&emsp;Ti6奖金池","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】2-3排序、查找与初始化","slug":"【ACM教程】2-3排序、查找与初始化","date":"2016-09-09T14:26:37.000Z","updated":"2016-09-09T14:33:38.000Z","comments":true,"path":"2016/09/09/【ACM教程】2-3排序、查找与初始化/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】2-3排序、查找与初始化/","excerpt":"","text":"第三节 排序、查找与初始化&emsp;&emsp;STL指的是C++的标准模板库。使用STL能给我们带来很大的便利，但是它比较复杂，我们只选取一些算法竞赛中常用的STL进行一系列的讲解。首先，我们先学习第一部分。排序和初始化。 排序与查找&emsp;&emsp;排序与查找是两个对于数据常用的操作。C++给我们提供了sort() 和lower_bound() 两个函数来实现这两个功能，这两个函数都在algorithm头文件中。首先，介绍一下两个函数的参数。 sort（起始地址，终点地址，比较方法）；lower_bound（起始地址，终点地址，查找元素）； &emsp;&emsp;sort() 函数可以对任意对象进行排序，不一定是默认的数据类型。但是，在使用其他类型的时候，我们要首先要对该类型进行“大于”或者“小于”运算进行定义。排序的对象可以存放在数组里，也可以存放在vector中（动态数组，以后会进行讲解）。但是，在使用的细节上有所不同。前者是：sort(a,a+n) 后者是：sort(v.begin(),v.end())。 Lower_bound() &emsp;&emsp;这个函数的作用是查找“大于或等于x的第一个位置”。 &emsp;&emsp;stable_sort()函数和sort()函数类似，与后者的区别是，排序之后，不改变相同值元素的相对位置。我们称stable_sort()为稳定排序，举个例子，a1,a2,a3,a4,a5是一数组，其中a2=a4，那么经过排序之后是：a1,a2,a4,a3,a5，我们能看到，排序前后a2总是在a4的前面。在数组的排序中，可能效果不太明显，但是如果是对结构体的排序就会有明显的区别。 &emsp;&emsp;使用这两个函数，将会给我们带来很大的便利。不仅缩短了代码的长度，而且可能要比我们所了解的各种排序查找方法更加优秀，无论是时间复杂度或者空间复杂度。 &emsp;&emsp;请练习下面的题目： &emsp;&emsp;&emsp;&emsp;好汉杯积分问题 初始化&emsp;&emsp;在做和图、矩阵有关的题目时，我们经常会对二维数组进行初始化。将两个无关点之间的距离初始化为无穷，或者是给单位矩阵非对角线元素进行的初始化。C++给我们提供了memset() 函数实现初始化，这个函数在cstring头文件中。下面是memset() 函数的参数： Memset(数组名，初始化内容，初始化范围)； &emsp;&emsp;请练习下面的题目： &emsp;&emsp;&emsp;&emsp;我要送人头！","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】2.2竞赛C++入门","slug":"【ACM教程】2-2竞赛C++入门","date":"2016-09-09T14:11:43.000Z","updated":"2016-09-09T14:27:01.000Z","comments":true,"path":"2016/09/09/【ACM教程】2-2竞赛C++入门/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】2-2竞赛C++入门/","excerpt":"","text":"第二节 竞赛C++入门&emsp;&emsp;本系列文章是以读者学习过C语言为背景的。C语言是一门很好的语言，但是在算法竞赛中却不是十分流行。举个例子：在2013年的ACM/ICPC世界总决赛中，有1347份代码使用C++提交，323份使用Java提交，但唯独C语言没有人使用。 &emsp;&emsp;在我们参加各类软件竞赛时，C语言的程序代码其实都可以直接作为C++程序来进行编译。C++博大精深，但是也会有很多让人诟病的地方。我们在比赛中，重点只需要利用它其中很少的一部分特性。 C++框架&emsp;&emsp;虽然C语言的程序可以直接在C++中运行，但是并不是以C++的写法，下面简单地区别一下两种语言。 C:a+b。12345678#include&lt;stdio.h&gt; int main() &#123; int a,b; while(scanf(\"%d%d\",&amp;a,&amp;b)==2) printf(\"%d\\n\",a+b); return 0; &#125; C++:返回两个个实数中，较小的一个的绝对值。123456789101112#include&lt;iostream&gt; #include&lt;cmath&gt; #include&lt;algorithm&gt; using namespace std; int main() &#123; double a,b; while(cin&gt;&gt;a&gt;&gt;b) &#123; cout&lt;&lt;fabs(min(a,b))&lt;&lt;endl; &#125; return 0; &#125; &emsp;&emsp;首先，和之前我们写的C程序进行比较，在我们使用数学相关的函数时，调用的头文件变成了cmath。实际上math.h依然存在，但是在C++中我们比较推荐使用cmath。类似地，stdio.h变成了cstdio，string.h变成了cstring。 &emsp;&emsp;其次，在我们新增的两个头文件中：iostream提供了输入输出流，而algorithm则提供了一些常用的算法，就比如我们刚刚使用的min()函数。但是，在比赛中建议大家手动编写max和min函数，以免发生意外。 &emsp;&emsp;cin&gt;&gt;a 和 cout&lt;&lt;a 就是我们前面提到的输入输出流，他们就相当于C语言中的scanf和printf函数。相比于后面两个函数，我们在使用输入输出流时省略了%d、%s等占位符。一个是简化了这些繁琐的东西，再一个可以轻易地避免long long 型的输入输出占位符不统一的问题（%i64d、%lld）。但是，C++流是不完美的，其最致命的缺点就是运行太慢，以致于有些题目会在后面明确注明：本题的输入量很大，请不要使用C++的流输入。另外，不要将cout和printf混合使用，会造成输出的数据混乱。 &emsp;&emsp;cin&gt;&gt;a我们还看到了有这一行：using namespace std; 。在C++中，有个概念叫做名称空间。把函数放在名称空间里，我们可以通过这样的方法进行调用： 空间名:函数名(); &emsp;&emsp;cin&gt;&gt;a而我们头文件iostream和algorithm就是放在std 名空间中的。如果我们在写程序的时候，不把std里的名字导入默认空间，那么我们在使用输入输出流的时候就要这么写了： std:cin&gt;&gt;a;std:cout&lt;&lt;a; &emsp;&emsp;C++和C语言的数据类型非常相近，最显著的区别就是多了一个bool类型（ture/false）。 引用&emsp;&emsp;如果想要在一个函数中去操作主函数中的数值，我们除了可以利用指针之外，C++还给我们提供了引用。相比于指针，引用的功能上比指针要弱，但是减少了出错的可能，还能提高代码的可读性。下面我们来看一个例子:1234567891011121314#include&lt;iostream&gt; #include&lt;cstdio&gt; using namespace std; void swapp(int&amp; a,int&amp; b) &#123; int t=a;a=b;b=t; &#125; int main() &#123; int a=3,b=4; swapp(a,b); cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;endl; return 0; &#125; &emsp;&emsp;在上面的程序中，我们使用了饮用。在参数的前面加上“&amp;”符号，就表示这个传参是按照传引用的方式进行传递，而不是C语言中的按值传递。这样，在上面的函数内改变参数的值，也会修改到函数的实参。 模板&emsp;&emsp;在之前，我们可能接触过一些C++给我们提供的函数，比如sort()。默认的函数功能是提供从小到大的排序。如果我们需要从大到小排序，难道需要我们重写sort()吗。 &emsp;&emsp;C++给我们提供了模板功能，可以对一些函数进行修改。 &emsp;&emsp;sort()函数的参数实际上有三个：sort(begin,end,[compare]);第三个是非必填项，意思是排序方式。我们只需要在使用sort函数之前，对它的排序方式进行规定，就可以实现从大到小的排序了。下面是代码：1234567891011121314151617181920#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;bool compare(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; int a[5]; for(int i=0;i&lt;5;i++) &#123; cin&gt;&gt;a[i]; &#125; sort(a,a+5,compare); for(int i=0;i&lt;5;i++) &#123; cout&lt;&lt;a[i]&lt;&lt;\" \"; &#125; return 0;&#125;","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】2.1常用输入输出格式","slug":"【ACM教程】2-1常用输入输出格式","date":"2016-09-09T12:34:22.000Z","updated":"2016-09-09T12:45:55.000Z","comments":true,"path":"2016/09/09/【ACM教程】2-1常用输入输出格式/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】2-1常用输入输出格式/","excerpt":"","text":"第一节 常用输入输出格式&emsp;&emsp;写程序，大家都会写。但是在比赛里面怎样写程序，应该按照怎样的格式去写程序，都是有严格的要求的。下面简单介绍一下各种比赛中，常见的输入输出格式。 OI&emsp;&emsp;OI比赛中，输入输出均需要使用文件操作。常见的格式如下：123456789101112#include&lt;stdio.h&gt; int main() &#123; FILE *fin,*fout; fin=fopen(\"fin.txt\",\"r\"); fout=fopen(\"fout.txt\",\"w\"); int a,b,sum; fscanf(fin,\"%d %d\",&amp;a,&amp;b); sum=a+b; fprintf(fout,\"%d\\n\",sum); return 0; &#125; 蓝桥杯&emsp;&emsp;蓝桥杯比赛对格式的要求不是很高，养成良好的代码书写习惯即可。123456#include&lt;stdio.h&gt; int main() &#123; printf(\"Hello world\\n\"); return 0; &#125; ACM&emsp;&emsp;ACM比赛中，对输入输出的要求多种多样。因为题目都是英语，所以大家应当仔细审题，控制好输入和输出。其中，一下几种情况会经常出现。 &emsp;&emsp;第一种，输入一个或一组数据。方法同蓝桥杯比赛。123456#include&lt;stdio.h&gt; int main() &#123; printf(\"Hello world\\n\"); return 0; &#125; &emsp;&emsp;第二种，输入多组数据。题目中，常见的描述方式为：The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line.1234567891011#include&lt;stdio.h&gt; #include&lt;iostream&gt; using namespace std; int main() &#123; int i,j; while(scanf(\"%d%d\",&amp;i,&amp;j)!=EOF) &#123; printf(\"%d\\n\",i+j); &#125; return 0; &#125; &emsp;&emsp;这里我们的输入语句是写在while循环语句里面的，后面有一个!=EOF。EOF是文件结尾的标志，也就是说循环在输入结束时停止。这种输入方法在ACM中最为常见，大家应当熟练掌握。 &emsp;&emsp;第三种，输入多组数据，直到遇到0，0这组数据时，停止输入。常见描述方式为：Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.1234567891011#include&lt;stdio.h&gt; #include&lt;iostream&gt; using namespace std; int main() &#123; int i,j; while(scanf(\"%d%d\",&amp;i,&amp;j)&amp;&amp;(i||j)) &#123; printf(\"%d\\n\",i+j); &#125; return 0; &#125; &emsp;&emsp;第四种，输入一个数字n，接下来输入n组测试数据。常见的描述方式为：Input contains an integer N in the first line, and then N lines follow.1234567891011121314#include&lt;stdio.h&gt; #include&lt;iostream&gt; using namespace std; int main() &#123; int n; scanf(\"%d\",&amp;n); while(n--) &#123; int i,j; scanf(\"%d%d\",&amp;i,&amp;j); printf(\"%d\\n\",i+j); &#125; return 0; &#125; &emsp;&emsp;另外，在输入字符串时，我们可以使用gets()函数12char buf [ 20 ] ; gets ( buf ) ; 练习题目：Clang 1085~1092题","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】1.3常用编译环境与OJ系统","slug":"【ACM教程】1-3算法竞赛介绍","date":"2016-09-09T11:35:32.000Z","updated":"2016-09-10T07:42:35.000Z","comments":true,"path":"2016/09/09/【ACM教程】1-3算法竞赛介绍/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】1-3算法竞赛介绍/","excerpt":"","text":"第三节 常用编译环境与OJ系统编译环境&emsp;&emsp;编译环境就是我们编写代码时所使用的软件。在参加算法类竞赛时，我们通常使用以下三种软件。 DEV-C++ &emsp;&emsp;Dev-C++为OI和蓝桥杯C/C++组比赛中的指定编译环境。 Code::Blocks &emsp;&emsp;Code::Blocks为ACM比赛中指定的C/C++编译环境。 Eclipse &emsp;&emsp;Eclipse为蓝桥杯java组和ACM中指定的java编译环境。 常用OJ系统HDU: http://acm.hdu.edu.cn/PKU: http://poj.org/Clang: http://www.clang.cc/Codevs: http://www.codevs.cn/51nod: http://www.51nod.com/","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】1.2算法竞赛介绍","slug":"【ACM教程】1-2算法竞赛介绍","date":"2016-09-09T11:21:37.000Z","updated":"2016-09-09T12:35:38.000Z","comments":true,"path":"2016/09/09/【ACM教程】1-2算法竞赛介绍/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】1-2算法竞赛介绍/","excerpt":"","text":"第二节 算法竞赛介绍&emsp;&emsp;本教程是针对参加各种算法竞赛的同学们编写的。这一节主要介绍几种比较有名的算法竞赛。 OI(Olympiad in Informatics，信息学奥林匹克竞赛)&emsp;&emsp;OI是Olympiad in Informatics的简称，1987年，保加利亚的Sendov教授在联合国教科文组织第24届全体会议上，倡议举行国际信息学奥林匹克，定名为International Olympiad in Informatics，简称IOI。OI是面向中学生的一年一度的信息学科竞赛。第一届国际信息学奥林匹克竞赛于1989年在保加利亚的布拉维茨举行。 &emsp;&emsp;考的内容主要是计算机编程。OI的比赛有NOIP，NOI，IOI等。NOIP是最初级别的比赛，分初赛和复赛，初赛为笔试，选出成绩优秀的选手参加复赛；复赛是上机编程，选出各个省市的一等奖，参加省级OI（NOIP是参加NOI的必备条件）。NOI是通过NOIP或各省省选选出的优秀选手组成省队参加的全国比赛。NOI选出全国一二三等奖，并选出国家集训队。 &emsp;&emsp;中国队参加8届大赛，届届名列前茅。中国队共计派出选手31人次，全部获奖，累计金牌17块、银牌6块，铜牌8块。在这种世界级别的智能大赛中，中国的娃娃们给参赛国的领队和选手留下了深刻的印象，盛赞“中国队是整体实力最强的队”。在波IOI’92 的发奖大会上，组委会为金牌得主设置了6台高档微计算机， 中国队捧回了3台。在IOI’94（瑞典），黄天明同学编的程序比组委会的标准答案运行速度快了20倍，组委会非常欣赏，派专人到中国队驻地索取原程序。1995年中国队首次派女选手参加IOI， 结果两位女选手杨域和林凌荣登金牌领奖台，填补了国际信息学赛事上女选手从未拿过金牌的空白，引起轰动。IOI’96（匈牙利）中国队经努力拼搏，4名选手夺得4枚金牌，实现了全“金”的突破，创造了新的纪录。近几年来，中国选手在国际信息学奥林匹克竞赛中表现优异，已连续三年在IOI中全部摘得金牌。 ACM-ICPCACM-Association for Computing Machinery，国际计算机学会。ICPC-International Collegiate Programming Contest，国际大学生程序设计竞赛。 &emsp;&emsp;ACM国际大学生程序设计竞赛是由国际计算机学会（ACM）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过近30多年的发展，ACM国际大学生程序设计竞赛已经发展成为最具影响力的大学生计算机竞赛。赛事目前由IBM公司赞助。 &emsp;&emsp;赛事由各大洲区域预赛和全球总决赛两个阶段组成。各预赛区第一名自动获得参加全球总决赛的资格。决赛安排在每年的3-4月举行，而区域预赛一般安排在上一年的9-12月举行。一个大学可以有多支队伍参加区域预赛，但只能有一支队伍参加全球总决赛 &emsp;&emsp;竞赛进行5个小时，一般有11—13道试题，由同队的三名选手使用同一台计算机协作完成。当解决了一道试题之后，将其提交给评委，由评委判断其是否正确。若提交的程序运行不正确，则该程序将被退回给参赛队，参赛队可以进行修改后再一次提交该问题。竞赛结束后，参赛各队以解出问题的多少进行排名，若解出问题数相同，按照总用时的长短排名。总用时为每个解决了的问题所用时间之和。一个解决了的问题所用的时间是竞赛开始到提交被接受的时间加上该问题的罚时(每次提交通不过，罚时20分钟)。没有解决的问题不记时。美国英语为竞赛的工作语言。竞赛的所有书面材料(包括试题)将用美国英语写出，区域竞赛中可以使用其它语言。总决赛可以使用的程序设计语言包括pascal，c，c++及java，也可以使用其它语言。具体的操作系统及语言版本各年有所不同。 竞赛流程：123456参赛队伍最多由三名参赛队员组成。 竞赛中一般命题10题左右，试题描述为英文，比赛时间为5个小时，前四个小时可以看到实时排名，最后一小时封榜，无法看到排名。竞赛可以使用的语言：C++、C、Java和Pascal。但final赛只有C/C++;重点考察选手的算法和程序设计能力，不考察任何Windows编程知识；选手可携带任何非电子类资料，包括书籍和打印出来的程序等，部分赛区会对携带的资料进行限制；评委负责将结果（正确或出错的类型）通过网络尽快返回给选手，除此之外不提供任何额外帮助； 返回结果：1234567Accepted. ---通过！(AC)Wrong Answer. ---答案错。(WA)Run Time Error. ---程序运行出错，意外终止等。(RTE)Time Limit Exceeded. ---超时。程序没在规定时间内出答案。(TLE)Presentation Error. ---格式错。程序没按规定的格式输出答案。(PE)Memory Limit Exceeded. ---超内存。程序没在规定空间内出答案。(MLE)Compile Error. ---编译错。程序编译不过。(CE) ACM试题的特点：1234严格的输入输出格式，有一点儿偏差都不能够AC；对算法的高效有着极致的追求，即使算法正确，但是如果效率不高，也不能AC；测试数据庞大，即使算法是正确的，不能应对极端的测试数据的话，也不能AC；强调解决实际问题的能力，试题大多会有大篇幅的描述，需要有一定的读题能力，分析能力，当然，英语也很重要。 蓝桥杯&emsp;&emsp;蓝桥杯由工业和信息化部人才交流中心举办，全称为：“全国软件专业人才设计与创业大赛”。包含个人和团队两个比赛项目。个人竞赛分为：C/C++本科A组，C/C++本科B组，C/C++高职高专组，java本科A组， java本科B组，java高职高专组，嵌入式设计与开发大学组，嵌入式设计与开发研究生组，单片机设计与开发本科组，单片机设计与开发高职高专组，电子设计与开发本科组，电子设计与开发高职高专组共12个组别。每位选手只能参加其中一个组别的竞赛。 &emsp;&emsp;蓝桥杯算法类比赛是一个比较新的比赛，到2016年共举办了七次，在国内外的知名度还不是很高。但是获得省赛一等奖以上可以获得IBM颁发的“高级软件工程师认证”和工信部颁发的“电子信息从业人员高级证书”。 参考资料： IOI官方网站： ACM-ICPC：https://icpc.baylor.edu/ 蓝桥杯官方网站：http://www.lanqiao.org/","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"【ACM教程】1.1算法概述","slug":"【ACM教程】1-1算法概述","date":"2016-09-09T11:00:24.000Z","updated":"2016-09-09T11:30:13.000Z","comments":true,"path":"2016/09/09/【ACM教程】1-1算法概述/","link":"","permalink":"http://www.z16388.win/2016/09/09/【ACM教程】1-1算法概述/","excerpt":"","text":"第一节 算法概述算法是什么？&emsp;&emsp;算法是软件工程非常重要的基础科目。简单来说，算法就是解决特定问题的方法和步骤。为了解决现实生活中的各种问题，我们就把现实问题对应成数学问题，然后设计公式，编写程序，让计算机编译，运行得到答案——这时候运用的方法就是算法。 &emsp;&emsp;尽管这里运用了“公式”这个词来形容算法，然而算法并不是大家印象中死板的数学公式。因为计算机能够执行复杂的计算，所以公式可以设计成好几行，甚至几百行，用到很多数学理论。因此，就算学习过算法的人，也不一定会设计算法。因为数学、程序上面的东西都比较复杂。想要把现实中的问题对应到数学问题，那就更加复杂了。 &emsp;&emsp;通常，算法具有由三部分组成：输入、输出、计算过程。说到这里，大家可能会联想到函数。 &emsp;&emsp;输入、输出是一个或一组数据，实际上是将这些数字放在数据结构中比如数组、链表。输入的来源，通常是硬盘中存储的数据，或者是由键盘输入的数字；输出的去处可能是硬盘中的文件或是由硬盘中的数据转换之后以其他的形式呈现，例如显示器。 &emsp;&emsp;计算过程是一连串处理数字的指令。指令有两种类型，一种是运算，例如数学运算的加减乘除、逻辑预算的与或非、比较大小、位运算等等；另一种则是读写，例如读取某处的数字，存储数字至某处。 &emsp;&emsp;在算法之前的定义中，算法的计算步骤必须是有限的。用程序的语言说：算法不能无限轮回。之所以规定算法的步骤有限是为了方便统计计算的步数。但是事实上，很多的计算机程序都是开启之后保持运行的状态，直到遇到死机或者关机。例如用于网络传输的算法。因此，实际上，算法是可以有无限步的。 计算机只会算数字&emsp;&emsp;计算机就是一台用于计算的机器，它只会计算、判断以及存储数据，但是能够做得又快又准。而程序，是一连串计算、判断、存储数据的过程。 &emsp;&emsp;计算机只会处理二进制数字，计算机中的每一个文字、每一种颜色、每一种声音，都有它所对应的数字。例，我们规定：用1代表数字“一”，用2代表汉字“乙”，用3代表汉字“人”…一个数字对应一个汉子。按照这样的规定，计算机中所有的汉字都变成了数字。同理，呈现在电脑屏幕上的不同颜色、图片、影像等，都可以转化成数字。一切事物在计算机里都是数字。 &emsp;&emsp;如果我们想要利用计算机解决实际问题，通常要考虑两个方面：一、计算机应该使用哪些设备?计算机如何操作这些设备？二、显示问题如何对应到数学问题?如何设计算法？当然，编写程序，计算数字，这就是程序设计师的工作。 数学和程序这么复杂，为什么要用计算机解决现实问题？&emsp;&emsp;计算机解决问题的速度很快，一秒可以进行几千万次以上的计算。即使是很大的数据量，计算机也能够轻松解决。打开计算机中的一份文件，用鼠标滑动页面。眼镜还没来得及眨一下，正确的内容就已经显示在显示器上了。事实上，在我们滑动页面的时候，计算机已经完成了很多次的计算，然后把正确的内容展示在显示器上了。 &emsp;&emsp;人们想要用计算机来解决问题，就是因为它速度快，正确率高，而且计算机会按照人们设计的程序来进行运算。程序设计师只要设计好一个好的程序，接下来的工作就可以让计算机代劳了。计算机的运算速度比人要更快更好，计算机做得到人类做不到是事。相比于算法的复杂，程序和计算机的组合能够给人们带来更多的便利。现在，计算机应用在人们生产生活的各个方面，程序设计师们设计的程序也在世界各地发光发热。 如何表示一个算法&emsp;&emsp;有人用伪代码来表示一个算法。如要实际计算机程序，伪代码是比较方便使用的。下面是一段伪代码：1234567GREATEST_COMMON_DIVISOR(a, b) while a ≠ b do if a &gt; b then a ← a - b else b ← b - a return a &emsp;&emsp;当然，你也可以使用流程图来表示一个算法。下面是一个流程图： 如何实现一个算法&emsp;&emsp;实现的意思就是实际操作，实际运行。对于程序设计师来说，就是把算法写成程序，比如C/C++程序或者是java程序，然后在计算机上去执行。这个是我们接下来我们主要研究的东西。 衡量算法优良的标准&emsp;&emsp;要评价一个算法的好坏，最基本的两个指标就是时间复杂度和空间复杂度。用直观的感觉来说，就是程序的执行时间和内存使用量。但是由于不同的计算机执行时间会有所不同，而且这两项指标同时会受到程序语言的类型、程序设计的技巧的影响。因此，执行时间和内存使用量并不是一个稳定的评判标准。1234for ( i = 0 ; i &lt; length(A) ; i ++ ) for (j = 0 ; j &lt; length(A)-I ; j ++ ) if A [ j ] &lt; A [ j+1] swap A [ j ] and A [ j+1 ] &emsp;&emsp;上面的程序是一个简单的数组排序问题，我们经常采用统计计算步骤的方法来去衡量一个算法的时间复杂度。1234567 Code stepfor ( i = 0 ; i &lt; length(A) ; i ++ ) n for (j = 0 ; j &lt; length(A)-I ; j ++ ) n ( n - 1) / 2 if A [ j ] &lt; A [ j+1] &#123; n ( n - 1) / 2 Temp = A [ j ] ; n ( n - 1) / 2 A [ j ] = A [ j + 1 ] ; n ( n - 1) / 2 A [ j + 1 ] = temp ; n ( n - 1) / 2 Sum = n + 5n ( n – 1 ) / 2= n + 2.5n2 – 2.5n= 2.5n2 – 1.5n= O ( n2 ) &emsp;&emsp;像上面那个算法，我们称它的时间复杂度为O ( n2 )。这是因为在上式中，我们进行的并不是精确的步骤计算。针对不同的数据，系数变动会很大。因此，我们只取代数式的最高次方。最高次方越大，时间复杂度越高，算法的速度也就越慢。并且，我们规定n必须足够大。尽管这样的估算并不是非常精准，但是还是可以对一些常见的算法进行简易的分类，粗略地比较快慢。 &emsp;&emsp;下面是几种常见算法的时间复杂度和空间复杂度。（空间复杂度的计算和时间复杂度类似。）1234567type time spacebubble sort ( 冒泡排序 ) O ( n2 ) O ( n ) insertion sort ( 插入排序 ) O ( n2 ) O ( n ) merge sort ( 归并排序 ) O ( n log ( n ) ) O ( n ) quicksort ( 快速排序 ) O ( n2 ) O ( n ) heapsort ( 堆排序 ) O ( n log ( n ) ) O ( n ) counting sort ( 计数排序 ) O ( n + r ) O ( n + r ) 学习编程语言&emsp;&emsp;学习编程语言，有两个层次：一是语言本身的语法，二是把算法转换成代码的能力。算法固然重要，然而更重要的是用一种语言来把它表述出来，这样它才能发挥作用。而使用编程语言将算法描述出来这个过程，正是我们今后学习的重点。关于各种编程语言，本教程不作详细介绍，因为其他的书籍已经介绍得足够详细了。接下来对算法的描述，以C/C++语言为主，部分辅以java语言。 参考书目： 1.《算法竞赛入门经典（第二版）》 （刘汝佳编著，2009年，清华大学出版社）2.《数据结构实用教程（C语言版）（第二版）》（2009年，清华大学出版社）","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"ACM教程","slug":"ACM教程","date":"2016-09-09T10:53:22.000Z","updated":"2016-09-10T07:23:54.000Z","comments":true,"path":"2016/09/09/ACM教程/","link":"","permalink":"http://www.z16388.win/2016/09/09/ACM教程/","excerpt":"","text":"ACM教程前言&emsp;&emsp;从今天起，我将会在我的博客同步更新我的ACM教程系列。虽说是教程，但是两年ACM经历的我还是有许多要学的东西，在这里写下自己的学习经历，也算是共同进步吧。 目录第一章 简介第1节 算法概述第2节 算法竞赛介绍第3节 常用编译环境与OJ系统第二章 走进算法竞赛第1节 常用输入输出格式第2节 竞赛C++入门第3节 排序、查找与初始化第4节 JAVA大数第三章 算法初步第1节 递归","categories":[],"tags":[{"name":"ACM","slug":"ACM","permalink":"http://www.z16388.win/tags/ACM/"},{"name":"算法","slug":"算法","permalink":"http://www.z16388.win/tags/算法/"},{"name":"ACM教程","slug":"ACM教程","permalink":"http://www.z16388.win/tags/ACM教程/"}],"keywords":[]},{"title":"hexo常用命令","slug":"hexo常用命令","date":"2016-09-09T10:38:06.000Z","updated":"2016-09-09T10:43:53.000Z","comments":true,"path":"2016/09/09/hexo常用命令/","link":"","permalink":"http://www.z16388.win/2016/09/09/hexo常用命令/","excerpt":"","text":"hexo常用命令笔记 1.hexo相关123npm install hexo -g #安装 npm update hexo -g #升级 hexo init #初始化 2.常用的缩写12345hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 持续更新","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"}],"keywords":[]},{"title":"Markdown常用语法","slug":"Markdown常用语法","date":"2016-09-09T09:35:47.000Z","updated":"2016-09-09T10:35:00.000Z","comments":true,"path":"2016/09/09/Markdown常用语法/","link":"","permalink":"http://www.z16388.win/2016/09/09/Markdown常用语法/","excerpt":"","text":"Markdown常用语法 一.标题&emsp;&emsp;使用#来表示标题d大小。123# 一级标题## 二级标题### 三级标题 二.列表&emsp;&emsp;用-、+或者*来使用无序列表，数字后加点使用无序列表。 无序列表1234无序列表- 1- 2- 3 1 2 3 有序列表12345有序列表1. abc2. def3. ghi abc def ghi 嵌套列表12345678嵌套列表- 嵌套列表1 + 嵌套列表2 + 嵌套列表3 - 嵌套列表4 * 嵌套列表5- 嵌套列表6 嵌套列表1 嵌套列表2 嵌套列表3 嵌套列表4 嵌套列表5 嵌套列表6 三.引用&emsp;&emsp;使用大于号&gt;来表示引用。1&gt;这里是引用 这里是引用 四.图片与链接123456![图片名](图片链接)[链接名](链接地址)&lt;链接&gt;图片：![百毒](https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo_top_ca79a146.png)链接：[bilibili](http://www.bilibili.com/)&lt;http://www.bilibili.com/&gt; 五.字体&emsp;&emsp;支持html字体。1234567**粗体** *斜体* &lt;del&gt;删除线&lt;/del&gt;&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;&lt;font color=gray size=5&gt;gray&lt;/font&gt; 六.分割线1--- 七.代码把代码用三个`符号括起来，可以选择所使用的语言。123456#include&lt;stdio.h&gt;int main()&#123; printf(\"Hello world\\n\"); return 0;&#125; 八.注释1&lt;!-- 注释 --&gt; 九.转义字符及空格&emsp;&emsp;同html。12345678910111213141516171819202122232425262728\\\\ 反斜杠\\` 反引号\\* 星号\\_ 下划线\\&#123;\\&#125; 大括号\\[\\] 中括号\\(\\) 小括号\\# 井号\\+ 加号\\- 减号\\. 英文句号\\! 感叹号半方大的空白&amp;ensp;或&amp;#8194;看，飞碟全方大的空白&amp;emsp;或&amp;#8195;看，飞碟不断行的空白格&amp;nbsp;或&amp;#160;看，飞碟&amp;emsp;&amp;emsp;段落从此开始。 \\ 反斜杠 ` 反引号 * 星号 _ 下划线 {} 大括号 [] 中括号 () 小括号 # 井号 + 加号 - 减号 . 英文句号 ! 感叹号 半方大的空白&ensp;或&#8194;看，飞碟全方大的空白&emsp;或&#8195;看，飞碟不断行的空白格&nbsp;或&#160;看，飞碟&emsp;&emsp;段落从此开始。","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://www.z16388.win/tags/markdown/"},{"name":"hexo","slug":"hexo","permalink":"http://www.z16388.win/tags/hexo/"}],"keywords":[]},{"title":"博客第一天","slug":"博客第一天","date":"2016-09-09T09:21:52.000Z","updated":"2016-09-11T03:41:14.000Z","comments":true,"path":"2016/09/09/博客第一天/","link":"","permalink":"http://www.z16388.win/2016/09/09/博客第一天/","excerpt":"","text":"博客第一天hexo试用心情 &emsp;&emsp;今天折腾了一天，终于算是做了一个还算满意的网站。 &emsp;&emsp;从昨天开始，安装hexo，各种配置，到今天选择主题，各种改，最后成了这个样子。一天过去，没玩游戏，感到非常地充实——好久没有体会过学习的快感了。 &emsp;&emsp;明天就要开始ACM网络赛了，加油！","categories":[],"tags":[{"name":"心情","slug":"心情","permalink":"http://www.z16388.win/tags/心情/"}],"keywords":[]}]}