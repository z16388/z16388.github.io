<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎径 其镜</title>
  <subtitle>求学道路上的行车记录仪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.z16388.win/"/>
  <updated>2017-01-22T17:44:04.000Z</updated>
  <id>http://www.z16388.win/</id>
  
  <author>
    <name>Anqi Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VPS笔记</title>
    <link href="http://www.z16388.win/2017/01/22/VPS%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.z16388.win/2017/01/22/VPS笔记/</id>
    <published>2017-01-22T13:28:47.000Z</published>
    <updated>2017-01-22T17:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;登录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@ip</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;安装可视化管理面板<strong>AMH</strong></p>
<ol>
<li>登录</li>
<li><p>运行脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://amysql.com/file/AMH/4.2/amh.sh; chmod 775 amh.sh; ./amh.sh 2&gt;&amp;1 | tee amh.log;</div></pre></td></tr></table></figure>
</li>
<li><p>根据安装步骤提醒键入相应内容，完成安装</p>
</li>
<li>使用ip和配置的端口进行访问，例如<code><a href="http://ip:8888" target="_blank" rel="external">http://ip:8888</a></code></li>
</ol>
<p>&emsp;&emsp;ShadowsocksR一键安装脚本<br>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</div><div class="line">chmod +x shadowsocksR.sh</div><div class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</div></pre></td></tr></table></figure></p>
<p>卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocksR.sh uninstall</div></pre></td></tr></table></figure></p>
<p>其他操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">启动：/etc/init.d/shadowsocks start</div><div class="line">停止：/etc/init.d/shadowsocks stop</div><div class="line">重启：/etc/init.d/shadowsocks restart</div><div class="line">状态：/etc/init.d/shadowsocks status</div><div class="line"></div><div class="line">配置文件路径：/etc/shadowsocks.json</div><div class="line">日志文件路径：/var/log/shadowsocks.log</div><div class="line">代码安装目录：/usr/local/shadowsocks</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;登录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
    
    </summary>
    
    
      <category term="VPS" scheme="http://www.z16388.win/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.7排序（一）</title>
    <link href="http://www.z16388.win/2017/01/18/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-7%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.z16388.win/2017/01/18/【ACM教程】3-7排序（一）/</id>
    <published>2017-01-18T03:25:23.000Z</published>
    <updated>2017-01-19T15:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七节-排序（一）"><a href="#第七节-排序（一）" class="headerlink" title="第七节 排序（一）"></a>第七节 排序（一）</h1><p>&emsp;&emsp;我们在写程序的时候，经常需要去进行排序这种操作。在面对大量数据进行排序的时候，我们可能需要花费很多的时间和资源。因此，优化排序算法是我们在优化程序中的一个重要步骤。在我们前面的学习中，我们已经接触到了C++的STL中<code>sort()</code>函数。那么，在无法使用STL的情况或者是需要一些特殊的要求的排序，我们就需要对排序算法进行手撸。因此，掌握各种常见的排序方法极为重要。接下来，我们将会从冒泡排序开始，系统地对常见的排序算法进行练习。</p>
<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>&emsp;&emsp;我们早在学习C语言的时候，就已经接触到这种排序方法了，是一种非常简便的排序方法。我们依次比较相邻的两个元素，以达到排序的目的。冒泡排序的运作方式如下：</p>
<blockquote>
<p>重复走访所要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们相互交换<br>如果这个数列一共有<code>n</code>个元素，我们需要进行<code>n-1</code>组比较，每一组需要进行<code>n-i</code>次比较</p>
</blockquote>
<p>&emsp;&emsp;下面是冒泡排序的C语言代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">15</span>];</div><div class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i,j,t;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        a[i]=<span class="number">10</span>-i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i;j++) <span class="comment">//这里可以记作i+j=n;</span></div><div class="line">        sif(a[j]&gt;a[j+<span class="number">1</span>]) &#123;</div><div class="line">                t=a[j];</div><div class="line">                a[j]=a[j+<span class="number">1</span>];</div><div class="line">                a[j+<span class="number">1</span>]=t;</div><div class="line">            &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;冒泡排序是一种常用的排序方法，但是它的时间复杂度为<code>O(n^2)</code>，在做题时不推荐使用。</p>
<h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>&emsp;&emsp;快速排序是对冒泡排序的一种改进，它的基本思想和冒泡排序类似：</p>
<blockquote>
<p>通过一趟排序将序列分成两部分<br>保证左侧部分的数据都比右侧的小<br>再分别对两侧进行排序</p>
</blockquote>
<p>&emsp;&emsp;快速排序是排序算法中的优等生，它的时间复杂度为<code>O(logn)</code>，但是要到达了最不理想的状态，也就是针对一个完全反序的数列进行排序。这个时候，它就变成了冒泡排序，时间复杂度为<code>O(n^2)</code>。在去年的蓝桥杯比赛中，就成为了一道代码填空题，题目是这样的：</p>
<blockquote>
<p>排序在各种场合经常被用到。</p>
<p>快速排序是十分常用的高效率的算法。</p>
<p>其思想是：先选一个“标尺”，</p>
<p>用它把整个队列过一遍筛子，</p>
<p>以保证：其左边的元素都不大于它，其右边的元素都不小于它。</p>
<p>这样，排序问题就被分割为两个子区间。</p>
<p>再分别对子区间排序就可以了。</p>
<p>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = p;</div><div class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> x = a[p];</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</div><div class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line">        swap(a,i,j);</div><div class="line">    &#125;</div><div class="line"><span class="number">______________________</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> j;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">    <span class="keyword">int</span> q = partition(a,p,r);</div><div class="line">    quicksort(a,p,q<span class="number">-1</span>);</div><div class="line">    quicksort(a,q+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</div><div class="line">    <span class="keyword">int</span> N = <span class="number">12</span>;</div><div class="line">    quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"/n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七节-排序（一）&quot;&gt;&lt;a href=&quot;#第七节-排序（一）&quot; class=&quot;headerlink&quot; title=&quot;第七节 排序（一）&quot;&gt;&lt;/a&gt;第七节 排序（一）&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们在写程序的时候，经常需要去进行排序这种操作。在面对大量数
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2017新年祝福</title>
    <link href="http://www.z16388.win/2017/01/01/2017/"/>
    <id>http://www.z16388.win/2017/01/01/2017/</id>
    <published>2016-12-31T16:16:10.000Z</published>
    <updated>2016-12-31T16:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2016已经成为了过去式，新的一年已经来临。过去的一年里，无论有多少收获，2017，我们都会遇到一个新的自己。祝大家在新的一年里，能够距离自己的目标更进一步，保持自己的信心，继续前进。无论结果如何，这都会是我们人生中最精彩的一年——今年。</p>
<p>&emsp;&emsp;2017，要实训，要考研，要学习日语，要加强算法的练习，完善ACM的教程，要增进刀塔的技术…</p>
<p>&emsp;&emsp;我们笑着送走2016，2017，也会是快乐的一年。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;2016已经成为了过去式，新的一年已经来临。过去的一年里，无论有多少收获，2017，我们都会遇到一个新的自己。祝大家在新的一年里，能够距离自己的目标更进一步，保持自己的信心，继续前进。无论结果如何，这都会是我们人生中最精彩的一年——今年。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="心情" scheme="http://www.z16388.win/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>hdu1326,hdu2088</title>
    <link href="http://www.z16388.win/2016/11/16/hdu1326-hdu2088/"/>
    <id>http://www.z16388.win/2016/11/16/hdu1326-hdu2088/</id>
    <published>2016-11-16T12:06:16.000Z</published>
    <updated>2016-11-16T13:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这两道是同一道题，只是区别在输出格式。</p>
<p>&emsp;&emsp;算出需要移动的方块个数（相差平均数的总个数）即可，需要注意的是每两个输出之间有一个空行。</p>
<p>&emsp;&emsp;2088就比较套路，最后一组输出没有空行。</p>
<p>hdu1326</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,flag=<span class="number">0</span>,ave,sum;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        ave=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            ave+=a[i];</div><div class="line">        &#125;</div><div class="line">        ave/=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;ave) &#123;</div><div class="line">                sum+=ave-a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Set #%d\n"</span>,++flag);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The minimum number of moves is %d.\n\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>hdu 2088</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,ave,sum,flag=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        ave=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(flag++) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            ave+=a[i];</div><div class="line">        &#125;</div><div class="line">        ave/=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;ave) &#123;</div><div class="line">                sum+=ave-a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这两道是同一道题，只是区别在输出格式。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;算出需要移动的方块个数（相差平均数的总个数）即可，需要注意的是每两个输出之间有一个空行。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;2088就比较套路，最后一组输出没有空行。&lt;
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>hdu1720 A+B Coming</title>
    <link href="http://www.z16388.win/2016/11/16/hdu1720/"/>
    <id>http://www.z16388.win/2016/11/16/hdu1720/</id>
    <published>2016-11-16T11:32:29.000Z</published>
    <updated>2016-11-16T11:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是一道简单的输入输出问题，把输入当做十六进制，计算和并按照十进制输出即可。</p>
<p>&emsp;&emsp;以下是C和C++两种做法：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%x%x"</span>,&amp;a,&amp;b)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> a,b;  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;hex&gt;&gt;a&gt;&gt;b)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是一道简单的输入输出问题，把输入当做十六进制，计算和并按照十进制输出即可。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以下是C和C++两种做法：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM Steps</title>
    <link href="http://www.z16388.win/2016/11/16/Steps/"/>
    <id>http://www.z16388.win/2016/11/16/Steps/</id>
    <published>2016-11-16T11:06:30.000Z</published>
    <updated>2016-11-17T06:24:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;hdu里的题目，题目量大，种类多，很多人用，同时也不方便找对应难度的试题。只知道水题都在11页，那么其他的题目都该怎么刷呢。</p>
<p>&emsp;&emsp;其实hdu有一个比较隐蔽的功能叫做ACM Steps，按照难度将题目随机分配出来的，难度相近，全部做完才能进入下一关，比较适合练习。</p>
<p>链接：<a href="http://acm.hdu.edu.cn/game" target="_blank" rel="external">http://acm.hdu.edu.cn/game</a>(需要登录)</p>
<p>第一章：</p>
<ul>
<li>A+B</li>
<li>输入输出，快速幂，排序，ascii问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;hdu里的题目，题目量大，种类多，很多人用，同时也不方便找对应难度的试题。只知道水题都在11页，那么其他的题目都该怎么刷呢。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;其实hdu有一个比较隐蔽的功能叫做ACM Steps，按照难度将题目随机分配出来的，难
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.6数据结构基础（2）树、二叉树和图</title>
    <link href="http://www.z16388.win/2016/11/16/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%9B%BE/"/>
    <id>http://www.z16388.win/2016/11/16/【ACM教程】3-6数据结构基础（2）树、二叉树和图/</id>
    <published>2016-11-16T06:49:28.000Z</published>
    <updated>2017-01-18T03:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六节-数据结构基础（2）树、二叉树和图"><a href="#第六节-数据结构基础（2）树、二叉树和图" class="headerlink" title="第六节 数据结构基础（2）树、二叉树和图"></a>第六节 数据结构基础（2）树、二叉树和图</h1><p>&emsp;&emsp;我们之前讲了数据结构中的几个线性结构，链表、栈还有队列。那么如果想要一个能表示多个元素之间关系的数据结构，就要使用我们的树形结构和图了。在ACM和蓝桥杯的比赛中，有关树和图的题目是百分百出现的。</p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>&emsp;&emsp;树形结构是一类非常重要的非线性数据结构，其中以树和二叉树最为常用。树结构在客观世界中广泛存在，比如我们日常生活中常见的组织结构图：<br><img src="http://www.wxtgcl.com/images/organization.jpg" alt=""></p>
<p>&emsp;&emsp;树是n个结点的有限集合，在任意一棵非空的树中：</p>
<ul>
<li>有且仅有一个特定的，称为根（Root）的结点</li>
<li>当n&gt;1时，其余结点可分别为m（m&gt;0）个互不相交的有限集合T1,T2,…,Tm，其中每一个集合本身又是一棵树，并且称为根的子树</li>
</ul>
<p>&emsp;&emsp;以上就是一棵树的定义。</p>
<p>&emsp;&emsp;结点的子树称为它的“孩子”，相应地，该节点称为“双亲”。同一个双亲的孩子称为“兄弟”。孩子的数量称为“度”。</p>
<p>&emsp;&emsp;规定根为第一层，它的孩子为第二层，以此类推。树中最大的层数称为树的深度或高度。</p>
<p>&emsp;&emsp;森林：m（m&gt;0）课互不相交的树的集合。</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="emsp-emsp-二叉树的定义和性质"><a href="#emsp-emsp-二叉树的定义和性质" class="headerlink" title="&emsp;&emsp;二叉树的定义和性质"></a>&emsp;&emsp;二叉树的定义和性质</h3><p>&emsp;&emsp;在讨论一般树的存储结构及操作之前，我们首先研究一种名为二叉树的抽象数据结构类型。</p>
<p>&emsp;&emsp;二叉树是另一种树形结构，它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点）。并且，二叉树的子树左右之分，其次序不能任意颠倒。</p>
<p><img src="http://7xospc.com1.z0.glb.clouddn.com/6-5-5.jpg" alt=""></p>
<p>&emsp;&emsp;下面是二叉树的一些性质：</p>
<ul>
<li>在二叉树的第i层上至多有2^(i-1)个结点（i&gt;=1）；可以使用数学归纳法来证明</li>
<li>深度为k的二叉树至多有2^k-1个结点（k&gt;=1）；由第一个性质推导</li>
<li>对任何一棵二叉树T，若其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。</li>
<li>…</li>
</ul>
<h3 id="emsp-emsp-二叉树的存储结构"><a href="#emsp-emsp-二叉树的存储结构" class="headerlink" title="&emsp;&emsp;二叉树的存储结构"></a>&emsp;&emsp;二叉树的存储结构</h3><p>&emsp;&emsp;二叉树的概念和性质不是我们研究的主要问题，我们来看一下二叉树的存储结构。二叉树可以使用顺序存储结构和链式存储结构，这里我们先讲一下顺序存储结构。</p>
<p>&emsp;&emsp;我们规定，用一组地址连续的存储单元，自上而下、自左至右存储完全二叉树上的结点元素，即将完全二叉树上编号为i的结点元素存放在一维数组下表为i（i-1）的分量中。对于一般的二叉树，则应该将其每个节点与完全二叉树相对照，存放在一维数组中。其中0表示不存在此结点。（想想我们之前讲过的memset函数）</p>
<p>&emsp;&emsp;链式存储可以使用拥有两个指针域或者三个指针域的链表来表示，这里要看我们对这个二叉树的操作需求。如果需要返回访问根节点，则需要三个指针域。结合下面的内容，理解一下。</p>
<blockquote>
<p>&emsp;&emsp;lchild&emsp;&emsp;data&emsp;&emsp;rchild<br>&emsp;&emsp;lchild&emsp;&emsp;data&emsp;&emsp;parent&emsp;&emsp;rchild</p>
</blockquote>
<h3 id="emsp-emsp-二叉树的遍历和线索二叉树"><a href="#emsp-emsp-二叉树的遍历和线索二叉树" class="headerlink" title="&emsp;&emsp;二叉树的遍历和线索二叉树"></a>&emsp;&emsp;二叉树的遍历和线索二叉树</h3><p>&emsp;&emsp;在二叉树的一些应用中，我们常常要求在树种查找具有某种特征的结点，或者对树中全部结点做统一处理，我们就要对二叉树进行遍历。遍历就是按照某条搜索路径巡访树中的每个节点，就比如我们要输出的时候。对于一个线性结构，比如说数组，我们进行遍历就很方便，但是二叉树就比较复杂了。下面我们介绍三种操作方法：</p>
<p>先序遍历：</p>
<ul>
<li>访问根节点</li>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
</ul>
<p>中序遍历：</p>
<ul>
<li>中序遍历左子树</li>
<li>访问根节点</li>
<li>中序遍历右子树</li>
</ul>
<p>后序遍历：</p>
<ul>
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根节点</li>
</ul>
<p>&emsp;&emsp;我们知道，二叉树的遍历是以一定的规则将其排列成一个线性结构，但是当以二叉链表作为存储结构时，我们只能找到结点的左右孩子信息，而不能找到结点在任一序列中的前驱和后继。这种信息只有在动态的过程中才能够得到。那么想要保存的话，我们需要在每个节点上再加两个指针域用来存放结点的前驱和后继的信息。</p>
<blockquote>
<p>&emsp;&emsp;lchild&emsp;&emsp;LTag&emsp;&emsp;data&emsp;&emsp;RTag&emsp;&emsp;rchild</p>
</blockquote>
<p>&emsp;&emsp;以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索二叉链表，对某种次序遍历使其变成线索二叉树的过程叫做线索化。</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="emsp-emsp-图的定义"><a href="#emsp-emsp-图的定义" class="headerlink" title="&emsp;&emsp;图的定义"></a>&emsp;&emsp;图的定义</h3><p>&emsp;&emsp;图是较线性表和树更为复杂的数据结构。在图结构中，结点之间的关系是任意的——图中任意两个元素都有可能相关。图中的数据元素称为定点（Vertex），VR是表示两个点之间的关系的集合,<v,w>是VR中的元素，表示的是从v到w的的一条弧（Arc）。v为初始点（弧尾），w为终端点（弧头），此时的图称为有向图。如果对任意的<v,w>都有<w,v>，则用无序队（v,w）来代替这个有序对，表示v和w之间的一条边，此时的图为无向图。</w,v></v,w></v,w></p>
<p><img src="http://img.my.csdn.net/uploads/201212/27/1356610270_4985.png" alt=""></p>
<p>&emsp;&emsp;有关图的问题还有很多，在数学上，我们专门有一门研究图的学科，叫做图论，这也将是接下来我们的研究对象。在今后的学习中，我们可能会接触到以下内容：</p>
<h3 id="emsp-emsp-图的存储方法"><a href="#emsp-emsp-图的存储方法" class="headerlink" title="&emsp;&emsp;图的存储方法"></a>&emsp;&emsp;图的存储方法</h3><h3 id="emsp-emsp-图的遍历"><a href="#emsp-emsp-图的遍历" class="headerlink" title="&emsp;&emsp;图的遍历"></a>&emsp;&emsp;图的遍历</h3><h4 id="emsp-emsp-emsp-emsp-深度优先搜索（dfs）"><a href="#emsp-emsp-emsp-emsp-深度优先搜索（dfs）" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;深度优先搜索（dfs）"></a>&emsp;&emsp;&emsp;&emsp;深度优先搜索（dfs）</h4><h4 id="emsp-emsp-emsp-emsp-广度优先搜索（bfs）"><a href="#emsp-emsp-emsp-emsp-广度优先搜索（bfs）" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;广度优先搜索（bfs）"></a>&emsp;&emsp;&emsp;&emsp;广度优先搜索（bfs）</h4><h3 id="emsp-emsp-图的连通性"><a href="#emsp-emsp-图的连通性" class="headerlink" title="&emsp;&emsp;图的连通性"></a>&emsp;&emsp;图的连通性</h3><p>&emsp;&emsp;克鲁斯卡尔算法</p>
<h3 id="emsp-emsp-最短路径"><a href="#emsp-emsp-最短路径" class="headerlink" title="&emsp;&emsp;最短路径"></a>&emsp;&emsp;最短路径</h3><h4 id="emsp-emsp-emsp-emsp-单源最短路径"><a href="#emsp-emsp-emsp-emsp-单源最短路径" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;单源最短路径"></a>&emsp;&emsp;&emsp;&emsp;单源最短路径</h4><p>&emsp;&emsp;迪杰斯特拉算法</p>
<h4 id="emsp-emsp-emsp-emsp-多源最短路径"><a href="#emsp-emsp-emsp-emsp-多源最短路径" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;多源最短路径"></a>&emsp;&emsp;&emsp;&emsp;多源最短路径</h4><p>&emsp;&emsp;普里姆算法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六节-数据结构基础（2）树、二叉树和图&quot;&gt;&lt;a href=&quot;#第六节-数据结构基础（2）树、二叉树和图&quot; class=&quot;headerlink&quot; title=&quot;第六节 数据结构基础（2）树、二叉树和图&quot;&gt;&lt;/a&gt;第六节 数据结构基础（2）树、二叉树和图&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.5常用C++容器vector,set和map</title>
    <link href="http://www.z16388.win/2016/11/13/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-5%E5%B8%B8%E7%94%A8C++%E5%AE%B9%E5%99%A8vector,set%E5%92%8Cmap/"/>
    <id>http://www.z16388.win/2016/11/13/【ACM教程】3-5常用C++容器vector,set和map/</id>
    <published>2016-11-13T11:44:37.000Z</published>
    <updated>2016-11-14T11:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五节-常用C-容器vector，set和map"><a href="#第五节-常用C-容器vector，set和map" class="headerlink" title="第五节 常用C++容器vector，set和map"></a>第五节 常用C++容器vector，set和map</h1><p>&emsp;&emsp;上一节我们介绍了一些简单的数据结构，大家只要理解概念就可以了，为下面的概念和模型打下基础。这一节，我们讲一讲C++中一些常用的容器。就像之前的list，stack一样，能给我们写程序带来很大的帮助。</p>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>&emsp;&emsp;动态数组（vector）是比较常用的容器之一，它的用法和数组类似，但是大小不确定。在我们对它的值进行更改的时候，它的大小也会变化。它的声明方法和数组类似：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;push_back()可以在结尾添加元素：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line">v.push_back(<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;vector可以和数组一样通过下标来访问。下标也是从0开始的：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">"%d %d %d\n"</span>,v[<span class="number">0</span>],v[<span class="number">1</span>],v[<span class="number">2</span>]);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>v.begin()</code>和<code>v.end()</code>返回的是两个指针，分别指向vector的第一个元素和最后一个元素。</p>
<p>&emsp;&emsp;和我们之前讲过的list一样，vector也可以使用迭代器：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">    <span class="keyword">for</span>(it=v.begin();it!=v.end();it++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,*it);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们来做一道练习题吧，<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2561" target="_blank" rel="external">hdu2561</a>，思路很简单，我们用vector来存放数据，sort()排序之后输出。在输出完一组数据之后，我们应该使用clear()来清空容器。AC代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> c,n,t;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c);</div><div class="line">    <span class="keyword">while</span>(c--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">while</span>(n--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">            v.push_back(t);</div><div class="line">        &#125;</div><div class="line">        sort(v.begin(),v.end());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,v[<span class="number">1</span>]);</div><div class="line">        v.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，还有一些常用的函数：</p>
<blockquote>
<p>front()  back()   返回首尾元素的引用。<br>empty() 是否为空<br>size() 元素的个数<br>pop_back() 删除容器中最后一个元素<br>clear() 删除所有元素<br>erase(iterator it) 删除迭代器指向的的元素</p>
</blockquote>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>&emsp;&emsp;set被称为集合类，存放的元素会按照大小自动排序，但是不能有重复的元素。如果想要存放重复的元素，应该使用multiset。</p>
<p>&emsp;&emsp;声明、初始化和迭代器等：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; set01;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">    set01.insert(<span class="number">3</span>);</div><div class="line">    set01.insert(<span class="number">1</span>);</div><div class="line">    set01.insert(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span>(it01=<span class="built_in">set</span>.begin();it!=<span class="built_in">set</span>.end();it++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,*it);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;正如它的名字，在处理集合之类的问题的时候我们可以使用。可以看这道题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1412" target="_blank" rel="external">hdu1412</a>。同一个set存储连个数据，不仅实现了相同元素的排除还排好了序。在输出一组结果之后，应该使用clear()来清空容器。下面是AC代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,n,m,t;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n+m;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">            st.insert(t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(it=st.begin();it!=st.end();)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,*it);</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,(++it)==st.end()?<span class="string">'\n'</span>:<span class="string">' '</span>);</div><div class="line">        &#125;</div><div class="line">        st.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>empty() 是否为空<br>size() 元素的个数<br>erase(iterator it) 删除迭代器指向的的元素</p>
</blockquote>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>&emsp;&emsp;map称为映射，元素成对出现。<key,value>，前面的称为关键字，后面是关键字对应的值。映射中的元素会按照key的大小自动排序。map是单映射，key和value是一对一的关系。如果想要实现多映射就要使用multimap。</key,value></p>
<p>&emsp;&emsp;声明、初始化</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt; map01;</div><div class="line">    pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;p1(<span class="number">1</span>,<span class="string">"这是1"</span>);</div><div class="line">    pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;p2(<span class="number">2</span>,<span class="string">"这是2"</span>);</div><div class="line">    pair&lt;<span class="keyword">int</span>,<span class="built_in">string</span>&gt;p3(<span class="number">3</span>,<span class="string">"这是3"</span>);</div><div class="line">    map01.insert(p1);</div><div class="line">    map01.insert(p2);</div><div class="line">    map01.insert(p3);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，我们还可以使用赋值的方法来进行初始化，但是仅限于单映射。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">map01[<span class="number">5</span>]=<span class="number">25</span>;</div><div class="line">map01[<span class="number">3</span>]=<span class="number">9</span>;</div><div class="line">map01[<span class="number">4</span>]=<span class="number">16</span>;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>begin()</code>和<code>end()</code>返回的是两个指针，分别指向map的第一个元素和最后一个元素。如果需要访问映射中的元素，需要使用迭代器：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; map01;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it01;</div><div class="line">    map01[<span class="number">5</span>]=<span class="number">25</span>;</div><div class="line">    map01[<span class="number">3</span>]=<span class="number">9</span>;</div><div class="line">    map01[<span class="number">3</span>]=<span class="number">10</span>;</div><div class="line">    <span class="keyword">for</span>(it01=map01.begin();it01!=map01.end();it01++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Key:%d Value:%d\n"</span>,(*it01).first(*it01).second);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;下面做一道练习题：(hdu2550)[<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2550" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2550</a>]</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</div><div class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</div><div class="line">    <span class="keyword">int</span> t,n,key,value,i,j;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        <span class="keyword">while</span>(n--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;key,&amp;value);</div><div class="line">            mp[key]=value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(it=mp.begin();it!=mp.end();it++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(*it).second;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"&gt;+"</span>);</div><div class="line">                <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;(*it).first<span class="number">-2</span>;j++)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"+&gt;\n"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        mp.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五节-常用C-容器vector，set和map&quot;&gt;&lt;a href=&quot;#第五节-常用C-容器vector，set和map&quot; class=&quot;headerlink&quot; title=&quot;第五节 常用C++容器vector，set和map&quot;&gt;&lt;/a&gt;第五节 常用C++容器ve
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.4数据结构基础（1）栈、队列和链表</title>
    <link href="http://www.z16388.win/2016/11/11/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.z16388.win/2016/11/11/【ACM教程】3-4数据结构基础（1）栈、队列和链表/</id>
    <published>2016-11-11T08:43:29.000Z</published>
    <updated>2016-11-13T11:31:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四节-数据结构基础（1）栈，队列和链表"><a href="#第四节-数据结构基础（1）栈，队列和链表" class="headerlink" title="第四节 数据结构基础（1）栈，队列和链表"></a>第四节 数据结构基础（1）栈，队列和链表</h1><p>&emsp;&emsp;接下来的章节会介绍简单的数据结构，包括线性表（栈、队列、链表等）、二叉树和图。这些这些内容可能在我们今后要学习的算法中经常出现，都是需要去掌握的概念和内容。如果数据结构的基础没有打好，那么我们就很难设计出准确、高效的算法。</p>
<p>&emsp;&emsp;这一节我们要介绍三个基础的概念，栈、队列和链表。他们是最简单、最基础，同时也是最常用的数据结构。他们同属于线性表：n（n&gt;=0）个具有相同属性（数据类型一致）的数据元素的有限序列。我们之前学习过的数组，就是经常用来记录线性表的一种常用工具。</p>
<h2 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h2><p>&emsp;&emsp;栈是一种运算受到限制的线性表，它的插入和删除操作都只能在同一端进行。如果非要在生活中举个例子的话，那么栈的话，就像是一桶薯片。无论是拿出一片还是放进去一片，都只能从一个口里进行。这个口我们称之为栈顶（Top）。这样的规定会让先进去的元素后出来，我们称之为先进后出。（FILO）</p>
<p>&emsp;&emsp;向栈顶插入新元素成为入栈，反之为出栈。栈的存储结构的C语言表述为：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a[N];</div><div class="line">	<span class="keyword">int</span> top;</div><div class="line">&#125;SeqStack;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;栈为空时，我们将Top赋值-1；非空时，我们将可以使用下标0以上的元素。类似的表述方式我们在之前讲过的二分法中提到过。当存入一个元素或取出一个元素时，我们对结构体中的<code>top</code>进行相应的自增和自检，记录当前栈顶的位置。</p>
<p>&emsp;&emsp;我们在处理先进后出的问题时，推荐使用栈。比如，我们在进行进制换算时，将十进制转为八进制需要进行多次相除求余数。算出来的数越早，它的位置就越低。比如：十进制数字1835转化为八进制需要除以四次才能将商变为0，得到的余数分别为3 5 4 3，转化为十进制就是3453。所以对于这种问题来说，使用栈来存储计算结果是再好不过的了，我们不需要对存入的数据进行反转再输出。</p>
<p>&emsp;&emsp;令人可喜的是，在C++的STL中给我们提供了栈这种容器，我们在使用的时候不需要再用语言来构造出来这种结构以及对这种结构的操作函数了。以后介绍的数据结构中，我们也会提到相应的STL。</p>
<blockquote>
<p>头文件： #include “stack”<br>声明方法：stack&lt;类型&gt; s;<br>成员函数：<br>&emsp;&emsp;&emsp;&emsp;s.push(x)&emsp;&emsp;无返回值，将元素x压栈<br>&emsp;&emsp;&emsp;&emsp;s.pop();&emsp;&emsp;退栈，无返回值<br>&emsp;&emsp;&emsp;&emsp;s.top();&emsp;&emsp;取栈顶元素，返回栈顶元素<br>&emsp;&emsp;&emsp;&emsp;s.empty();&emsp;&emsp;判断栈是否为空，如果是空，返回1，否则返回0<br>&emsp;&emsp;&emsp;&emsp;s.size();&emsp;&emsp;返回栈中元素的个数</p>
</blockquote>
<p>&emsp;&emsp;大家可以思考一下怎么把栈里所有的元素打印出来，也可以试着做一下上面的进制转换问题。</p>
<h2 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h2><p>&emsp;&emsp;刚刚我们提到的栈，是一种先进后出的线性表，那么这里的队列也是线性表的一种，不过是先进先出（FIFO）型的。我想这个名字应该比较形象，就像我们在超市排队付款一样，先到的先来。我们把允许插入的一端称为队尾（Rear），允许删除的一端称为队头（Front），没有元素的队列称为空队列。元素的插入和删除分别称为入队和出队。</p>
<p>&emsp;&emsp;为了便于理解，我们来看一下队列的的存储结构吧。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> a[N];</div><div class="line">	<span class="keyword">int</span> rear,front;</div><div class="line">&#125;SeQueue;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们看，它的结构和栈类似，但是在结构中比栈多了一个用来表示不同出口的“指针”。在空队列时，两个“指针”的初值都为-1。当有入队操作时，我们的队尾（rear）就要进行自增；有出队操作时，队头（front）自增。（思考一下为什么会这样）</p>
<p>&emsp;&emsp;经过这样的操作，我们的队列可能会浪费很多的存储空间，所以在常用的队列存储方式中，我们经常使用首尾相连的数据结构，这就变成了一个“循环队列”。当然，我们的STL为我们已经做好了一切，我们只要用就好了。</p>
<blockquote>
<p>头文件：#include “queue”<br>声明方式：queue<type> Q;<br>常用成员函数：<br>&emsp;&emsp;&emsp;&emsp;Q.push()&emsp;&emsp;入队<br>&emsp;&emsp;&emsp;&emsp;Q.size()&emsp;&emsp;返回队列中元素的个数<br>&emsp;&emsp;&emsp;&emsp;Q.front()&emsp;&emsp;显示队头元素<br>&emsp;&emsp;&emsp;&emsp;Q.back()&emsp;&emsp;显示最后一个元素<br>&emsp;&emsp;&emsp;&emsp;Q.pop()&emsp;&emsp;出队<br>&emsp;&emsp;&emsp;&emsp;Q.empty()&emsp;&emsp;判断队列是否为空，如果是空，返回1，否则返回0</type></p>
</blockquote>
<h2 id="链表（List）"><a href="#链表（List）" class="headerlink" title="链表（List）"></a>链表（List）</h2><p>&emsp;&emsp;用数组存储的元素具有空间上的连续性。那么如果我们需要一个逻辑上联系很紧密的结构，比如说树或者是图的话，就有可能要使用链表了。这里只是简单介绍一下链表的概念和基本类型，在后面我们会具体研究这种重要的数据结构。</p>
<p>&emsp;&emsp;首先我们来看一个链表节点的存储结构：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Node <span class="comment">//结点类型定义</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> data;</div><div class="line">	<span class="keyword">struct</span> Node *next;</div><div class="line">&#125;LinkList;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们看，在定义链表节点的时候，我们使用了一个类似于递归的方法，不过我们发现，它存放的是下一个结点的指针。我们来看一下简单的单链表的结构吧。</p>
<p>结点结构：</p>
<p>┌───┬───┐</p>
<p>│data&emsp;│next&emsp;│</p>
<p>└───┴───┘</p>
<p>链表结构：</p>
<p><img src="http://home.eeworld.com.cn/data/attachment/album/201510/13/162122xw75zq229z46745c.png" alt=""></p>
<p>&emsp;&emsp;除了单链表，还有我们刚刚提到过的队列要用到的循环链表以及双链表、静态链表等。下一节我们将对链表进行专门的研究。比起线性表，除了链表的结构关系比较强之外，还能提高存储空间的利用率。链表的存储密度小、存储内存随机。但是在查找的时候，链表必须按照顺序。所以我们应该根据需求来选择相应的数据结构。</p>
<p>&emsp;&emsp;理解了链表的结构之后，我们并不需要像在上数据结构课的时候那样搞得那么清楚，同样，会使用STL中的链表就可以了。</p>
<blockquote>
<p>头文件：#include “list”<br>声明方式：<br>&emsp;&emsp;&emsp;&emsp;list<int> l; //空链表<br>&emsp;&emsp;&emsp;&emsp;list<int> l(3); //长度为3的链表<br>&emsp;&emsp;&emsp;&emsp;list<int> l2(3,4); //有两个确定元素的链表</int></int></int></p>
<p>常用成员函数：<br>push_front/pop_front和push_back/pop_back<br>在开头和结尾插入或删除元素</p>
<p>begin() 返回指向第一个元素的迭代器<br>end() 返回末尾的迭代器<br>sort() 对链表中的数据进行排序</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span>   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>   </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;   </div><div class="line">  </div><div class="line"><span class="comment">//创建一个list容器的实例LISTINT   </span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; LISTINT;   </div><div class="line"><span class="comment">//创建一个list容器的实例LISTCHAR   </span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; LISTCHAR;   </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>   </span></div><div class="line">&#123;   </div><div class="line">    <span class="comment">//用list容器处理整型数据    </span></div><div class="line">    <span class="comment">//用LISTINT创建一个名为listOne的list对象   </span></div><div class="line">    LISTINT listOne;   </div><div class="line">    <span class="comment">//声明i为迭代器   </span></div><div class="line">    LISTINT::iterator i;   </div><div class="line">      </div><div class="line">    <span class="comment">//从前面向listOne容器中添加数据   </span></div><div class="line">    listOne.push_front (<span class="number">2</span>);   </div><div class="line">    listOne.push_front (<span class="number">1</span>);   </div><div class="line">      </div><div class="line">    <span class="comment">//从后面向listOne容器中添加数据   </span></div><div class="line">    listOne.push_back (<span class="number">3</span>);   </div><div class="line">    listOne.push_back (<span class="number">4</span>);   </div><div class="line">      </div><div class="line">    <span class="comment">//从前向后显示listOne中的数据   </span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"listOne.begin()--- listOne.end():"</span>&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">    <span class="keyword">for</span> (i = listOne.begin(); i != listOne.end(); ++i)   </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">" "</span>;   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;   </div><div class="line">      </div><div class="line">    <span class="comment">//从后向后显示listOne中的数据   </span></div><div class="line">    LISTINT::reverse_iterator ir;   </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"listOne.rbegin()---listOne.rend():"</span>&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">    <span class="keyword">for</span> (ir =listOne.rbegin(); ir!=listOne.rend();ir++) &#123;   </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; *ir &lt;&lt; <span class="string">" "</span>;   </div><div class="line">    &#125;   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;   </div><div class="line">      </div><div class="line">    <span class="comment">//使用STL的accumulate(累加)算法   </span></div><div class="line">    <span class="keyword">int</span> result = accumulate(listOne.begin(), listOne.end(),<span class="number">0</span>);   </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Sum="</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"------------------"</span>&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">      </div><div class="line">    <span class="comment">//--------------------------   </span></div><div class="line">    <span class="comment">//用list容器处理字符型数据   </span></div><div class="line">    <span class="comment">//--------------------------   </span></div><div class="line">      </div><div class="line">    <span class="comment">//用LISTCHAR创建一个名为listOne的list对象   </span></div><div class="line">    LISTCHAR listTwo;   </div><div class="line">    <span class="comment">//声明i为迭代器   </span></div><div class="line">    LISTCHAR::iterator j;   </div><div class="line">      </div><div class="line">    <span class="comment">//从前面向listTwo容器中添加数据   </span></div><div class="line">    listTwo.push_front (<span class="string">'A'</span>);   </div><div class="line">    listTwo.push_front (<span class="string">'B'</span>);   </div><div class="line">      </div><div class="line">    <span class="comment">//从后面向listTwo容器中添加数据   </span></div><div class="line">    listTwo.push_back (<span class="string">'x'</span>);   </div><div class="line">    listTwo.push_back (<span class="string">'y'</span>);   </div><div class="line">      </div><div class="line">    <span class="comment">//从前向后显示listTwo中的数据   </span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"listTwo.begin()---listTwo.end():"</span>&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">    <span class="keyword">for</span> (j = listTwo.begin(); j != listTwo.end(); ++j)   </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(*j) &lt;&lt; <span class="string">" "</span>;   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;   </div><div class="line">      </div><div class="line">    <span class="comment">//使用STL的max_element算法求listTwo中的最大元素并显示   </span></div><div class="line">    j=max_element(listTwo.begin(),listTwo.end());   </div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The maximum element in listTwo is: "</span>&lt;&lt;<span class="keyword">char</span>(*j)&lt;&lt;<span class="built_in">endl</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第四节-数据结构基础（1）栈，队列和链表&quot;&gt;&lt;a href=&quot;#第四节-数据结构基础（1）栈，队列和链表&quot; class=&quot;headerlink&quot; title=&quot;第四节 数据结构基础（1）栈，队列和链表&quot;&gt;&lt;/a&gt;第四节 数据结构基础（1）栈，队列和链表&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.3二分查找</title>
    <link href="http://www.z16388.win/2016/11/09/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-3%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://www.z16388.win/2016/11/09/【ACM教程】3-3二分查找/</id>
    <published>2016-11-09T08:40:36.000Z</published>
    <updated>2016-11-09T09:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三节-二分查找"><a href="#第三节-二分查找" class="headerlink" title="第三节 二分查找"></a>第三节 二分查找</h1><p>&emsp;&emsp;这次我们要学习的，就是著名的高效的，并且应用非常广泛的二分查找算法，简称二分法（Binary Search）。二分查找的时间复杂度为O(lgn)，是优化程序的常用方法之一。在我们使用的java教科书中，经常会见到作者举的一个例子——猜数字。这个程序就是让你去猜测一个给定范围内的数字，当然，我们可以暴力一点，把所有可能的结果都掏出来试一试——枚举。但是真正在写程序的时候，这样效率可能会非常低，这个时候我们就需要使用二分法来去做这个游戏。</p>
<p>&emsp;&emsp;我们可以这样去做：选择这个区间中间的数，大了，就把它当做新的区间的起点，继续做；小了就往左去找区间，以此类推，这就是我们在数学上学习过的二分法，那么，怎么能够在程序中实现呢？代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bSearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> mid;</div><div class="line">	<span class="keyword">if</span>(low&gt;high) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	mid=(low+high)/<span class="number">2</span>;</div><div class="line">	<span class="keyword">if</span>(b==a[mid]) <span class="keyword">return</span> mid;</div><div class="line">	<span class="keyword">if</span>(b&lt;a[mid]) <span class="keyword">return</span> bSearch(a,b,low,mid<span class="number">-1</span>);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> bSearch(a,b,mid+<span class="number">1</span>,high);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们看代码中的函数使用了四个参数，其中需要注意的是，第一个参数不仅仅是一个普通的数组，而是一个经过排序的序列，所以应该对需要查找的数组进行排序再进行二分查找。需要注意的是，我们应当注意对相同数据的处理，就是说如果我们的序列中会出现相同的数据，它应当返回哪一个下标。</p>
<p>&emsp;&emsp;这个函数的功能是查找一个数在数组中是否存在，如果存在返回它的下标；如果不存在，则返回-1。在C++的STL中，给我们提供了类似的函数<code>binary_search()</code>，它的功能是判断一个数是否在给定序列中存在，返回值类型为布尔型。它的三个参数分别为：</p>
<blockquote>
<p>binary_search(起始地址，终止地址，查找值);</p>
</blockquote>
<p>&emsp;&emsp;遗憾的是，上面的函数只能告诉我们这个值是否存在，并不能知道它的确切位置，这个时候，我们可以使用这两个函数：<code>lower_bound()</code>和<code>upper_bound()</code>。这两个函数是用来算出要查元素的上界和下界的，意思是说，对于序列中出现相同的元素的情况，这两个函数是可以解决的。但是，需要注意的是：</p>
<blockquote>
<p>返回值的类型是地址,不是下标；<br>如果元素出现一次，<code>lower_bounder()</code>返回这个元素的地址，<code>upper_bounder()</code>返回它后面一个元素的地址；<br>如果元素出现多次，<code>lower_bounder()</code>返回第一个元素的地址，<code>upper_bounder()</code>返回最后一个元素的后面一的元素的地址。</p>
</blockquote>
<p>&emsp;&emsp;返回值是地址怎么办，我们也可以想办法投机取巧。我们知道，一个数组的名同时是一个数组第一个元素的地址，那么拿得到的地址减去首地址，就刚好是这个元素在数组中的下标了：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lower_bounder(a,a+<span class="number">100</span>,shu)-a</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，二分法还有非递归的写法，大家可以了解一下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bSearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> b,<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> low,high,mid;</div><div class="line">	low=<span class="number">0</span>;high=n<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span>(low&lt;=high) &#123;</div><div class="line">		mid=(low+high)/<span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span>(a[mid]==b) <span class="keyword">return</span> mid;</div><div class="line">		<span class="keyword">if</span>(a[mid]&lt;b) low=mid+<span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> high=mid<span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三节-二分查找&quot;&gt;&lt;a href=&quot;#第三节-二分查找&quot; class=&quot;headerlink&quot; title=&quot;第三节 二分查找&quot;&gt;&lt;/a&gt;第三节 二分查找&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这次我们要学习的，就是著名的高效的，并且应用非常广泛的二分查找算法，
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>R语言二三事</title>
    <link href="http://www.z16388.win/2016/11/04/R%E8%AF%AD%E8%A8%80%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://www.z16388.win/2016/11/04/R语言二三事/</id>
    <published>2016-11-04T09:18:34.000Z</published>
    <updated>2016-11-04T09:44:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;上午上完第一节课之后，想要到图书馆寻找几本算法相关的书籍未果，偶然发现了两本不错的书。一本是《Python语言程序设计》，另一本就是《R语言初学指南》了。</p>
<p>&emsp;&emsp;早些时候我就有关注过R了，听说是一个最近很火的数据分析语言，具有强大的数据分析功能，在各领域都有所使用。这也算是第一次接触，还没回到寝室就迫不及待地打开翻了两页，顿时整个人都不好了——我看到了一堆讨厌极了的矩阵。。。</p>
<p>&emsp;&emsp;回到寝室，从序开始看，发现这是一本很浅显的书，内容的话还涉及一些行业上的实例，比如说在第三节就有一个金融数学上的例子，刚好我们才学过的一些东西都用上了。</p>
<p>&emsp;&emsp;下载好，给win和mac都安装好，摸索使用了一下，发现这真是一个非常好的数学工具。比起MATLAB臃肿的安装包，R的基础包只有不到100mb，而且足够初学者的使用，这一点我非常欣赏。虽然UI不是很理想，但是功能强大不就好了吗。</p>
<p>&emsp;&emsp;基本的语法和Python有着一定的相似之处，使用起来和MATLAB也很类似。总之，希望能够学下去吧。下面总结一下今天学到的R常用的基础语法：</p>
<hr>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="number">5</span>+<span class="number">7</span></div><div class="line">[<span class="number">1</span>] <span class="number">12</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;和Python类似，可以直接实现两个数的运算。常用的运算除了加减乘除之外，还有乘方，例：<code>e^2</code></p>
<hr>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; sally=<span class="number">5</span>+<span class="number">7</span></div><div class="line">&gt; ralph=<span class="number">4</span>-<span class="number">2</span></div><div class="line">&gt; sally-ralph</div><div class="line">[<span class="number">1</span>] <span class="number">10</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;可以将数据存放在变量中进行运算。</p>
<hr>
<p>&emsp;&emsp;赋值有两种方法，较老的版本使用箭头来进行赋值，现在和其他语言类似，都可以使用一个等号表示赋值，这两种方法是等价的：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; a=a+<span class="number">1</span></div><div class="line">&gt; a&lt;-a+<span class="number">1</span></div></pre></td></tr></table></figure>
<hr>
<p>向量：</p>
<p>&emsp;&emsp;向量是数学中一个相当常用的概念，在R里当然是必不可少的。我们可以通过下面的方法来创建一个向量：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; x=c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;向量可以进行加减乘除乘方等运算。除此之外，还有一种特殊的向量，用来表示一个连续的序列，例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; j=<span class="number">0</span>:<span class="number">5</span></div><div class="line">&gt; j</div><div class="line">[<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;冒号申请的连续序列可能在后面的过程中经常使用，比如在绘图时，可能需要很多的坐标，这时候使用这种向量会极大地方便我们的绘图工作。</p>
<hr>
<p>学习ing</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;上午上完第一节课之后，想要到图书馆寻找几本算法相关的书籍未果，偶然发现了两本不错的书。一本是《Python语言程序设计》，另一本就是《R语言初学指南》了。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;早些时候我就有关注过R了，听说是一个最近很火的数据分析语
    
    </summary>
    
    
      <category term="R" scheme="http://www.z16388.win/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3-1枚举</title>
    <link href="http://www.z16388.win/2016/11/02/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-1%E6%9E%9A%E4%B8%BE/"/>
    <id>http://www.z16388.win/2016/11/02/【ACM教程】3-1枚举/</id>
    <published>2016-11-02T07:55:31.000Z</published>
    <updated>2016-11-02T08:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一节-枚举"><a href="#第一节-枚举" class="headerlink" title="第一节 枚举"></a>第一节 枚举</h1><p>&emsp;&emsp;枚举又叫穷举，是程序设计中最常用的算法之一，是一种很*很暴力的算法。要说它的方法，就是没有方法——通过将所有可能的结果一一列举出来进行判断，获得想要的结果的方法。枚举算法的特点就是比较单纯，容易写出来程序，但是速度非常慢，只能用来解决小规模的问题。</p>
<p>&emsp;&emsp;常见的题型有很多，比如计算空缺算式或者是火柴棒问题，接下来我们来举例说明一道非常经典的题目，来体会一下枚举算法。</p>
<p>&emsp;&emsp;我国古代数学家章丘建在《算经》一书中提过一道数学问题：鸡翁一值钱五，鸡母一值钱散，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何。这就是经典的百钱百鸡问题。除了原书中使用的方程式之外，我们还可以使用枚举法来进行计算，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,j,k;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">33</span>;j++)</div><div class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">100</span>;k++)</div><div class="line">    <span class="keyword">if</span>((i*<span class="number">5</span>+j*<span class="number">3</span>+k/<span class="number">3</span>==<span class="number">100</span>)&amp;&amp;(i+j+k==<span class="number">100</span>)&amp;&amp;(k%<span class="number">3</span>==<span class="number">0</span>))</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,i,j,k);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在之前杭电的练习题中，我们也遇到过使用枚举算法的题目，hdu2010题的水仙花数就是。大家可以练习一下全排列的问题，练习一下枚举算法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一节-枚举&quot;&gt;&lt;a href=&quot;#第一节-枚举&quot; class=&quot;headerlink&quot; title=&quot;第一节 枚举&quot;&gt;&lt;/a&gt;第一节 枚举&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;枚举又叫穷举，是程序设计中最常用的算法之一，是一种很*很暴力的算法。要说它的方法，就
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>关于杉果社区发展的二三想法</title>
    <link href="http://www.z16388.win/2016/10/31/%E5%85%B3%E4%BA%8E%E6%9D%89%E6%9E%9C%E7%A4%BE%E5%8C%BA%E5%8F%91%E5%B1%95%E7%9A%84%E4%BA%8C%E4%B8%89%E6%83%B3%E6%B3%95/"/>
    <id>http://www.z16388.win/2016/10/31/关于杉果社区发展的二三想法/</id>
    <published>2016-10-31T04:52:28.000Z</published>
    <updated>2016-10-31T05:13:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在杉果一年多，不算久也不算短，也剁了很多东西。从开始的陌生，到现在的熟悉，杉果带给了我很多（剁手的机会）一步步走来，看着社区的变化，想要说很多，各种想法也很凌乱。总之，还是本着站着说话不腰疼的立场，说一说自己的看法吧。</p>
<p>&emsp;&emsp;社区要想发展，定位、内容、管理、活动、UI等等，各种都不能少，那么，我就结合现状，发表一下自己的意见。</p>
<p>&emsp;&emsp;首先在定位上，杉果社区应该是成为一个玩家的交流平台，而不是一个评价商品的地方。那么，我们就应该给客户提供这样一个地方。之前我在给员子的私信中提到了这一点。刚好，也看到了这样的一个功能即将要上线的消息，我觉得，在“垃圾内容”上，应该很快会有所改善。毕竟，比起谈论什么怎么还不发key，我们更想看到什么更好剁，大家一起剁什么。</p>
<p>&emsp;&emsp;当然，没了活动时的抱怨，干货也要有对不对。所以第二点比较重要的，就是“独家内容”。必须是杉果特色的，必须是别家都找不到的。像之前和游戏厂商黑恶势力的谈笑风生活动啦，这样的好机会不应该成为给直播平台带来流量的活动对不对，为什么要便宜别人呢。结合自己的社区，发布自己的独家内容，这一点很重要。而且，杉果电台虽然做的很良心，但是我觉得受众可能还不是很广。我觉得如果去b站发视频的话，可能会有更好的效果。</p>
<p>&emsp;&emsp;管理层面我觉得暂时还不需要考虑，因为没人（心疼）。当然，人多之后的打算也是要提前做的。分区，管理，内容，各种方面，都要去做，当然这是后话。</p>
<p>&emsp;&emsp;活动，社区活动从来不缺，看万圣节活动对不对，下面复制粘贴300多回复，多火热。但是，活动结束呢？没有员子水贴和某up主的视频，我觉得可能三四天都看不到新的内容。活动是带来流量的方法，但是也要做对活动。像这样直接拿key走的活动，给人一种廉价感，而且是为了奖品而活动。我觉得应该活动日常化，积分化，让所有的人都参与进来。不是什么新人活动啦，发评测活动啦，这样除了会让人注册一堆小号，或者多一堆没有营养的测评之外，没有别的用处了。记得很久以前听说社区会有大改，但是等了好久也没有见到变化。。。社区现状就是抱怨和领key的地方。。。</p>
<p>&emsp;&emsp;UI不说了，毕竟不是专业搞UI的，但是至少steam的api该更新一下了，移动端密码框的安全性还有不能用psn的话就去掉这个功能对不对。</p>
<p>&emsp;&emsp;总之，千言万语总结成一句话：希望杉果越来越好，至少，我会等着。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在杉果一年多，不算久也不算短，也剁了很多东西。从开始的陌生，到现在的熟悉，杉果带给了我很多（剁手的机会）一步步走来，看着社区的变化，想要说很多，各种想法也很凌乱。总之，还是本着站着说话不腰疼的立场，说一说自己的看法吧。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;e
    
    </summary>
    
    
      <category term="心情" scheme="http://www.z16388.win/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="游戏" scheme="http://www.z16388.win/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>ACM常用模版</title>
    <link href="http://www.z16388.win/2016/10/30/ACM%E5%B8%B8%E7%94%A8%E6%A8%A1%E7%89%88/"/>
    <id>http://www.z16388.win/2016/10/30/ACM常用模版/</id>
    <published>2016-10-30T15:57:55.000Z</published>
    <updated>2016-11-18T09:32:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="求素数"><a href="#求素数" class="headerlink" title="求素数"></a>求素数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">su</span><span class="params">(<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(b);i++) &#123;</div><div class="line">        <span class="keyword">if</span>(b%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h3><p>欧几里得定力：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//最大公约数</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//最小公倍数</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> a/gcd(a,b)*b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;求素数&quot;&gt;&lt;a href=&quot;#求素数&quot; class=&quot;headerlink&quot; title=&quot;求素数&quot;&gt;&lt;/a&gt;求素数&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】2.4编程细节</title>
    <link href="http://www.z16388.win/2016/10/30/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%912-4%E7%BC%96%E7%A8%8B%E7%BB%86%E8%8A%82/"/>
    <id>http://www.z16388.win/2016/10/30/【ACM教程】2-4编程细节/</id>
    <published>2016-10-30T14:39:21.000Z</published>
    <updated>2016-10-30T15:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>细节决定成败，态度决定一切。</p>
</blockquote>
<p>&emsp;&emsp;在我们程序编写的过程中，有一些细节我们需要注意，这对你以后的代码质量都会有很大的影响。下面，我会介绍一些常见的细节。</p>
<h2 id="合理的缩进"><a href="#合理的缩进" class="headerlink" title="合理的缩进"></a>合理的缩进</h2><p>&emsp;&emsp;虽然编译器会忽略代码中一切空格和换行，但是一段乱奇葩早的缩进的代码真的是能逼死强迫症的。</p>
<p>&emsp;&emsp;常见的缩进方式是使用Tab键，默认4个空格。相同等级的语句不缩进，次级语句需要缩进，比如：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</div><div class="line">	sum+=i;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;在上面的代码中，我们看到循环体是累加计算，属于循环语句的次级语句，所以应当缩进。而输出是和循环同一等级的，所以要和for循环对齐。</p>
<p>&emsp;&emsp;除此之外，大括号的缩进也很重要，这一点在下面会介绍。</p>
<h2 id="统一的大括号"><a href="#统一的大括号" class="headerlink" title="统一的大括号"></a>统一的大括号</h2><p>&emsp;&emsp;大括号也是决定一个程序是否整齐的关键，我们常用以下两种方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</div><div class="line">	&#123;</div><div class="line">		sum+=i;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</div><div class="line">			sum+=i;</div><div class="line">		&#125;</div><div class="line">		System.out.println(sum);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不同类型数据之间的计算"><a href="#不同类型数据之间的计算" class="headerlink" title="不同类型数据之间的计算"></a>不同类型数据之间的计算</h2><p>&emsp;&emsp;这种情况经常出现在ACM的题目中，就比如hdu2002和hdu2009。如果是把int型数据赋值给double是没有问题的，但是如果是double数据给int，就会出现精度的损失，造成计算的失误。</p>
<p>&emsp;&emsp;hdu2002中的分数4/3。如果直接在程序里这么写，程序会当成4整除3来计算，应当写成<code>4.0/3.0</code>。</p>
<p>&emsp;&emsp;hdu2009题如果想要写成<code>m=sqrt(m)</code>的话，就要保证m的类型是double类型，否则在赋值时会损失精度。</p>
<h2 id="程序的模块化"><a href="#程序的模块化" class="headerlink" title="程序的模块化"></a>程序的模块化</h2><p>&emsp;&emsp;模块化思想很重要，像C++和Java都是面向对象的编程语言，集成化程度很高。但是并不意味着我们写C就不要模块化。模块化的程序可读性高，便于修改。</p>
<p>&emsp;&emsp;比如hdu2005，判断是否是闰年的题目。我在判断是否是闰年时，写了一个函数，功能是：如果是闰年返回1，否则返回0。</p>
<p>&emsp;&emsp;当然不仅限于如此，假设某程序需要按照一个公式进行计算，但是后来我们突然想要改变计算过程，如果你把公式写在函数里，那么只需要修改函数就行了，避免了对主函数的修改。</p>
<h2 id="关于数组"><a href="#关于数组" class="headerlink" title="关于数组"></a>关于数组</h2><p>&emsp;&emsp;关于数组有两点需要注意。</p>
<p>&emsp;&emsp;首先是对下标的确定。我们知道，数组的下标和元素的序号是刚好相差1的。那么我们可以抛弃数组的第一个元素，只使用数组的第二个往后的元素，这样可以统一下标和元素序号，比如：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">101</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;再者，在申请数组大小的时候，我们可以多申请几个。有时候也可能要同时申请多组，这时候，推荐大家使用宏定义，比如：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></div><div class="line"><span class="keyword">int</span> a[N],b[N],c[N];</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;细节决定成败，态度决定一切。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在我们程序编写的过程中，有一些细节我们需要注意，这对你以后的代码质量都会有很大的影响。下面，我会介绍一些常见的细节。&lt;/p&gt;
&lt;h2 id=&quot;合理的缩进
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hud2011-2020答案</title>
    <link href="http://www.z16388.win/2016/10/30/hud2011-2020%E7%AD%94%E6%A1%88/"/>
    <id>http://www.z16388.win/2016/10/30/hud2011-2020答案/</id>
    <published>2016-10-30T14:28:10.000Z</published>
    <updated>2016-11-10T07:26:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hdu2011-多项式求和"><a href="#hdu2011-多项式求和" class="headerlink" title="hdu2011 多项式求和"></a>hdu2011 多项式求和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m,n;</div><div class="line">    <span class="keyword">double</span> sum=<span class="number">0.0</span>,f=<span class="number">1.0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</div><div class="line">    <span class="keyword">while</span>(m--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        sum=<span class="number">0.0</span>,f=<span class="number">1.0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            sum+=f/i;</div><div class="line">            f=<span class="number">-1.0</span>*f;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hud2012-素数判定"><a href="#hud2012-素数判定" class="headerlink" title="hud2012 素数判定"></a>hud2012 素数判定</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> a)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a*a+a+<span class="number">41</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">su</span><span class="params">(<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(b);i++) &#123;</div><div class="line">        <span class="keyword">if</span>(b%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x,y,flag=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y)&amp;&amp;(x||y)) &#123;</div><div class="line">        flag=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=y;i++)</div><div class="line">            <span class="keyword">if</span>(su(cal(i))==<span class="number">0</span>) flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Sorry\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2013-蟠桃记"><a href="#hdu2013-蟠桃记" class="headerlink" title="hdu2013 蟠桃记"></a>hdu2013 蟠桃记</h2><p>&emsp;&emsp;这是一道非常经典的OI明星题，原名是《猴子吃桃》，我在2008年初二的时候第一次接触这道题目，也是因为这一道题爱上了算法。这道题目是非常经典的循环题，类似的题目还有《王小二切大饼》、《母牛问题》等。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        sum=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</div><div class="line">            sum=<span class="number">2</span>*(sum+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2014-青年歌手大赛-评委会打分"><a href="#hdu2014-青年歌手大赛-评委会打分" class="headerlink" title="hdu2014 青年歌手大赛_评委会打分"></a>hdu2014 青年歌手大赛_评委会打分</h2><p>&emsp;&emsp;这是一道日常生活中常见的题目，唯一需要注意的就是在使用<code>sort()</code>函数时，需要排序的范围，这里还请大家思考一下。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> li[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">double</span> p;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        p=<span class="number">0.0</span>;</div><div class="line">        <span class="built_in">memset</span>(li,<span class="number">0</span>,<span class="keyword">sizeof</span>(li));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;li[i]);</div><div class="line">        &#125;</div><div class="line">        sort(li+<span class="number">1</span>,li+n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) &#123;</div><div class="line">            p+=li[i];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,p/(n<span class="number">-2</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2015-偶数求和"><a href="#hdu2015-偶数求和" class="headerlink" title="hdu2015 偶数求和"></a>hdu2015 偶数求和</h2><p>&emsp;&emsp;这道题算是这几道里面比较麻烦的了，开始想的可能比较复杂，取第几项加几什么的很烦。但是后来发现，按照题目的意思直接去计算可能比较简单。</p>
<p>&emsp;&emsp;首先，我们的思路是算出每组数的第一个数<code>2+(m<em>2)\</em>i</code>,然后向后求和，去平均值。最后要判断一下最后一组是否完全，不全的话则需要除以<code>n%m</code>求平均值。</p>
<p>&emsp;&emsp;除此之外，还有输出的循环控制，最后一个元素的后面没有空格。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>,a=<span class="number">2</span>,flag=<span class="number">0</span>,i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            sum+=a;</div><div class="line">            a+=<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(i%m==<span class="number">0</span>) &#123;</div><div class="line">                flag++;</div><div class="line">                <span class="keyword">if</span>(flag!=<span class="number">1</span>)</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum/m);</div><div class="line">                sum=<span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(n%m==<span class="number">0</span>)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d\n"</span>,sum/(n%m));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2016-数据的交换输出"><a href="#hdu2016-数据的交换输出" class="headerlink" title="hdu2016 数据的交换输出"></a>hdu2016 数据的交换输出</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,a[<span class="number">110</span>],mi;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        mi=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;a[mi]) &#123;</div><div class="line">                mi=i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        t=a[mi];</div><div class="line">        a[mi]=a[<span class="number">1</span>];</div><div class="line">        a[<span class="number">1</span>]=t;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2017-字符串统计"><a href="#hdu2017-字符串统计" class="headerlink" title="hdu2017 字符串统计"></a>hdu2017 字符串统计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,sum;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    getchar();</div><div class="line">    <span class="keyword">while</span>(n--) &#123;</div><div class="line">        <span class="keyword">char</span> s;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>((s=getchar())!=<span class="string">'\n'</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(s&gt;=<span class="number">48</span>&amp;&amp;s&lt;=<span class="number">57</span>) sum++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2018-母牛的故事"><a href="#hdu2018-母牛的故事" class="headerlink" title="hdu2018 母牛的故事"></a>hdu2018 母牛的故事</h2><p>&emsp;&emsp;这是一道简单的动态规划问题，这类问题的其他内容我们将在后来的教程中着重讨论。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(y&lt;<span class="number">4</span>) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> func(y<span class="number">-3</span>)+func(y<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,func(n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2019-数列有序！"><a href="#hdu2019-数列有序！" class="headerlink" title="hdu2019 数列有序！"></a>hdu2019 数列有序！</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 110</span></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,m,ji=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)&amp;&amp;(n||m)) &#123;</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        ji=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&gt;=m) &#123;</div><div class="line">                ji=i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&gt;ji;i--) &#123;</div><div class="line">            a[i]=a[i<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        a[ji]=m;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">" %d"</span>,a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2020-绝对值排序"><a href="#hdu2020-绝对值排序" class="headerlink" title="hdu2020 绝对值排序"></a>hdu2020 绝对值排序</h2><p>```C++</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hdu2011-多项式求和&quot;&gt;&lt;a href=&quot;#hdu2011-多项式求和&quot; class=&quot;headerlink&quot; title=&quot;hdu2011 多项式求和&quot;&gt;&lt;/a&gt;hdu2011 多项式求和&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>hdu1089-1096输入输出练习答案</title>
    <link href="http://www.z16388.win/2016/10/28/1089-1096%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0/"/>
    <id>http://www.z16388.win/2016/10/28/1089-1096输入输出练习/</id>
    <published>2016-10-28T11:40:22.000Z</published>
    <updated>2016-10-30T14:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是ACM基本的输入输出练习，答案如下：</p>
<p>hdu1089<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1090<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">while</span>(n--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1091<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)&amp;&amp;(a||b)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1092<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        <span class="keyword">int</span> s=<span class="number">0</span>,b,i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</div><div class="line">                s+=b;</div><div class="line">        &#125;        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1093<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">while</span>(n--) &#123;</div><div class="line">        <span class="keyword">int</span> a,b,i,s=<span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</div><div class="line">            s+=b;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1094<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> s=<span class="number">0</span>,b,i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</div><div class="line">            s+=b;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1095<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hdu1096<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">while</span>(n--) &#123;</div><div class="line">        <span class="keyword">int</span> a,b,i,s=<span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=a;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</div><div class="line">            s+=b;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,s);</div><div class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是ACM基本的输入输出练习，答案如下：&lt;/p&gt;
&lt;p&gt;hdu1089&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>hdu2000-2010答案</title>
    <link href="http://www.z16388.win/2016/10/28/hdu2000-2010/"/>
    <id>http://www.z16388.win/2016/10/28/hdu2000-2010/</id>
    <published>2016-10-28T11:16:10.000Z</published>
    <updated>2016-10-30T15:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hdu2000-ASCII码排序"><a href="#hdu2000-ASCII码排序" class="headerlink" title="hdu2000 ASCII码排序"></a>hdu2000 ASCII码排序</h2><p>&emsp;&emsp;这是一道简单的排序问题，可以直接使用sort函数解决，但是如果使用值交换的方法则需要注意回车的消除。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> a[<span class="number">4</span>],t;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c%c%c"</span>,&amp;a[<span class="number">1</span>],&amp;a[<span class="number">2</span>],&amp;a[<span class="number">3</span>])!=EOF) &#123;</div><div class="line">        getchar();</div><div class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;a[<span class="number">2</span>]) &#123;</div><div class="line">            t=a[<span class="number">1</span>];</div><div class="line">            a[<span class="number">1</span>]=a[<span class="number">2</span>];</div><div class="line">            a[<span class="number">2</span>]=t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[<span class="number">2</span>]&gt;a[<span class="number">3</span>]) &#123;</div><div class="line">            t=a[<span class="number">2</span>];</div><div class="line">            a[<span class="number">2</span>]=a[<span class="number">3</span>];</div><div class="line">            a[<span class="number">3</span>]=t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;a[<span class="number">2</span>]) &#123;</div><div class="line">            t=a[<span class="number">1</span>];</div><div class="line">            a[<span class="number">1</span>]=a[<span class="number">2</span>];</div><div class="line">            a[<span class="number">2</span>]=t;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%c %c %c\n"</span>,a[<span class="number">1</span>],a[<span class="number">2</span>],a[<span class="number">3</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> str[<span class="number">3</span>];</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str) &#123;</div><div class="line">        sort(str,str+<span class="number">3</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;str[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;str[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;str[<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2001-计算两点间的距离"><a href="#hdu2001-计算两点间的距离" class="headerlink" title="hdu2001 计算两点间的距离"></a>hdu2001 计算两点间的距离</h2><p>&emsp;&emsp;这是一道简单的计算题，第一次使用了数学函数和双精度的数，没有太多需要注意的地方。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> x1,y1,x2,y2;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2) &#123;</div><div class="line">        <span class="keyword">double</span> jie=<span class="built_in">sqrt</span>((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,jie);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2002-计算球体体积"><a href="#hdu2002-计算球体体积" class="headerlink" title="hdu2002 计算球体体积"></a>hdu2002 计算球体体积</h2><p>&emsp;&emsp;这是一道求球体体积的计算题，需要注意的是，这里可能会出现整数和实数之间的乘法，需要注意的是题目中的4/3需要写成4.0/3.0，这一点很容易犯错。</p>
<p>&emsp;&emsp;还有一点需要注意的是，我们应当使用题目中所给的pi值，否则结果可能会出现一定的误差。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415927</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> r;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r) &#123;</div><div class="line">        <span class="keyword">double</span> jie=<span class="number">4.0</span>*PI*r*r*r/<span class="number">3.0</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.3lf\n"</span>,jie);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2003-求绝对值"><a href="#hdu2003-求绝对值" class="headerlink" title="hdu2003 求绝对值"></a>hdu2003 求绝对值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415927</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> r;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;r) &#123;</div><div class="line">        <span class="keyword">double</span> jie=<span class="built_in">fabs</span>(r);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,jie);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#hdu2004 成绩转换</p>
<p>&emsp;&emsp;这道题需要仔细审题，一定要注意分数的范围，无论是上界还是下界。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> grade;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;grade)!=EOF) &#123;</div><div class="line">        <span class="keyword">if</span>(grade&gt;=<span class="number">90</span>&amp;&amp;grade&lt;=<span class="number">100</span>) <span class="built_in">printf</span>(<span class="string">"A\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;=<span class="number">80</span>&amp;&amp;grade&lt;=<span class="number">89</span>) <span class="built_in">printf</span>(<span class="string">"B\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;=<span class="number">70</span>&amp;&amp;grade&lt;=<span class="number">79</span>) <span class="built_in">printf</span>(<span class="string">"C\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;=<span class="number">60</span>&amp;&amp;grade&lt;=<span class="number">69</span>) <span class="built_in">printf</span>(<span class="string">"D\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(grade&gt;=<span class="number">0</span>&amp;&amp;grade&lt;=<span class="number">59</span>) <span class="built_in">printf</span>(<span class="string">"E\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Score is error!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2005-第几天？"><a href="#hdu2005-第几天？" class="headerlink" title="hdu2005 第几天？"></a>hdu2005 第几天？</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">runn</span><span class="params">(<span class="keyword">int</span> yy)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(yy%<span class="number">400</span>==<span class="number">0</span>||(yy%<span class="number">100</span>!=<span class="number">0</span>&amp;&amp;yy%<span class="number">4</span>==<span class="number">0</span>))</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> y,m,d,sum;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d/%d/%d"</span>,&amp;y,&amp;m,&amp;d)!=EOF) &#123;</div><div class="line">        sum = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">switch</span>(m<span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">11</span> : sum+=<span class="number">30</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">10</span> : sum+=<span class="number">31</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">9</span>  : sum+=<span class="number">30</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">8</span>  : sum+=<span class="number">31</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">7</span>  : sum+=<span class="number">31</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>  : sum+=<span class="number">30</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>  : sum+=<span class="number">31</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>  : sum+=<span class="number">30</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>  : sum+=<span class="number">31</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>  :<span class="keyword">if</span> (runn(y)==<span class="number">1</span>) sum+=<span class="number">29</span>;</div><div class="line">                     <span class="keyword">else</span> sum+=<span class="number">28</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>  : sum+=<span class="number">31</span>;</div><div class="line">        &#125;</div><div class="line">        sum+=d;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2006-求奇数的乘积"><a href="#hdu2006-求奇数的乘积" class="headerlink" title="hdu2006 求奇数的乘积"></a>hdu2006 求奇数的乘积</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> liste[<span class="number">100</span>];</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;liste[i]);</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            <span class="keyword">if</span>(liste[i]%<span class="number">2</span>!=<span class="number">0</span>)</div><div class="line">                sum*=liste[i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2007-平方和与立方和"><a href="#hdu2007-平方和与立方和" class="headerlink" title="hdu2007 平方和与立方和"></a>hdu2007 平方和与立方和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m,n,t,i;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="keyword">if</span>(m&gt;n) &#123;</div><div class="line">            t=m;</div><div class="line">            m=n;</div><div class="line">            n=t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> s1=<span class="number">0</span>,s2=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=m;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) s1=s1+i*i;</div><div class="line">            <span class="keyword">else</span> s2=s2+i*i*i;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,s1,s2);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2008-数值统计"><a href="#hdu2008-数值统计" class="headerlink" title="hdu2008 数值统计"></a>hdu2008 数值统计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">double</span> liste[<span class="number">100</span>];</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;liste[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(liste[i]&lt;<span class="number">0</span>) a++;</div><div class="line">            <span class="keyword">if</span>(liste[i]==<span class="number">0</span>) b++;</div><div class="line">            <span class="keyword">if</span>(liste[i]&gt;<span class="number">0</span>) c++;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,a,b,c);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2009-求数列的和"><a href="#hdu2009-求数列的和" class="headerlink" title="hdu2009 求数列的和"></a>hdu2009 求数列的和</h2><p>&emsp;&emsp;这一题看起来很简单，但是需要进行不同类型数据的运算。这一点还是比较容易犯一些错误的，大家需要注意一些。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">double</span> sum;</div><div class="line">    <span class="keyword">int</span> m,n;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF) &#123;</div><div class="line">        sum=<span class="number">0.0</span>;</div><div class="line">        <span class="keyword">double</span> mm=m;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            sum+=mm;</div><div class="line">            mm=<span class="built_in">sqrt</span>(mm);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="hdu2010-水仙花数"><a href="#hdu2010-水仙花数" class="headerlink" title="hdu2010 水仙花数"></a>hdu2010 水仙花数</h2><p>&emsp;&emsp;这是一道很经典的题目，可能需要使用比较多的判断。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> m,n,flag;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n)!=EOF) &#123;</div><div class="line">        <span class="keyword">int</span> i=m;</div><div class="line">        flag=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=m;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">int</span> a,b,c;</div><div class="line">            a=i/<span class="number">100</span>;</div><div class="line">            b=i/<span class="number">10</span>%<span class="number">10</span>;</div><div class="line">            c=i%<span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span>(i==a*a*a+b*b*b+c*c*c) &#123;</div><div class="line">                <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;</div><div class="line">                    flag++;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    flag++;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">" %d"</span>,i);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"no\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hdu2000-ASCII码排序&quot;&gt;&lt;a href=&quot;#hdu2000-ASCII码排序&quot; class=&quot;headerlink&quot; title=&quot;hdu2000 ASCII码排序&quot;&gt;&lt;/a&gt;hdu2000 ASCII码排序&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】2.2从排序开始</title>
    <link href="http://www.z16388.win/2016/10/28/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%912-1.5%E4%BB%8E%E6%8E%92%E5%BA%8F%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.z16388.win/2016/10/28/【ACM教程】2-1.5从排序开始/</id>
    <published>2016-10-28T08:29:49.000Z</published>
    <updated>2016-10-31T10:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天看群里有同学说：“看dalao的博客，今天晚上估计要讲C++框架了”，这我能忍？让你们猜到了，我该多没面子啊。所以呢，今天我就把教程改了一下，顺便更好地串联后面的内容。</p>
<p>&emsp;&emsp;如题，我们今天要讲的是排序，排序是写程序中，比较重要的一个部分，以后也会专门做一个章节去讲，今天只涉及一些简单的排序方法。</p>
<h2 id="这他喵叫排序？——桶排序"><a href="#这他喵叫排序？——桶排序" class="headerlink" title="这他喵叫排序？——桶排序"></a>这他喵叫排序？——桶排序</h2><p>&emsp;&emsp;一直讲排序，可能会有些枯燥，我们先来点好玩的。</p>
<p>&emsp;&emsp;桶排序是最简单的排序算法，思路也是最奇葩的，奇葩到我都不想把它算作排序。那么它具体是怎么来的呢，我们来看下面一个题目：</p>
<blockquote>
<p>&emsp;&emsp;在一次体育比赛中，某个选手的动作将会由多名裁判进行打分，分值在0～10之间的整数。输入一个数组，存放有N名裁判给出的分数(1&lt;=N&lt;=10000)，输出要求从大到小输出裁判打出的分数。</p>
</blockquote>
<p>&emsp;&emsp;这道题很简单，有同学该说了，“我知道！用冒泡！”行，冒泡的确可以解决这个问题，但是时间复杂度可能会比较高。这道题，有一种更好的方法，那就是我们这一节的主角——桶排序，今天学了可能一辈子都再也用不到的排序方法。那么，究竟应该怎么去做呢？</p>
<p>&emsp;&emsp;首先声明一个长度为11的数组<code>a[11]</code>，再将该数组的每个元素都赋值为0。当选手得分为s时，进行操作<code>a[s]++</code>。这样进行一遍便利之后，我们数组中每个元素都将表示得s分的次数。这样，我们只需要将s打印<code>a[s]</code>次，就会得到我们需要的结果，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10010</span></div><div class="line"><span class="keyword">int</span> grade[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,a[<span class="number">11</span>];</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;grade[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        a[grade[i]]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&gt;=<span class="number">1</span>;i--) &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=a[i];j++) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="基础中的基础，“牛奶杯”排序"><a href="#基础中的基础，“牛奶杯”排序" class="headerlink" title="基础中的基础，“牛奶杯”排序"></a>基础中的基础，“牛奶杯”排序</h2><p>&emsp;&emsp;有一杯水，一杯牛奶，想让他们两个换一下，那么我们得需要另一个杯子作为中转站。这是我们在写程序中，进行值交换的最简单的方法。比如航电上的hdu2000题：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2000" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=2000</a>这就是一道使用牛奶杯排序法的题目,我们只需要一个中间变量就可以实现两个变量值的交换，然后比较三次达到排序的目的。这种方法比较麻烦，适用于样本比较少的排序。</p>
<h2 id="C-，带带我（利用C-的STL函数排序）"><a href="#C-，带带我（利用C-的STL函数排序）" class="headerlink" title="C++，带带我（利用C++的STL函数排序）"></a>C++，带带我（利用C++的STL函数排序）</h2><p>&emsp;&emsp;其实在竞赛中，我们最常使用的是C++的STL中的排序函数。（STL是C++的标准模版库）</p>
<p>&emsp;&emsp;<code>sort()</code>函数是我们最常用的排序函数，它在<code>algorithm</code>头文件中，使用时需要在你的程序上方添加一行：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;排序函数在比赛中都是被允许的，它拥有三个参数：</p>
<blockquote>
<p>sort(起始地址,终止地址,[比较方法])</p>
</blockquote>
<p>&emsp;&emsp;其中比较方法不是必须参数，它的使用方法我们将会在下一节进行说明。那么，一个使用<code>sort()</code>函数进行排序的简单程序如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">11</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</div><div class="line">    &#125;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">10</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;刚刚的那道hdu2000也可以使用这种方法去做，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> str[<span class="number">3</span>];</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str) &#123;</div><div class="line">        sort(str,str+<span class="number">3</span>);</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;str[<span class="number">0</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;str[<span class="number">1</span>]&lt;&lt;<span class="string">" "</span>&lt;&lt;str[<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>&emsp;&emsp;除了排序，初始化也很重要。在做和图、矩阵有关的题目时，我们经常会对二维数组进行初始化。将两个无关点之间的距离初始化为无穷，或者是给单位矩阵非对角线元素进行的初始化。C++给我们提供了memset() 函数实现初始化，这个函数在cstring头文件中。下面是memset() 函数的参数：</p>
<blockquote>
<p>Memset(数组名，初始化内容，初始化范围)；</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;今天看群里有同学说：“看dalao的博客，今天晚上估计要讲C++框架了”，这我能忍？让你们猜到了，我该多没面子啊。所以呢，今天我就把教程改了一下，顺便更好地串联后面的内容。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;如题，我们今天要讲的是排序，排序是写程
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>大连交通大学 软件竞赛协会介绍</title>
    <link href="http://www.z16388.win/2016/10/22/aboutdjac/"/>
    <id>http://www.z16388.win/2016/10/22/aboutdjac/</id>
    <published>2016-10-22T05:46:19.000Z</published>
    <updated>2016-10-23T01:56:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于大连交通大学软件竞赛协会"><a href="#关于大连交通大学软件竞赛协会" class="headerlink" title="关于大连交通大学软件竞赛协会"></a>关于大连交通大学软件竞赛协会</h1><p>&emsp;&emsp;大连交通大学软件竞赛协会（以下简称：协会），前身是大连交通大学ACM俱乐部。ACM俱乐部是由参加ACM竞赛的学长们自发组织成立的学习交流性组织，多年来诞生了我校大批技术大牛。前辈们参赛诸多，为我校捧得诸多荣誉。协会由学生自发组织，大连交通大学软件学院支持，进行算法相关的学习与培训，参加ACM和蓝桥杯为主的算法竞赛，为校争光。</p>
<h1 id="协会招新"><a href="#协会招新" class="headerlink" title="协会招新"></a>协会招新</h1><p>&emsp;&emsp;原则上，协会面向大连交通大学全体四年制／五年制全日制本科生开放，有以下条件者优先：</p>
<ul>
<li>参加过ACM／OI等竞赛的</li>
<li>对算法感兴趣或接触过的</li>
<li>学习过C/C++或Java</li>
<li>大二以上</li>
</ul>
<p>&emsp;&emsp;联系我们：<br><img src="http://oda2v68ht.bkt.clouddn.com/temp_qrcode_share_216063864.png" alt=""><br>&emsp;&emsp;&emsp;&emsp;QQ群号：216063864</p>
<h1 id="大连交通大学竞赛相关政策"><a href="#大连交通大学竞赛相关政策" class="headerlink" title="大连交通大学竞赛相关政策"></a>大连交通大学竞赛相关政策</h1><p>&emsp;&emsp;根据《大连交通大学关于大学生科技创新活动的若干规定》（大交大发[2006】63号]、《大连交通大学指导学生科技创新活动教师工作量核算及奖励办法》（大交大发[2007]147号）等文件精神，为进一步加强和规范我校大学生科技创新活动的深入发展，培养学生的创新精神和实践能力，鼓励学生积极参与科技创新活动，鼓励教师积极参与指导大学生科技创新活动、浓厚校园学术科技氛围，提高大学生创新能力和综合素质，颁发了大学生科技创新活动实施细则。详见：<a href="http://202.199.128.101/cxjy/shownews.asp?id=82" target="_blank" rel="external">http://202.199.128.101/cxjy/shownews.asp?id=82</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26355070&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于大连交通大学软件竞赛协会&quot;&gt;&lt;a href=&quot;#关于大连交通大学软件竞赛协会&quot; class=&quot;headerlink&quot; title=&quot;关于大连交通大学软件竞赛协会&quot;&gt;&lt;/a&gt;关于大连交通大学软件竞赛协会&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;大连交通大学软件竞赛
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
