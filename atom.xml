<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎径 其镜</title>
  <subtitle>求学道路上的行车记录仪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.z16388.top/"/>
  <updated>2019-11-16T14:03:21.249Z</updated>
  <id>http://www.z16388.top/</id>
  
  <author>
    <name>Anqi Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS使用replace()函数全部替换</title>
    <link href="http://www.z16388.top/2019/11/16/jsreplace/"/>
    <id>http://www.z16388.top/2019/11/16/jsreplace/</id>
    <published>2019-11-16T14:03:56.000Z</published>
    <updated>2019-11-16T14:03:21.249Z</updated>
    
    <content type="html"><![CDATA[<p>在处理爬虫爬取下来的数据时，遇到了在文字中出现了经过转义的换行符，在文中显示出了\n，很影响观赏效果。因此，我对内容做了处理。</p>
<p>但是在刷库的过程中，我发现，我总不能一次处理完所有的数据。后来发现是JavaScript的Replace函数的问题，这个函数默认只能替换第一个匹配到的项目。如果需要处理全部的，需要使用正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string.replace(<span class="regexp">/\\n/g</span>, <span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<p>除此之外，下面是一些处理爬取内容常用操作，包含了html的转义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">string.replace(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">' '</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">'&lt;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">'&gt;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">'&amp;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'"'</span>)</div><div class="line">   string.replace(<span class="regexp">/&amp;#x3D;/g</span>, <span class="string">'='</span>)</div><div class="line">   string.replace(<span class="regexp">/\[.*?\]/g</span>,<span class="string">''</span>)</div><div class="line">   string.replace(<span class="string">"\\n"</span>,<span class="string">"\n"</span>)</div><div class="line">   string.replace(<span class="string">"\\t"</span>,<span class="string">""</span>)</div><div class="line">   string.replace(<span class="string">"\\r"</span>,<span class="string">""</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在处理爬虫爬取下来的数据时，遇到了在文字中出现了经过转义的换行符，在文中显示出了\n，很影响观赏效果。因此，我对内容做了处理。&lt;/p&gt;
&lt;p&gt;但是在刷库的过程中，我发现，我总不能一次处理完所有的数据。后来发现是JavaScript的Replace函数的问题，这个函数默认只能
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS使用Splice()函数操作数组</title>
    <link href="http://www.z16388.top/2019/11/16/jssplice/"/>
    <id>http://www.z16388.top/2019/11/16/jssplice/</id>
    <published>2019-11-16T13:59:56.000Z</published>
    <updated>2019-11-16T14:00:02.652Z</updated>
    
    <content type="html"><![CDATA[<p>在js的使用过程中，有一次需要对数组进行各种操作，一时间迫使我想要去使用链表。后来通过查阅资料，总结了下面的一些方法，主要使用了splice()函数。</p>
<p>下面的方法主要是使用下标进行操作。如果是用值的话，可以通过<code>indexOf()</code>函数来获取下标。若不存在则返回-1。</p>
<p>值交换</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_arr</span>(<span class="params">a_list, index1, index2</span>) </span>&#123;</div><div class="line">    a_list[index1] = a_list.splice(index2, <span class="number">1</span>, a_list[index1])[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> a_list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>置顶</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">up_arr</span>(<span class="params">a_list, index</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=<span class="number">0</span> &amp;&amp; index!=<span class="number">-1</span>)&#123;</div><div class="line">        a_list[index] = a_list.splice(index<span class="number">-1</span>, <span class="number">1</span>, a_list[index])[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下移</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">down_arr</span>(<span class="params">a_list, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=a_list.length<span class="number">-1</span> &amp;&amp; index!=<span class="number">-1</span>)&#123;</div><div class="line">        a_list[index] = a_list.splice(index+<span class="number">1</span>, <span class="number">1</span>, a_list[index])[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ins_arr</span>(<span class="params">a_list, index, a_data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (a_list.indexOf(a_data)==<span class="number">-1</span>) &#123;</div><div class="line">            a_list.splice(index+<span class="number">1</span>, <span class="number">0</span>, a_data);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在顶部插入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">topins_arr</span>(<span class="params">a_list, a_data</span>) </span>&#123;</div><div class="line">    a_list.splice(<span class="number">0</span>, <span class="number">0</span>, a_data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>删除元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_arr</span>(<span class="params">a_list, a_data_list</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> ele <span class="keyword">of</span> a_data_list) &#123;</div><div class="line">        <span class="keyword">let</span> index = a_list.indexOf(ele);</div><div class="line">        <span class="keyword">if</span>(index!=<span class="number">-1</span>)&#123;</div><div class="line">            a_list.splice(index, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在js的使用过程中，有一次需要对数组进行各种操作，一时间迫使我想要去使用链表。后来通过查阅资料，总结了下面的一些方法，主要使用了splice()函数。&lt;/p&gt;
&lt;p&gt;下面的方法主要是使用下标进行操作。如果是用值的话，可以通过&lt;code&gt;indexOf()&lt;/code&gt;函数来
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>当你的程序连接Mysql然后崩溃时</title>
    <link href="http://www.z16388.top/2019/11/16/mysqltimeout/"/>
    <id>http://www.z16388.top/2019/11/16/mysqltimeout/</id>
    <published>2019-11-16T13:43:56.000Z</published>
    <updated>2019-11-16T13:47:13.465Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个监控mysql数据库更新状态的预警程序，总是莫名其妙的报一个连接错误的错，然后程序死掉。后来在系统趋于稳定之后，我就没再继续维护这个工具了。</p>
<p>但是最近我在写另一个工具时，遇到了一个奇怪的问题，就是：tick总在27000多左右的时候崩溃。</p>
<p>我进行了一系列的猜测，比如tick的代码，或者是逻辑有问题，最后我把思路放在了之前遇到的这个错误上。查阅资料后发现，MySQL数据库在连接之后，如果超过一个设定的时间戳之后，会断开。这个值叫<code>WAIT_TIMEOUT</code>，默认值是28800，也就是说如果连上MySQL数据库之后，8小时内没有进行操作，这个连接便会断开。</p>
<p>网上很多连接MySQL数据库的代码没有处理过超时连接的问题，就连JS的官方代码好像也是在17年之后才更新的。以往这个问题，大家都是通过修改这个值来进行规避的。比如改成300天。修改有两种方式，一种是修改配置文件，这样在启动时便会使用这个配置；另一种是修改这个值，或者全局，或者当次生效。</p>
<p>下面是我在使用JavaScript语言链接MySQL数据库时，处理超时重连问题的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">this.config = &#123;</div><div class="line">    "host": "x.x.x.x",</div><div class="line">	"port": xxxx,</div><div class="line">	"user": "root",</div><div class="line">	"password": "pass",</div><div class="line">	"database": "name""</div><div class="line">&#125;		</div><div class="line"></div><div class="line">async connect() &#123;</div><div class="line">    let self = this;</div><div class="line">    console.log("connect mysql success with", JSON.stringify(this.config))</div><div class="line">    // 创建连接</div><div class="line">    this.db_mysql = mysql.createConnection(</div><div class="line">        this.config</div><div class="line">    );</div><div class="line">    // 连接数据库</div><div class="line">    await this.db_mysql.connect();</div><div class="line">    // 错误处理</div><div class="line">    this.db_mysql.on('error', function(err) &#123;</div><div class="line">        if (err) &#123;</div><div class="line">            if (err.code === 'PROTOCOL_CONNECTION_LOST') &#123;</div><div class="line">                // 处理超时</div><div class="line">                console.warning("start reconnect mysql");</div><div class="line">                self.connect();</div><div class="line">            &#125; else &#123;</div><div class="line">                console.error(err.stack || err);</div><div class="line">                console.warning("start reconnect mysql");</div><div class="line">                self.connect();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一个监控mysql数据库更新状态的预警程序，总是莫名其妙的报一个连接错误的错，然后程序死掉。后来在系统趋于稳定之后，我就没再继续维护这个工具了。&lt;/p&gt;
&lt;p&gt;但是最近我在写另一个工具时，遇到了一个奇怪的问题，就是：tick总在27000多左右的时候崩溃。&lt;/p&gt;

    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
      <category term="MySQL" scheme="http://www.z16388.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用闪屏</title>
    <link href="http://www.z16388.top/2019/11/16/AndroidSplash/"/>
    <id>http://www.z16388.top/2019/11/16/AndroidSplash/</id>
    <published>2019-11-16T13:19:56.000Z</published>
    <updated>2019-11-16T13:41:45.264Z</updated>
    
    <content type="html"><![CDATA[<p>去年在接入安卓SDK时，会有部分渠道有要求手写闪屏的情况，下面是当时的笔记，这只是最简单的一种方法。</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>很好的例子：</p>
<p><a href="https://www.jianshu.com/p/a609f510b19a" target="_blank" rel="external">https://www.jianshu.com/p/a609f510b19a</a></p>
<p><a href="https://blog.csdn.net/l799069596/article/details/47094731" target="_blank" rel="external">https://blog.csdn.net/l799069596/article/details/47094731</a></p>
<p>安卓动画：<a href="https://blog.csdn.net/IO_Field/article/details/53101499" target="_blank" rel="external">https://blog.csdn.net/IO_Field/article/details/53101499</a></p>
<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>除去游戏本身的闪屏之外，有的渠道会要求，有额外的渠道闪屏。为了使用一套资源出不同渠道包，我们可以对接渠道的AS工程进行处理，单独设置闪屏。</p>
<p>首先，创建一个闪屏Activity，为你的主Activity，这样在游戏的一开始你就可以看到闪屏了。</p>
<p>这里需要注意的是，你原先的Activit也需要在Manifest中注册打开日志，否则在打包的时候会找不到，报错：</p>
<p><a href="https://blog.csdn.net/qq_28301007/article/details/52265775" target="_blank" rel="external">https://blog.csdn.net/qq_28301007/article/details/52265775</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"...Activity"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>下面是主Activity，也就是闪屏Activity的代码，需要根据AS的提示import缺少的部分。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</div><div class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.view.WindowManager;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> TimeAnimDurning = <span class="number">2000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> displayDeviceWidth;</div><div class="line">    ImageView iv_splash;</div><div class="line">    <span class="keyword">private</span> ObjectAnimator objAnim;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        displayDeviceWidth = getResources().getDisplayMetrics().widthPixels;</div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">        iv_splash = (ImageView) findViewById(R.id.splash);</div><div class="line">        objAnim = ObjectAnimator.ofFloat(iv_splash,<span class="string">"alpha"</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        objAnim.setDuration(TimeAnimDurning);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                objAnim.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span>((<span class="keyword">int</span>)animation.getAnimatedFraction() == <span class="number">1</span>)&#123;</div><div class="line">                            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line">                            startActivity(<span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span> , .YouActivity.class));</div><div class="line">                            finish();</div><div class="line">                            <span class="keyword">return</span> ;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                objAnim.start();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.unity3d.player.SplashActivity"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:visibility</span>=<span class="string">"visible"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/splash"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/splash"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面控制闪屏格式的style.xml中，可以看到闪屏的背景色设置为了白色。这里有一些常用的颜色xml：<a href="https://blog.csdn.net/sundaysunshine/article/details/53509854" target="_blank" rel="external">https://blog.csdn.net/sundaysunshine/article/details/53509854</a></p>
<p>除了这两处之外，还需要根据style.xml中的配置，放好闪屏图片，设置闪屏背景。</p>
<p>整个闪屏的原理就是创建一个动画，在动画播放完成之后，去执行一个新的activity。在补全报错的部分之后，还是有一些细节部分需要注意的。</p>
<p>首先是结束时间的判定。判定时机总共有两种，一种是获取动画的进度，就像这里的例子，使用<code>(int)animation.getAnimatedFraction()</code>进行获取一个从0~1的数，来表示目前的动画的播放进度。除此之外还可以获取播放的时间，这个函数是：<code>getAnimatedValue()</code>，它可以获取属性的当前值。使用这两个函数可以很方便地控制动画的时间和动作。</p>
<p>除此之外，在调起另一个Activity之后，我结束了这个Activity。这是因为如果使用默认的LaunchMode，在重新唤醒应用时，闪屏会再次启动，然后走完动画，应用重启。这就造成了应用无法关闭的状况，只能后台强制杀掉。解决办法就是让闪屏只执行一次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年在接入安卓SDK时，会有部分渠道有要求手写闪屏的情况，下面是当时的笔记，这只是最简单的一种方法。&lt;/p&gt;
&lt;h1 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h1&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓各渠道SDK接入体验</title>
    <link href="http://www.z16388.top/2019/11/12/mostsdk/"/>
    <id>http://www.z16388.top/2019/11/12/mostsdk/</id>
    <published>2019-11-12T15:00:23.000Z</published>
    <updated>2019-11-12T15:13:25.279Z</updated>
    
    <content type="html"><![CDATA[<p>去年的这个时候，我在忙于接入各种SDK。接渠道SDK，是一件十分薛定谔的事情。你觉得很容易，的确很容易，但是，也很容易遇到问题。然后我就陷入了长期的自闭状态，再加上偷懒，然后博客就断更了一年。现在回头来回忆一下，去年的这个时候，接入SDK时的那些体验。</p>
<blockquote>
<p>1.酷派</p>
</blockquote>
<p>充值之后，服务器收不到消息，对接也没有人。</p>
<p>现在看来很明显，已然黄了。</p>
<blockquote>
<p>2.应用宝</p>
</blockquote>
<p>传说中的5000人大群只有2个技术的大渠道。每天上午问问题会施舍你两句，下午是肯定不会回答问题的，团建能团建半个月。这个渠道我是使用聚合sdk接入的。需要注意的是，接入时有测试阶段，和正式阶段之分，游戏货币名不能修改，同时还必须接入腾讯的信鸽推送SDK，否则无法过审，手动接入成本极高。</p>
<blockquote>
<p>3.金立</p>
</blockquote>
<p>高版本会造成初次进入闪退，主动获取权限也不行，必须低版本编译。<br>华为手机会出现渲染错误，游戏变成紫红色。<br>需要安装支付插件。<br>现在也应该没有接入的必要了。</p>
<blockquote>
<p>4.华为</p>
</blockquote>
<p>相当棒的渠道，文档详细，对接起来体验也很不错。充值错误的时候，每一步骤，原因都会有显示。<br>但是不支持第三方工具接入。<br>需要安装支付插件。</p>
<blockquote>
<p>5.魅族</p>
</blockquote>
<p>商品id配置不明，会出现莫名的变动，很不靠谱。<br>支付回调生效需要1天的时间，需要对商品进行映射，对接很麻烦的渠道。<br>需要安装支付插件。</p>
<blockquote>
<p>6.360</p>
</blockquote>
<p>包体最大，足足有50多k的方法数，不分包就是死。</p>
<blockquote>
<p>7.百度</p>
</blockquote>
<p>方法数排名第二，仅次于360。<br>高版本编译会无法使用闪屏。<br>提审体验极差。说好的SDK不强用更，但是等到提审后告诉你不合格。</p>
<blockquote>
<p>8.联想</p>
</blockquote>
<p>商品id为自动生成，需要做好映射。<br>AnySDK接入需要注意参数顺序。</p>
<blockquote>
<p>9.UC</p>
</blockquote>
<p>无法使用第三方工具进行接入。<br>闪屏比较蛋疼，在sdk初始化时自动播放。首次运行时无法正常显示，时机不一定，容易和应用闪屏覆盖。</p>
<blockquote>
<p>10.OPPO、VIVO</p>
</blockquote>
<p>无法使用第三方工具进行接入。<br>需要安装支付插件。</p>
<blockquote>
<p>11.小七</p>
</blockquote>
<p>文档描述不明确，注意对登陆回调的处理方式，注重切换账号的测试。<br>SDK的Manifest中，最高宽高比设置为2.2。如果游戏中有对这个参数进行修改，需要进行统一。</p>
<blockquote>
<p>12.拇指玩</p>
</blockquote>
<p>sdk默认背景为透明，会造成有些版本的手机唤起sdk时会显示桌面为背景。或者是切换到主屏后，再回来，只有单独的sdk页面。<br>解决方式是把style.xml中的windowIsTranslucent值置为为false。<br>回调处理方式与其他sdk略有不同,Log与执行功能部分的代码进行了分离。<br>目前版本，无法使用qq登陆等方式，在登陆界面仍没有去掉该入口。</p>
<blockquote>
<p>其他:</p>
</blockquote>
<p>在运营过程中，小米、UC、应用宝和魅族会不同频率出现无法登录的问题，属正常现象，是他们的SDK服务器抽风了，会报一些很可怕的错误，比如应用不存在，应用id无效之类的。这时候只需要稳定好用户的心态即可，没有任何解决办法。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年的这个时候，我在忙于接入各种SDK。接渠道SDK，是一件十分薛定谔的事情。你觉得很容易，的确很容易，但是，也很容易遇到问题。然后我就陷入了长期的自闭状态，再加上偷懒，然后博客就断更了一年。现在回头来回忆一下，去年的这个时候，接入SDK时的那些体验。&lt;/p&gt;
&lt;block
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>某微信爬虫工具多开方案</title>
    <link href="http://www.z16388.top/2019/11/12/most_wechat/"/>
    <id>http://www.z16388.top/2019/11/12/most_wechat/</id>
    <published>2019-11-12T13:15:53.000Z</published>
    <updated>2019-11-12T13:28:07.569Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为需求找到了这个超级好用的微信爬虫工具<a href="https://github.com/striver-ing/wechat-spider" target="_blank" rel="external">https://github.com/striver-ing/wechat-spider</a>，目前已经开源。工具可以很方便地实现爬取微信文章，获取点赞、评论等功能。</p>
<p>最近，微信针对文章历史接口做了调整：PC版限制了爬取的次数，访问间隔应该控制在8分钟以上，移动端则是在两个月前直接干掉了这个功能。文章评论则没有改变。因此，这个工具目前最好的使用方式就是多开，分别爬不同的文章，再单开一个用来爬需要爬的评论。</p>
<p>工具的具体使用方法在原工程中都有提到，这里就不再赘述了。</p>
<p>在工具的使用方法中，我们知道，作者是使用全局代理，将所有的https消息都强制走了本机的8080端口，然后通过Python的mitmproxy来截取消息内容来实现的这个工具。那么，我可以使用局部代理，将制定的微信客户端，走制定端口，即可实现工具的多开。</p>
<p>有了这个思路，那么我们就只需要解决两个问题：</p>
<ol>
<li>微信的多开</li>
<li>多个微信走多个局部代理</li>
</ol>
<p>这里先说一下，我们无法使用微信PC客户端自带的代理功能。因为一旦这个功能开启，微信的所有链接都将进行加密，你得到的只会是一个格式如：<code><a href="https://xxx.xxx.xx.xx/mmtls/xxxxxx" target="_blank" rel="external">https://xxx.xxx.xx.xx/mmtls/xxxxxx</a></code>的加密链接。</p>
<h1 id="微信的多开"><a href="#微信的多开" class="headerlink" title="微信的多开"></a>微信的多开</h1><p>微信多开的实现比较简单，直接使用bat脚本打开多个微信即可。需要注意的是，要以管理员模式运行。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">start /d <span class="string">"C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">exit</div></pre></td></tr></table></figure>
<p>这样虽然可以打开多个微信，但是在设置局部代理时，工具无法区相同路径下的相同可执行文件。因此，我们需要把微信客户端拷贝多份，以应对后面的步骤。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">start /d <span class="string">"C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatb\<span class="string">" WeChatb.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatc\<span class="string">" WeChatc.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatd\<span class="string">" WeChatd.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChate\<span class="string">" WeChate.exe</span></div><div class="line">exit</div></pre></td></tr></table></figure>
<p>需要注意的是，这样配置之后的脚本将不一定百分百执行成功，可能只打开一个客户端。一般第二次即可执行成功。</p>
<h1 id="局部代理"><a href="#局部代理" class="headerlink" title="局部代理"></a>局部代理</h1><p>这里，我使用了Proxifier工具，进行局部代理。这个工具很容易获取，x度上很容易就可以获取到免费破解汉化的版本。</p>
<p>安装之后，我们开始配置工作。</p>
<blockquote>
<p>1.配置文件-&gt;代理服务器  这里地址填本机127.0.0.1，端口填你想要转发的端口，比如8080，8081，协议类型是HTTPS。你想开多少，就填多少个。</p>
<p><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693277.png" alt="图1"><br><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693607.png" alt="图2"></p>
<p>2.配置文件-&gt;代理规则    这里我们把默认的全局代理给关闭，双击条目，将“是否有效”取消勾选即可。然后添加微信的代理规则，点击添加，名称随意，应用程序浏览到微信的exe文件，目标主机清空，端口清空，然后在最下方的动作中选择你上一步配置的一个端口。那么这个路径下的客户端执行时，便会代理到这个端口下了。</p>
<p><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693777.png" alt="图3"><br><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574694007.png" alt="图4"></p>
</blockquote>
<p>微信多开之后，我们会发现多开的这几个的微信的进程名是一样的，无法进行区分。这时候可以在任务管理器中使用切换到、最小化等功能确定哪个窗口是哪个进程，转到本地文件来确定他是哪个目录下的。在开多个的时候，一定要注意区分，以防登错账号，影响爬取。</p>
<p>爬虫的配置文件中，我们最好使用不同的mysql数据库，以免产影响。当然，如果你修改了原工具的代码，那就另当别论了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为需求找到了这个超级好用的微信爬虫工具&lt;a href=&quot;https://github.com/striver-ing/wechat-spider&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/striver-in
    
    </summary>
    
    
      <category term="微信" scheme="http://www.z16388.top/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="爬虫" scheme="http://www.z16388.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>生成Java版Anysdk的aar</title>
    <link href="http://www.z16388.top/2018/11/10/anysdk/"/>
    <id>http://www.z16388.top/2018/11/10/anysdk/</id>
    <published>2018-11-10T11:46:31.000Z</published>
    <updated>2018-11-10T12:35:18.277Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在接入Anysdk的时候，我选择了Java的框架。虽然使用Unity版本的会更加方便，直接拖进去就完成了安装步骤，但是不利于控制项目dex文件的大小，不得不进行分包。但是官方提供的是Eclipse的版本，如果想要更好的使用，我们必须把这些东西生成为aar。</p>
<p>&emsp;&emsp;首先，在Android Studio的工程中新建一个library，给的文件拷贝到相应的目录下。需要注意的是，res需要拷贝到src/main/res里。</p>
<p>&emsp;&emsp;如果直接打包的话，我们会发现lib下的armeabi-v7a没有参与打包，缺了so文件怎么能行。这时候，需要在library下的build.gradle中进行配置。</p>
<p>&emsp;&emsp;在buildTypes同级的地方，增加这些代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jniLibs.srcDirs = ['libs']</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里指定了，“在libs目录下寻找so文件”。配置好之后，按照anysdk的文档写好java代码，配好manifest，就可以生成anysdk的aar了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在接入Anysdk的时候，我选择了Java的框架。虽然使用Unity版本的会更加方便，直接拖进去就完成了安装步骤，但是不利于控制项目dex文件的大小，不得不进行分包。但是官方提供的是Eclipse的版本，如果想要更好的使用，我们必须把这些东西生成为a
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
      <category term="Anysdk" scheme="http://www.z16388.top/tags/Anysdk/"/>
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向笔记</title>
    <link href="http://www.z16388.top/2018/11/10/android-d/"/>
    <id>http://www.z16388.top/2018/11/10/android-d/</id>
    <published>2018-11-10T10:32:08.000Z</published>
    <updated>2018-11-10T12:12:42.811Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这几周，一直在倒腾安卓apk相关的东西，前面那一篇<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>就是倒腾的一个中间产物。但是命令行工具还是有它的局限性，随着作死的幅度越来越大已经无法满足我的需求了，便改用python来实现这个工具。大家可以参考这个项目来进行修改<a href="https://github.com/z16388/cs_game_lib" target="_blank" rel="external">https://github.com/z16388/cs_game_lib</a>。后面还有一些扩展的代码没有暂时加入到项目中，打算完善之后提交上去。这篇还会继续更新，可以参考后面的代码结合项目达到你的目的。</p>
<h2 id="关于Apk"><a href="#关于Apk" class="headerlink" title="关于Apk"></a>关于Apk</h2><p>&emsp;&emsp;apk就是一个zip，可以直接解压进行修改，这也是我前一篇中修改apk的方式。但是它不是普通的zip，需要一个签名，否则无法进行安装。但是如果直接进行解压，它里面会有一些二进制化的东西，不方便修改。这时候，我们可以使用apktool进行解包，这样得到的都是文本化的内容了。除此之外，解包比解压能得到更多的res信息，而且不需要我们手动删除签名文件夹。</p>
<h2 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h2><p>&emsp;&emsp;Apktool是一个jar文件，官网是<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a>。可以参考它的文档进行使用，但是会发现，命令行会变得很奇怪，而且是开了一个新的窗口，我们后面命令行的代码不会顺利执行，就很难受。后来发现，它的命令其实是执行同目录下的一个bat脚本文件，而且是加了参数的。所以，在使用apktool时候，我比较推荐直接调用jar,以解包为例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Duser.language=zh_cn -Dfile.encoding=UTF-8 apktool.jar d [file name] -o [decode path]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们常用的命令其实就是解包和打包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apktool d xxx.apk</div><div class="line">apktool b xxx</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;打包之后，是没有META-INF文件夹的，可以直接签名。关于签名相关的内容可以参考：<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>。</p>
<h2 id="APK解包后的结构"><a href="#APK解包后的结构" class="headerlink" title="APK解包后的结构"></a>APK解包后的结构</h2><p>&emsp;&emsp;解包后的APK目录是会变的，如果进行了打包，那么回在该目录下生成一个build目录。但是基础的会有下面这些：</p>
<ul>
<li>assest</li>
<li>lib</li>
<li>original</li>
<li>res</li>
<li>smali</li>
<li>unknown</li>
</ul>
<p>&emsp;&emsp;除此之外，还有文本化的manifest文件。</p>
<p>&emsp;&emsp;想要修改app安装后的名称，可以去res/values/strings.xml，找到app_ame的字段进行修改。</p>
<p>&emsp;&emsp;想要修改权限可以直接修改manifest文件。</p>
<p>&emsp;&emsp;但是想要修改包名就不是那么简单的事情了，需要反编译smali文件成java，修改目录和包名在反编译回去。这个骚操作还是在计划中，暂时没有实现。</p>
<p>&emsp;&emsp;需要注意的是，如果使用Python原生的xml库区修改安卓的xml的时候，会改变xml文件的名空间。原先满页的android名空间变成了奇怪的ag0。这个问题我还在寻找解决方案。如果完成了，那么关于权限和应用名的修改就可以实现自动化了。</p>
<p>&emsp;&emsp;解包的代码如下，可以替换上面github项目中的解压代码。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> os,os.path</div><div class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> rmtree</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_apk</span><span class="params">(filename, decode_folder)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(decode_folder):</div><div class="line">        rmtree(decode_folder)</div><div class="line">        <span class="keyword">print</span> <span class="string">"删除已存在的文件夹"</span>+decode_folder</div><div class="line">    <span class="keyword">print</span> <span class="string">"开始解包"</span>+filename+<span class="string">"-&gt;"</span>+decode_folder</div><div class="line">    apktool_command = <span class="string">"java -jar -Duser.language=zh_cn -Dfile.encoding=UTF8 apktool.jar d "</span> + filename + <span class="string">" -o "</span> + decode_folder</div><div class="line">    os.system(apktool_command)</div><div class="line">    <span class="keyword">print</span> <span class="string">"解包成功"</span>+filename+<span class="string">"-&gt;"</span>+decode_folder</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_apk</span><span class="params">(folder, apk_out)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.access(apk_out,os.R_OK):</div><div class="line">        <span class="keyword">print</span> <span class="string">"删除已存在的"</span>+apk_out</div><div class="line">        os.remove(apk_out)</div><div class="line">    <span class="keyword">print</span> <span class="string">"打包中"</span>+apk_out</div><div class="line">    apktool_command = <span class="string">"java -jar -Duser.language=zh_cn -Dfile.encoding=UTF8 apktool.jar b "</span> + folder + <span class="string">" -o "</span> + apk_out</div><div class="line">    os.system(apktool_command)</div><div class="line">    <span class="keyword">print</span> <span class="string">"打包成功"</span>+apk_out</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;脚本需要和apktool.jar在同一目录下，否则命令中需要指定路径。</p>
<h2 id="关于签名"><a href="#关于签名" class="headerlink" title="关于签名"></a>关于签名</h2><p>&emsp;&emsp;打包后签名的方法，在这一篇里已经提到了<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>。</p>
<p>&emsp;&emsp;需要注意的是，keystore文件是使用eclipse生成的签名文件，算，如果你的应用是使用Android Studio生成的签名，那将是jks文件。(这可是个不错的番号啊…)</p>
<p>&emsp;&emsp;生成jks文件：在Build菜单中，找到Generate Signed Apk选项，在弹出的窗口中选择Create new，填写相关内容，即可创建签名文件。</p>
<p>&emsp;&emsp;如果非要使用keystore，可以使用keytool进行转换，jks文件经过p12文件中转可以转换成keystore文件，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -srckeystore xxx.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore xxx.p12</div><div class="line">keytool -v -importkeystore -srckeystore xxx.p12 -srcstoretype PKCS12 -destkeystore xxx.keystore -deststoretype JKS</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，还可以使用keytool直接生成keystore签名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkeypair -alias serverkey -keypass 111111 -storepass 111111 -dname &quot;C=CN,ST=GD,L=SZ,O=vihoo,OU=dev,CN=vihoo.com&quot; -keyalg RSA -keysize 2048 -validity 3650 -keystore server.keystore</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这几周，一直在倒腾安卓apk相关的东西，前面那一篇&lt;a href=&quot;http://z16388.github.io/2018/10/21/cmdapk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;命令行修改apk工具&lt;/a&gt;就是倒
    
    </summary>
    
    
      <category term="Python" scheme="http://www.z16388.top/tags/Python/"/>
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>关于新版(28, 9.0)Android的坑</title>
    <link href="http://www.z16388.top/2018/11/10/androidversionkeng/"/>
    <id>http://www.z16388.top/2018/11/10/androidversionkeng/</id>
    <published>2018-11-10T09:34:38.000Z</published>
    <updated>2018-11-10T10:16:30.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-9-0"><a href="#Android-9-0" class="headerlink" title="Android 9.0"></a>Android 9.0</h1><p>&emsp;&emsp;前几天出包就出现了一个非常痛心的事情。发现使用刚发售的，搭载安卓9.0系统的手机无法进行热更的。这就很难受了。各种去查，发现是在10月31日晚上，SDK突然更新了，增加了新的版本28，也就是安卓9.0。</p>
<p>&emsp;&emsp;Unity和安卓9.0的矛盾是，网络相关的东西会受到影响。目前知道的还有Unity的后台统计也是无法使用的，当时清了整个后台，一天多都是白白的，一个Bug都没有，难受。</p>
<p>&emsp;&emsp;解决方法就是到sdk目录中把28给删了，最高版本使用27。然后打出的包解包看一下manifest，确认版本是27，以防止不兼容安卓9.0。这个在传到谷歌商店中构建版本时也是可以确认的。</p>
<h1 id="Android-9-0-1"><a href="#Android-9-0-1" class="headerlink" title="Android 9.0"></a>Android 9.0</h1><p>&emsp;&emsp;在接某第三方sdk的时候遇到了另一个问题，发现他们的sdk在8.0的系统里无法使用。logcat之后发现是他们使用了一个无法在全屏模式下使用的属性。这其实是一个8.0.0版本的bug，在8.1版本中得到了修复，我也用手边的诺基亚7升级了系统，验证了这一点。</p>
<p>&emsp;&emsp;然后他们在第二天就更新了sdk版本，可喜可贺，可喜可贺~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-9-0&quot;&gt;&lt;a href=&quot;#Android-9-0&quot; class=&quot;headerlink&quot; title=&quot;Android 9.0&quot;&gt;&lt;/a&gt;Android 9.0&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;前几天出包就出现了一个非常痛心的事情。发现使
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>命令行修改apk工具</title>
    <link href="http://www.z16388.top/2018/10/21/cmdapk/"/>
    <id>http://www.z16388.top/2018/10/21/cmdapk/</id>
    <published>2018-10-21T06:24:25.000Z</published>
    <updated>2018-11-10T10:32:59.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;在前一段时间的工作中，我得到了一个新的任务，写一个命令行工具，修改apk中的某个文件，再进行重新打包。这个过程实际上十分简单：首先，apk文件就是一个zip文件，但是在安装的时候安卓系统会校验签名，因此我们需要对重新打包的apk进行签名。下面是实现这个工具的重难点和具体思路：</p>
<h2 id="命令行数组"><a href="#命令行数组" class="headerlink" title="命令行数组"></a>命令行数组</h2><p>&emsp;&emsp;如果想要生成一批apk，他们中需要修改的位置都是相同的，只有写入的文本不同。那么，第一时间我们会想到字符串数组。但是在命令行中是没有数组的，有的文章采用本地文件逐行读取的方法，但我们也可以使用下面的方法来对数组进行模拟:</p>
<p><a href="https://www.yiibai.com/batch_script/batch_script_arrays.html" target="_blank" rel="external">参考资料：</a><a href="https://www.yiibai.com/batch_script/batch_script_arrays.html" target="_blank" rel="external">https://www.yiibai.com/batch_script/batch_script_arrays.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">set a[0]=1 </div><div class="line">set a[1]=2 </div><div class="line">set a[2]=3 </div><div class="line">echo The first element of the array is %a[0]% </div><div class="line">echo The second element of the array is %a[1]% </div><div class="line">echo The third element of the array is %a[2]%</div></pre></td></tr></table></figure>
<h2 id="批处理压缩与解压缩"><a href="#批处理压缩与解压缩" class="headerlink" title="批处理压缩与解压缩"></a>批处理压缩与解压缩</h2><p>&emsp;&emsp;在windows环境中，我们不能方便地像隔壁那样，直接调用zip和unzip命令进行压缩和解压，需要下载相应的程序来帮助我们完成这一过程。<a href="http://stahlworks.com/dev/index.php?tool=zipunzip" target="_blank" rel="external">下载地址：</a><a href="http://stahlworks.com/dev/index.php?tool=zipunzip" target="_blank" rel="external">http://stahlworks.com/dev/index.php?tool=zipunzip</a></p>
<p>&emsp;&emsp;下载完两个exe文件之后，我们将它放在与脚本相同目录下或者是<code>C:/Windows</code>目录下，推荐后者，然后就可以使用压缩与解压缩命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zip -r fileName.apk ./*</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的命令是将当前目录压缩为指定名称的apk文件，其中参数-r为递归压缩子目录下所有文件。不加的话只会得到一个空的文件夹。这里需要注意的是，在打包apk的时候，我们需要cd到解压好的文件目录下进行压缩，否则会出现压缩好之后的apk因为打开后是一个文件夹，不是标准apk目录结构的情况而无法进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -o -d /path fileName.apk</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的命令是将指定apk解压到指定的目录中，-o是不提示覆盖，-d是指定路径。</p>
<h2 id="关于apk签名"><a href="#关于apk签名" class="headerlink" title="关于apk签名"></a>关于apk签名</h2><p>&emsp;&emsp;我们可以通过下面的方法对apk的签名进行查看：解压出位于<code>META-INF</code>位置下的CERT.RSA文件，使用命令查看:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -printcert -file [file path]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;想要对apk重新签名，需要删除apk中原先的签名文件。有博客说删掉两个文件就行，但是会出现错误。<code>jarsigner: java.lang.SecurityException:SHA1 digest error for META-INF/CERT.RSA</code>根据stack overflow上某个老哥给的答案：<a href="https://stackoverflow.com/questions/37513084/jarsigner-java-lang-securityexceptionsha1-digest-error-for-meta-inf-cert-rsa-a" target="_blank" rel="external">https://stackoverflow.com/questions/37513084/jarsigner-java-lang-securityexceptionsha1-digest-error-for-meta-inf-cert-rsa-a</a>我们需要删除整个META-INF文件进行</p>
<p>&emsp;&emsp;apk的重新签名需要项目的证书文件，后缀名为：<code>.keystores</code>，命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore [keystore path] -signedjar [out apk name].apk [current apk name].apk [alias name] -storepass [password]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里需要填写的参数分别是证书文件的路径、签名后apk名及路径、签名前apk名及路径，别名，密码。</p>
<p>&emsp;&emsp;签名完毕后，还可以对生成的apk进行验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verify [out apk name].apk</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;至此，整个工具的重点就介绍完毕了。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>&emsp;&emsp;在很多文章中，有人会推荐使用apktool的工具进行上面的一些工作，这里非常不推荐。apktool是一个java写的工具，在解包和打包过程结束后，会自动关闭当前的命令行。解包打包签名，可能就需要有三个脚本了，给工具的制作造成了很大的不便。</p>
<p>&emsp;&emsp;下面是工具的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">setlocal enabledelayedexpansion</div><div class="line"></div><div class="line">rem 拖入apk并获取其路径和文件名</div><div class="line">echo 请拖入需要处理的apk</div><div class="line">set /p input=</div><div class="line">set apkUrl=</div><div class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b %input%&apos;) do (set apkUrl=!apkUrl!%%i)</div><div class="line">set fileName=%apkUrl:.apk=%</div><div class="line"></div><div class="line">rem 解包并删除签名</div><div class="line">if exist output rmdir /s/q output</div><div class="line">md output</div><div class="line">cd output</div><div class="line">md %fileName%</div><div class="line">unzip -o -d %fileName% %input%</div><div class="line">rmdir /s/q %fileName%\META-INF</div><div class="line"></div><div class="line">rem 修改文件打包并签名</div><div class="line">for  do (</div><div class="line">[这里填写修改操作]</div><div class="line">cd !fileName!</div><div class="line">zip -r [your file name].apk ./*</div><div class="line">cd..</div><div class="line">jarsigner -verbose -keystore [keystore path] -signedjar [out apk name].apk [current apk name].apk [alias name] -storepass [password]</div><div class="line">)</div><div class="line"></div><div class="line">pause</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在这里我使用了for循环获取了解压后的文件夹名的方法，实现起来可能显得会比较扭曲。但是如果在事先不确定拖入文件名，并且打出的包对原文件名有需求的话，就得用这种方法去取了。除此之外，在进行签名的时候，签名前和签名后文件名可以是同一个，这样就不会出现新的apk，而是在原有未签名apk的基础上进行签名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在前一段时间的工作中，我得到了一个新的任务，写一个命令行工具，修改apk中的某个文件，再进行重新打包。这个过程实际上
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
      <category term="安卓" scheme="http://www.z16388.top/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
  <entry>
    <title>乐理笔记</title>
    <link href="http://www.z16388.top/2018/06/26/music/"/>
    <id>http://www.z16388.top/2018/06/26/music/</id>
    <published>2018-06-26T14:03:05.000Z</published>
    <updated>2018-06-26T14:17:03.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="调式"><a href="#调式" class="headerlink" title="调式"></a>调式</h2><p>&emsp;&emsp;调式分为升号调与降号调，升号调中的黑键用升号表示，降号调中的黑键用降号表示。</p>
<table>
<thead>
<tr>
<th style="text-align:center">升号调</th>
<th style="text-align:center">降号调</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">G、D、A、E、B、F#、C#</td>
<td style="text-align:center">F、Bb、Eb、Ab、Db、Gb、Cb</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;调子中的7个音，下面从左往右，越往右越不稳定：</p>
<table>
<thead>
<tr>
<th style="text-align:center">稳定音</th>
<th style="text-align:center">不稳定音</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1 5 3</td>
<td style="text-align:center">6 2 4 7</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;不稳定音总是倾向于稳定音的，他们的倾向分别为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1←2</div><div class="line">3←4</div><div class="line">5←6</div><div class="line">7→i</div></pre></td></tr></table></figure>
<h2 id="音程"><a href="#音程" class="headerlink" title="音程"></a>音程</h2><p>&emsp;&emsp;音程表</p>
<table>
<thead>
<tr>
<th style="text-align:center">半音数</th>
<th style="text-align:center">音程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">纯一度</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">小二度</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">大二度</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">小三度</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">大三度</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">纯四度</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">增四/减五度</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">纯五度</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">小六度</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">大六度</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">小七度</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">大七度</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">纯八度</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;调式&quot;&gt;&lt;a href=&quot;#调式&quot; class=&quot;headerlink&quot; title=&quot;调式&quot;&gt;&lt;/a&gt;调式&lt;/h
    
    </summary>
    
    
      <category term="音乐" scheme="http://www.z16388.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>关于最终幻想14演奏系统的解决方案</title>
    <link href="http://www.z16388.top/2018/06/17/midiff/"/>
    <id>http://www.z16388.top/2018/06/17/midiff/</id>
    <published>2018-06-17T10:16:20.000Z</published>
    <updated>2018-06-18T04:06:03.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MIDI键盘映射"><a href="#MIDI键盘映射" class="headerlink" title="MIDI键盘映射"></a>MIDI键盘映射</h1><blockquote>
<p>目前键盘映射不能使用组合键，4.3版本更新之后可使用。</p>
</blockquote>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>&emsp;&emsp;最终幻想14更新了4.20版本。在这个版本中，诗人的演奏系统做出了一定的更改，小键盘党的我直接报警了。最后我决定放弃这个“邪门歪道”，直接使用电钢琴进行映射，实现演奏功能。</p>
<p>&emsp;&emsp;在这里，使用到了一个MIDI键盘映射软件：Bome’s Midi Translator。</p>
<blockquote>
<p>官方网站：<a href="https://www.bome.com/products/miditranslator" target="_blank" rel="external">https://www.bome.com/products/miditranslator</a></p>
</blockquote>
<p>&emsp;&emsp;需要注意的是，Pro版本需要59刀的价格。这里，在下载的时候选择精简版。</p>
<h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p>&emsp;&emsp;首先介绍一下我所使用的硬件设备。键盘是吟飞的电钢琴，MIDI连接线是淘宝来的便宜货，连输入输出都标反了。在键盘的选择上，并没有太大的要求。因为游戏的演奏功能上只有三个八度。即使是淘宝上买来的手卷钢琴，也是可以使用的。</p>
<h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><p>&emsp;&emsp;在完成软件的安装之后，不能直接打开软件，需要给予管理员权限。</p>
<p>&emsp;&emsp;关于MIDI的输入输出端口，软件的文档有下面的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Define MIDI Ports</div><div class="line">     Next, specify the MIDI input and output ports you will be using. The MIDI OUT ports will be the ports to which translated MIDI messages are sent to.</div><div class="line"></div><div class="line">    The MIDI IN port will be used as the source of MIDI data, typically connecting with an external MIDI device, e.g. via USB or a MIDI interface on a sound card. Select the appropriate MIDI input source(s) by checking it.</div><div class="line"></div><div class="line">    You can use a virtual MIDI port here if you are setting up a translator for a software sequencer or other audio application that interfaces with MIDI. Check the virtual MIDI port as the output device and then select it as the MIDI input port in your 3rd party application in order to have Bome MIDI Translator control it. Use the alias “Bome Virtual Port 1” (in italics ) instead</div><div class="line">of the direct device.</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;把输入端口设置为你的MIDI设备。需要注意的是，MIDI端口只能有一个应用去占用。像我为了测试MIDI设备是否能够使用，打开了Cubase，软件就提示了无法设置该端口的问题。设置完端口之后，将后面的状态设置为启用。这时候很明显可以看到，左下角输入的端口在闪光。</p>
<p>&emsp;&emsp;之后是输出端口。原文中提到，如果想要使用MIDI映射，就要把输出端口设置为软件提供的一个虚拟端口。如果是Pro版本，需要在设置里，选择选项“Bome Virtual Port 1”即可。除此之外，还要像ASIO声卡一样设置跳线。在这里，将你设备的端口跳到“Bome Virtual Port 1”。跳线设置完之后，会看到输出端口的指示灯也会闪。我们使用的基础班只要将输出端口设置为空即可。</p>
<h2 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h2><p>&emsp;&emsp;这里的设置分为三步。</p>
<p>&emsp;&emsp;第一步是指定映射名。这里我使用简谱表示唱名，<code>#</code>和字母<code>b</code>分别表示升降调，符号<code>+</code>和<code>-</code>分别表示升降八度。</p>
<p>&emsp;&emsp;第二步是键盘抓取。勾上抓取，然后按MIDI上相应的键，截取。PRO版还有按压时间这一属性，这里忽略掉。</p>
<p>&emsp;&emsp;最后一步是设置映射的按键。</p>
<h1 id="小键盘按键替换"><a href="#小键盘按键替换" class="headerlink" title="小键盘按键替换"></a>小键盘按键替换</h1><p>&emsp;&emsp;在这个版本中，无法将演奏按钮设置为小键盘，这让我这种小键盘党十分头疼。这里使用AutoHotKey脚本，解决这个问题。</p>
<p>&emsp;&emsp;需要注意的是，脚本生成的可执行文件无法兼容win7以上系统。这里要设置兼容性为win7,并给予管理员权限。</p>
<p>&emsp;&emsp;脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Numpad1::q</div><div class="line">Numpad2::w</div><div class="line">Numpad3::e</div><div class="line">Numpad4::r</div><div class="line">Numpad5::t</div><div class="line">Numpad6::y</div><div class="line">Numpad7::u</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;脚本需要使用AutoHotKey进行编译。下载地址：<a href="https://www.autohotkey.com/" target="_blank" rel="external">https://www.autohotkey.com/</a></p>
<p>&emsp;&emsp;也可以使用我编译好的可执行程序：<a href="https://pan.baidu.com/s/1nmDNgbDi3lcZXMVttSU_Mw" target="_blank" rel="external">https://pan.baidu.com/s/1nmDNgbDi3lcZXMVttSU_Mw</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MIDI键盘映射&quot;&gt;&lt;a href=&quot;#MIDI键盘映射&quot; class=&quot;headerlink&quot; title=&quot;MIDI键盘映射&quot;&gt;&lt;/a&gt;MIDI键盘映射&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;目前键盘映射不能使用组合键，4.3版本更新之后可使用。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="MIDI" scheme="http://www.z16388.top/tags/MIDI/"/>
    
      <category term="AutoHotkey" scheme="http://www.z16388.top/tags/AutoHotkey/"/>
    
      <category term="游戏" scheme="http://www.z16388.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="音乐" scheme="http://www.z16388.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>系统导引修改</title>
    <link href="http://www.z16388.top/2018/03/13/daoyin/"/>
    <id>http://www.z16388.top/2018/03/13/daoyin/</id>
    <published>2018-03-13T06:11:43.000Z</published>
    <updated>2018-03-13T06:23:24.039Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;寒假的时候给电脑换了个系统，出现了原系统导引没有删除的问题。因为是不同的系统，所以还是比较容易能够分辨的。</p>
<blockquote>
<p>右键“此电脑”-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;启动和故障恢复-&gt;设置-&gt;默认操作系统</p>
</blockquote>
<p>&emsp;&emsp;在这里可以根据需求进行更改，修改多系统选择时间，还是默认进入哪一个。但是Win10的兼容性不是很好，我的外置声卡驱动，还有音频编辑软件都无法正常安装与使用，我便在开学时换回了win8.1。但是问题出现了，两个win8.1难以分辨，而且留着一个没用的导引也十分没有必要。下面就是删除多余导引的方法。（不需要其他软件）</p>
<blockquote>
<p>运行命令提示符（管理员权限）<br>输入命令<code>easybcd</code>查看导引<br>当前的导引会标记为<code>current</code>，并且会有系统盘的路径信息，复制想要删除的导引的标识符，就是用大括号括起来的一长串。<br>执行<code>bcdedit /delete {标识符}</code>完成删除</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;寒假的时候给电脑换了个系统，出现了原系统导引没有删除的问题。因为是不同的系统，所以还是比较容易能够分辨的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;右键“此电脑”-&amp;gt;属性-&amp;gt;高级系统设置-&amp;gt;高级-&amp;gt;启动和故障恢复-&amp;gt;设置
    
    </summary>
    
    
      <category term="系统" scheme="http://www.z16388.top/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】2.6 文件操作</title>
    <link href="http://www.z16388.top/2018/03/06/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%912-6%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.z16388.top/2018/03/06/【ACM教程】2-6文件操作/</id>
    <published>2018-03-06T05:57:13.000Z</published>
    <updated>2018-03-13T08:47:12.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六节-文件操作"><a href="#第六节-文件操作" class="headerlink" title="第六节 文件操作"></a>第六节 文件操作</h1><p>&emsp;&emsp;在算法类竞赛的过程中，还需要我们掌握文件操作。</p>
<p>&emsp;&emsp;在去年的蓝桥杯省赛中，第一道题需要处理大量的数据。如果每次都要进行大量的数据输入操作，会花费很多时间。这个时候，把数据存放到文本文档中去，再使用文件操作读取数据，进行计算，能够节省大量的时间。</p>
<p>&emsp;&emsp;除此之外，在调试程序时，也可以将测试数据保存在文件中读取，可以省去每次编译时，数据输入的时间。</p>
<p>&emsp;&emsp;C语言使用文件指针来进行文件的读写。</p>
<p>&emsp;&emsp;首先是创建文件指针：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FILE *fin;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的FILE一定要大写，用于存放文件的变量一定是指针类型。</p>
<p>&emsp;&emsp;接下来要对文件指针初始化：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fin = fopen(<span class="string">"xx.txt"</span>,<span class="string">"w"</span>);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的fopen()函数拥有两个参数，一个是用于读写的用户名，另一个就是读写的参数，这个参数由以下几种字母组成：</p>
<blockquote>
<p>r(read): 只读<br>w(write): 只写<br>a(append): 追加<br>t(text): 文本文件，可省略不写<br>b(binary): 二进制文件<br>+: 读和写</p>
</blockquote>
<p>&emsp;&emsp;我们通常使用w创建输出和输出两个文档，然后将输入文档改为r即可。</p>
<p>&emsp;&emsp;下面是一个简单的A+B问题的文件操作实现：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    FILE *fin,*fout;</div><div class="line">    <span class="keyword">int</span> a,b,res;</div><div class="line">    fin = fopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>);</div><div class="line">    fout = fopen(<span class="string">"out.txt"</span>,<span class="string">"w"</span>);</div><div class="line">    <span class="built_in">fscanf</span>(fin,<span class="string">"%d %d"</span>,&amp;a,&amp;b);</div><div class="line">    res = a+b;</div><div class="line">    <span class="built_in">fprintf</span>(fout,<span class="string">"%d\n"</span>,res);</div><div class="line">    fclose(fin);</div><div class="line">    fclose(fout);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六节-文件操作&quot;&gt;&lt;a href=&quot;#第六节-文件操作&quot; class=&quot;headerlink&quot; title=&quot;第六节 文件操作&quot;&gt;&lt;/a&gt;第六节 文件操作&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在算法类竞赛的过程中，还需要我们掌握文件操作。&lt;/p&gt;
&lt;p&gt;&amp;em
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.top/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.top/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
      <category term="动态规划" scheme="http://www.z16388.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Lua学习笔记</title>
    <link href="http://www.z16388.top/2018/02/25/Luanote/"/>
    <id>http://www.z16388.top/2018/02/25/Luanote/</id>
    <published>2018-02-25T03:32:12.000Z</published>
    <updated>2018-03-15T09:22:34.303Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;学习资料地址：<a href="http://www.runoob.com/lua/lua-tutorial.html" target="_blank" rel="external">http://www.runoob.com/lua/lua-tutorial.html</a></p>
<h1 id="环境安装与使用"><a href="#环境安装与使用" class="headerlink" title="环境安装与使用"></a>环境安装与使用</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>&emsp;&emsp;在Windows环境下，使用SciTE来运行Lua程序。</p>
<p>&emsp;&emsp;项目GitHub地址：<a href="https://github.com/rjpcomputing/luaforwindows/releases" target="_blank" rel="external">https://github.com/rjpcomputing/luaforwindows/releases</a></p>
<p>&emsp;&emsp;上面的官方下载无法保证下载速度，我使用的是菜鸟教程分流的下载地址：<a href="http://static.runoob.com/download/LuaForWindows_v5.1.4-46.exe" target="_blank" rel="external">http://static.runoob.com/download/LuaForWindows_v5.1.4-46.exe</a></p>
<h2 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h2><p>&emsp;&emsp;和Python一样，Lua也有交互式的编程方式。在命令行中输入<code>lua</code>或者<code>lua -i</code>启用。</p>
<p>&emsp;&emsp;同时也可以使用脚本式编程，就是将代码存放在一个lua文件中，命令行执行<code>lua xxx.lua</code>即可。</p>
<p>&emsp;&emsp;需要注意的是，交互式编程状态下不能使用lua命令，会出现下面的错误，这一点我也是犯了好多次：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stdin:1: &apos;=&apos; expected near &apos;hello&apos;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;教程中没有提到怎样退出lua环境 。<code>os.exit()</code>退出。</p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>&emsp;&emsp;单行注释:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;多行注释：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--[[</span></div><div class="line">XXX</div><div class="line">XXX</div><div class="line">]]<span class="comment">--</span></div></pre></td></tr></table></figure>
<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"hello world!"</span>)</div></pre></td></tr></table></figure>
<h1 id="数据类型与变量"><a href="#数据类型与变量" class="headerlink" title="数据类型与变量"></a>数据类型与变量</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;Lua有三种变量类型：全局变量，局部变量和表中的域。默认情况下，变量都是全局变量，函数里面没有做特殊声明的变量也都是全局变量。全局变量不需要声明，直接赋值即创建了这个全局变量。如果访问了一个没有创建的变量，会返回一个nil。同样，如果想要删除一个变量，直接赋值nil即可。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">print</span>(b)</div><div class="line"><span class="keyword">nil</span></div><div class="line">&gt; b=<span class="number">10</span></div><div class="line">&gt; <span class="built_in">print</span>(b)</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;如果想要一个局部变量，需要使用<code>local</code>显式声明：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> b = <span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><p>&emsp;&emsp;赋值时改变一个变量的值和改变表域的最基本方法。同大多数编程语言类似，Lua使用从右到左的赋值方式。除此之外，还能够实现多个变量同时赋值：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, b = <span class="number">10</span>, <span class="number">2</span>*x</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;上面的语句在功能上，等同于：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span></div><div class="line">b = <span class="number">2</span>*x</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在对多个变量进行赋值时，Lua采用的计算方式是<strong>先计算右侧的值，再进行赋值</strong>的操作。所以再Lua中，实现两个变量值的交换只需要一行代码：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x, y = y, x</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，当变量的个数和数值的个数不一致时，Lua会遵循这个策略：</p>
<ol>
<li>当 变量个数 &gt; 值的个数 时，右侧没有指定值的变量赋值为nil</li>
<li>当 变量个数 &lt; 值的个数 时，右侧多余的值会被忽略掉。</li>
</ol>
<p>&emsp;&emsp;所以比较容易出现的错误是，在对多个变量进行相同赋值时：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a, b, c = <span class="number">0</span></div><div class="line"><span class="built_in">print</span>(a,b,c)             <span class="comment">--&gt; 0   nil   nil</span></div><div class="line">a, b, c = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line"><span class="built_in">print</span>(a,b,c)             <span class="comment">--&gt; 0   0   0</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;多赋值语句，除了用在上面的值交换的过程中之外，还常用于记录函数的多个返回值。Lua中，函数可以有多个返回值。如果想要将函数<code>f()</code>的两个返回值存放到全局变量<code>a</code>和<code>b</code>中去，可以使用下面的语句：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, b = f()</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;上面的语句，实现了将函数的第一个返回值给a，第二个给b。</p>
<p>&emsp;&emsp;虽然Lua定义全局变量比较方便，但是应当尽可能地使用局部变量。因为局部变量的访问时间要比全局变量更快，同时也避免了变量命名的冲突。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;以下是常见的集中变量类型。</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">nil</td>
<td style="text-align:center">无效值，没有赋值的变量都会返回nil</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">布尔</td>
</tr>
<tr>
<td style="text-align:center">number</td>
<td style="text-align:center">双精度浮点型</td>
</tr>
<tr>
<td style="text-align:center">string</td>
<td style="text-align:center">字符串，用单引号或双引号括起来</td>
</tr>
<tr>
<td style="text-align:center">function</td>
<td style="text-align:center">由C或Lua编写的函数</td>
</tr>
<tr>
<td style="text-align:center">userdata</td>
<td style="text-align:center">*表示任意存储在变量中的C数据结构</td>
</tr>
<tr>
<td style="text-align:center">thread</td>
<td style="text-align:center">*表示执行的独立线路，用于执行协同程序</td>
</tr>
<tr>
<td style="text-align:center">table</td>
<td style="text-align:center">*Lua 中的表（table）其实是一个”关联数组”（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过”构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;可以使用type函数测试给定变量或常量的类型：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">"Hello world"</span>))      <span class="comment">--&gt; string</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">10.4</span>*<span class="number">3</span>))             <span class="comment">--&gt; number</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">print</span>))              <span class="comment">--&gt; function</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))               <span class="comment">--&gt; function</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="keyword">true</span>))               <span class="comment">--&gt; boolean</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="keyword">nil</span>))                <span class="comment">--&gt; nil</span></div><div class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>(X)))            <span class="comment">--&gt; string</span></div></pre></td></tr></table></figure>
<h3 id="nil（空）"><a href="#nil（空）" class="headerlink" title="nil（空）"></a>nil（空）</h3><p>&emsp;&emsp;nil类型表示没有任何有效值，只有一个值，nil。打印一个没有赋值的变量会输出nil。对于全局变量和table变量，nil可以起到删除的作用。全局变量或者 table表里的变量赋一个nil值，等同于将他们删除。</p>
<p>&emsp;&emsp;nil在比较时，需要使用双引号括起来。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">type</span>(X)</div><div class="line"><span class="keyword">nil</span></div><div class="line">&gt; <span class="built_in">type</span>(X)==<span class="keyword">nil</span></div><div class="line"><span class="keyword">false</span></div><div class="line">&gt; <span class="built_in">type</span>(X)==<span class="string">"nil"</span></div><div class="line"><span class="keyword">true</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="boolean（布尔）"><a href="#boolean（布尔）" class="headerlink" title="boolean（布尔）"></a>boolean（布尔）</h3><p>&emsp;&emsp;Lua的布尔值与其他语言有一个显著的区别，它将false和nil看作假，其他的值，<strong>包括0，都为真</strong>。长时间使用其他编程语言的人可能会很难反应过来。</p>
<p>&emsp;&emsp;除此之外，在进行逻辑判断时也和其他语言有很多不同。进行或、与运算时，如0 or false的值就为0，10 and 20返回值就为20。</p>
<h3 id="number（数字）"><a href="#number（数字）" class="headerlink" title="number（数字）"></a>number（数字）</h3><p>&emsp;&emsp;Lua默认只有一种number类型，即双精度浮点型。</p>
<h3 id="string（字符串）"><a href="#string（字符串）" class="headerlink" title="string（字符串）"></a>string（字符串）</h3><p>&emsp;&emsp;字符串由一对单引号或者双引号括起来。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string1 = <span class="string">"this is string1"</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;也可以使用两个方括号<code>[[]]</code>来表示一块字符串。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html = <span class="string">[[</span></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;a href="http://www.z16388.com/"&gt;崎径 其镜&lt;/a&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">]]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;运行时，Lua会自动在string和number之间进行格式转换。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"10"</span>+ <span class="number">1</span>)     <span class="comment">--&gt; 11</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"10 + 1"</span>)  <span class="comment">--&gt; 10 + 1</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"hello"</span>+ <span class="number">1</span>)    <span class="comment">-- 报错 (无法转换 "hello")</span></div><div class="line"><span class="built_in">print</span>(<span class="number">10</span> .. <span class="number">20</span>) <span class="comment">--&gt; 1020</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在一个数字后写<code>..</code>时应该<strong>加空格，防止被错误解释</strong>。</p>
<p>&emsp;&emsp;可以使用两点<code>..</code>来连接两个字符串：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">print</span>(<span class="string">"a"</span> .. <span class="string">'b'</span>)</div><div class="line">ab</div><div class="line">&gt; <span class="built_in">print</span>(<span class="number">157</span> .. <span class="number">428</span>)</div><div class="line"><span class="number">157428</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;可以使用<code>#</code>来计算字符串的长度：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; len = <span class="string">"www.z16388.top"</span></div><div class="line">&gt; <span class="built_in">print</span>(#len)</div><div class="line"><span class="number">14</span></div><div class="line">&gt; <span class="built_in">print</span>(#<span class="string">"www.z16388.top"</span>)</div><div class="line"><span class="number">14</span></div></pre></td></tr></table></figure>
<h3 id="table（表）"><a href="#table（表）" class="headerlink" title="table（表）"></a>table（表）</h3><p>&emsp;&emsp;表是一个关联数组，可以创建空表，也可以在创建的时候初始化：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> tbl1 = &#123;&#125;</div><div class="line"><span class="keyword">local</span> tbl2 = &#123;<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"grape"</span>&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;数组的索引可以是数字或者字符串：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a[key] = <span class="number">22</span></div><div class="line">a[<span class="number">2</span>] = <span class="number">11</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;需要注意的是，与其他语言不同，<strong>Lua默认初始索引是从1开始的！！！！</strong></p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> tbl = &#123;<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"grape"</span>&#125;</div><div class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> <span class="built_in">pairs</span>(tbl) <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"Key"</span>, key)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;程序的运行结果是：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Key    <span class="number">1</span></div><div class="line">Key    <span class="number">2</span></div><div class="line">Key    <span class="number">3</span></div><div class="line">Key    <span class="number">4</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;对table的索引除了使用国际惯例<code>[]</code>之外，还可以使用<code>.</code>进行操作。需要注意的是，<strong>使用点号来索引时，索引的关键字不能为数字</strong>。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; site = &#123;&#125;</div><div class="line">&gt; site[<span class="string">"key"</span>] = <span class="string">"www.z16388.top"</span></div><div class="line">&gt; <span class="built_in">print</span>(site[<span class="string">"key"</span>])</div><div class="line">www.z16388.top</div><div class="line">&gt; <span class="built_in">print</span>(site.key)</div><div class="line">www.z16388.top</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;最后，table不会固定长度,没有被赋值的部分，返回值都为nil。如果直接使用for循环进行遍历，循环会在遇到nil值时终止，可能无法实现对整个数组的遍历。（如果其中有空值的话）具体的解决方法在table部分给出。</p>
<h3 id="function（函数）"><a href="#function（函数）" class="headerlink" title="function（函数）"></a>function（函数）</h3><p>&emsp;&emsp;在Lua中，函数被看作第一类值，函数可以存在变量里。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial1</span><span class="params">(n)</span></span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> n * factorial1(n - <span class="number">1</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(factorial1(<span class="number">5</span>))</div><div class="line">factorial2 = factorial1</div><div class="line"><span class="built_in">print</span>(factorial2(<span class="number">5</span>))</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;可以以匿名函数的方式，通过参数传递。函数之所以有名字，就是为了方便进行调用。而只使用一次的函数，则可以不起名字，也就是匿名函数。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span><span class="params">(tab,fun)</span></span></div><div class="line">    <span class="keyword">for</span> k ,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></div><div class="line">        <span class="built_in">print</span>(fun(k,v));</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"></div><div class="line">tab=&#123;key1=<span class="string">"val1"</span>,key2=<span class="string">"val2"</span>&#125;</div><div class="line">testFun(tab,</div><div class="line"><span class="function"><span class="keyword">function</span><span class="params">(key,val)</span></span><span class="comment">--匿名函数</span></div><div class="line">    <span class="keyword">return</span> key..<span class="string">"="</span>..val</div><div class="line"><span class="keyword">end</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="循环与流程控制"><a href="#循环与流程控制" class="headerlink" title="循环与流程控制"></a>循环与流程控制</h1><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>&emsp;&emsp;条件为<code>true</code>时会重复执行循环体的语句。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(condition)</div><div class="line"><span class="keyword">do</span></div><div class="line">   statements</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>&emsp;&emsp;for循环是可以制定循环体执行次数的循环语句。Lua中的for循环需要相当地注意，分为两大类：</p>
<h4 id="数值for循环"><a href="#数值for循环" class="headerlink" title="数值for循环"></a>数值for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> var=exp1,exp2,exp3 <span class="keyword">do</span>  </div><div class="line">    &lt;执行体&gt;  </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>exp1</code>为初值，<code>exp2</code>为终值，<code>exp3</code>为步长。若<code>exp3</code>不指定，值默认为1。需要注意的是，表达式中<strong>三个参数的值都会在循环开始前一次性求值，以后不再进行求值</strong>。</p>
<p>&emsp;&emsp;参数</p>
<h4 id="泛型for循环"><a href="#泛型for循环" class="headerlink" title="泛型for循环"></a>泛型for循环</h4><p>&emsp;&emsp;泛型for循环，通过一个迭代器来遍历所有的值，与C++类似。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) </div><div class="line">    <span class="keyword">do</span> <span class="built_in">print</span>(v) </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;其中，<code>i</code>是索引，<code>v</code>是索引对应的元素的值，ipairs是Lua提供的一个迭代器函数，用来迭代数组。它的参数<code>a</code>就是数组名。下面是一个对数组进行泛型for循环输出的例子。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">days = &#123;<span class="string">"Suanday"</span>,<span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wednesday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span>&#125;  </div><div class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(days) <span class="keyword">do</span>  </div><div class="line">    <span class="built_in">print</span>(v) </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="repeat-…-until循环"><a href="#repeat-…-until循环" class="headerlink" title="repeat … until循环"></a>repeat … until循环</h3><p>&emsp;&emsp;即do … while，重复执行循环体到循环条件为真时。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repeat</span></div><div class="line">   statements</div><div class="line"><span class="keyword">until</span>( condition )</div></pre></td></tr></table></figure>
<h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>&emsp;&emsp;Lua支持break语句。</p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>&emsp;&emsp;if语句的格式：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(布尔表达式)</div><div class="line"><span class="keyword">then</span></div><div class="line">   <span class="comment">--[ 在布尔表达式为 true 时执行的语句 --]</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;if … else 语句格式：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(布尔表达式)</div><div class="line"><span class="keyword">then</span></div><div class="line">   <span class="comment">--[ 布尔表达式为 true 时执行该语句块 --]</span></div><div class="line"><span class="keyword">else</span></div><div class="line">   <span class="comment">--[ 布尔表达式为 false 时执行该语句块 --]</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;需要注意的是，Lua中<strong>0也为真值</strong>，只有false和nil为假。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&emsp;&emsp;Lua中，函数的标准格式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">optional_function_scope <span class="function"><span class="keyword">function</span> <span class="title">function_name</span><span class="params">( argument1, argument2, argument3..., argumentn)</span></span></div><div class="line">    function_body</div><div class="line">    <span class="keyword">return</span> result_params_comma_separated</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li><code>optional_function_scope</code>这个参数是可选的，表示函数是全局的还是局部的。默认为全局函数，设置为局部函数需要加关键字local</li>
<li><code>function_name</code>函数名</li>
<li><code>argument</code>函数的参数，用逗号隔开，也可以不带参数</li>
<li><code>function_body</code>函数体</li>
<li><code>result_params_comma_separated</code>返回值，可以有多个。</li>
</ol>
</blockquote>
<p>&emsp;&emsp;<strong>函数可以作为参数</strong>。</p>
<h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><p>&emsp;&emsp;Lua中的函数可以有多个返回值。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> res1,res2;</div></pre></td></tr></table></figure>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>&emsp;&emsp;Lua中的函数可以接受可变数目的参数，用三点<code>…</code>来代表多个参数。计算平均值的程序，可以这样写：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">average</span><span class="params">(...)</span></span></div><div class="line">   result = <span class="number">0</span></div><div class="line">   <span class="keyword">local</span> arg=&#123;...&#125;</div><div class="line">   <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arg) <span class="keyword">do</span></div><div class="line">      result = result + v</div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="built_in">print</span>(<span class="string">"总共传入 "</span> .. #arg .. <span class="string">" 个数"</span>)</div><div class="line">   <span class="keyword">return</span> result/#arg</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"平均值为"</span>,average(<span class="number">10</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在新的版本里，<code>#</code>不能用于返回数组元素的个数了，而是需要使用：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">select</span>(<span class="string">"#"</span>,...)</div></pre></td></tr></table></figure>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p>&emsp;&emsp;常用的算术运算符与其他语言类似。需要注意的是，Lua里没有整数，所以如果想要取整操作，必须要进行取整操作：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x = <span class="built_in">math</span>.ceil(x)</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;需要注意的是，这里的取整仍然是向上取整。也就是说，无论小数部分有多小，取整的结果都是要比原数的整数部分大1。</p>
<p>&emsp;&emsp;除此之外，常用的操作应该还有数据精度的控制：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">string</span>.format(<span class="string">"%.2f"</span>,dt)</div></pre></td></tr></table></figure>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">~=</td>
<td style="text-align:center">不等</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">and</td>
<td style="text-align:center">与</td>
</tr>
<tr>
<td style="text-align:center">or</td>
<td style="text-align:center">或</td>
</tr>
<tr>
<td style="text-align:center">not</td>
<td style="text-align:center">非</td>
</tr>
</tbody>
</table>
<h2 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:center">连结两个字符串</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">返回字符串或表的长度</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;<code>#</code>运算符，获取的表的长度实际上获取的是表最大的索引值。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">tab1 = &#123;<span class="string">"1"</span>,<span class="string">"2"</span>&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"tab1长度"</span>..#tab1)</div><div class="line">tab2 = &#123;key1=<span class="string">"1"</span>,<span class="string">"2"</span>&#125;</div><div class="line"><span class="built_in">print</span>(<span class="string">"tab2长度"</span>..#tab2)</div><div class="line">tab3 = &#123;&#125;</div><div class="line">tab3[<span class="number">1</span>]=<span class="string">"1"</span></div><div class="line">tab3[<span class="number">2</span>]=<span class="string">"2"</span></div><div class="line">tab3[<span class="number">4</span>]=<span class="string">"4"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"tab3长度"</span>..#tab3)</div><div class="line"></div><div class="line">tab1长度<span class="number">2</span></div><div class="line">tab2长度<span class="number">1</span></div><div class="line">tab3长度<span class="number">4</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;但是当下表的值，<strong>大小相差超过1的时候，就会停止计算</strong>。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tab3=&#123;&#125;</div><div class="line">tab3[<span class="number">1</span>]=<span class="string">"1"</span></div><div class="line">tab3[<span class="number">2</span>]=<span class="string">"2"</span></div><div class="line">tab3[<span class="number">5</span>]=<span class="string">"5"</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"tab3的长度"</span>,#tab3)</div><div class="line"></div><div class="line">tab3的长度    <span class="number">2</span></div></pre></td></tr></table></figure>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>&emsp;&emsp;在原口诀的基础上，字符串连接运算符的优先级在算数运算符和关系运算符之间。</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>&emsp;&emsp;共有三种类型</p>
<ol>
<li>单引号括起来</li>
<li>双引号括起来</li>
<li><code>[[]]</code>括起来</li>
</ol>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">uper(str)</td>
<td style="text-align:center">全部转为大写字母</td>
</tr>
<tr>
<td style="text-align:center">lower(str)</td>
<td style="text-align:center">全部转为小写字母</td>
</tr>
<tr>
<td style="text-align:center">len(str)</td>
<td style="text-align:center">计算长度</td>
</tr>
<tr>
<td style="text-align:center">gsub(str,str1,str2,num)</td>
<td style="text-align:center">将str中的str1，替换为str2，替换num个，num可以省略</td>
</tr>
<tr>
<td style="text-align:center">find(str,str1,[init, [end]])</td>
<td style="text-align:center">在str中搜索str1，返回其位置。如果不存在返回nil。第三个参数为索引</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;字符串翻转</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">string</span>.reverse(<span class="string">"Lua"</span>)</div><div class="line">auL</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;字符串格式化，和C的输出类似</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">string</span>.format(<span class="string">"the value is:%d"</span>,<span class="number">4</span>)</div><div class="line">the value is:<span class="number">4</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>char()</code>函数，将整数按照ASCII码转换成对应的符号；<code>byte(str,num)</code>将第num个字幕转换为ASCII码，默认是第一个。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">string</span>.char(<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>)</div><div class="line">abcd</div><div class="line">&gt; <span class="built_in">string</span>.byte(<span class="string">"ABCD"</span>,<span class="number">4</span>)</div><div class="line"><span class="number">68</span></div><div class="line">&gt; <span class="built_in">string</span>.byte(<span class="string">"ABCD"</span>)</div><div class="line"><span class="number">65</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>rep(string,n)</code>将字符串复制n次。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">string</span>.rep(<span class="string">"abcd"</span>,<span class="number">2</span>)</div><div class="line">abcdabcd</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;<code>..</code>可以用于连接字符串：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="built_in">print</span>(<span class="string">"FF"</span>..<span class="string">"14"</span>)</div><div class="line">FF14</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;原课程笔记中提到了两个比较有用的程序。一个是将阿拉伯数字转换成大写的中文数字，另一个是移除一个字符串中的汉字字符和符号。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">NumToCN</span><span class="params">(num)</span></span></div><div class="line">    <span class="keyword">local</span> size = #<span class="built_in">tostring</span>(num)</div><div class="line">    <span class="keyword">local</span> CN = <span class="string">""</span></div><div class="line">    <span class="keyword">local</span> StrCN = &#123;<span class="string">"一"</span>,<span class="string">"二"</span>,<span class="string">"三"</span>,<span class="string">"四"</span>,<span class="string">"五"</span>,<span class="string">"六"</span>,<span class="string">"七"</span>,<span class="string">"八"</span>,<span class="string">"九"</span>&#125;</div><div class="line">    <span class="keyword">for</span> i = <span class="number">1</span> , size <span class="keyword">do</span></div><div class="line">        CN = CN .. StrCN[<span class="built_in">tonumber</span>(<span class="built_in">string</span>.sub(<span class="built_in">tostring</span>(num), i , i))]</div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> CN</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="built_in">print</span>(NumToCN(<span class="number">56665</span>))</div></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">StrSplit</span><span class="params">(inputstr, sep)</span></span></div><div class="line">    <span class="keyword">if</span> sep == <span class="keyword">nil</span> <span class="keyword">then</span></div><div class="line">      sep = <span class="string">"%s"</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">local</span> t=&#123;&#125;</div><div class="line">    <span class="keyword">local</span> i=<span class="number">1</span></div><div class="line">    <span class="keyword">for</span> str <span class="keyword">in</span> <span class="built_in">string</span>.gmatch(inputstr, <span class="string">"([^"</span>..sep..<span class="string">"]+)"</span>) <span class="keyword">do</span></div><div class="line">       t[i] = str</div><div class="line">       i = i + <span class="number">1</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> t</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> a = <span class="string">"23245023496830,汉字。。。。"</span></div><div class="line"><span class="keyword">local</span> b = <span class="string">":"</span></div><div class="line">b = StrSplit(a,<span class="string">","</span>)</div><div class="line"><span class="built_in">print</span>(b[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;数组就是同一类型数据，按照一定顺序排列的集合。数组可以是一维的，也可以是多维的。</p>
<p>&emsp;&emsp;Lua中的数组的索引键值可以使用整数表示,数组的大小是不固定的。</p>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p>&emsp;&emsp;一维数组是最简单的数组，逻辑结构是线性表。一维数组可以使用for循环输出数组中的元素：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array = &#123;<span class="string">"Hello"</span>, <span class="string">"World!"</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i= <span class="number">0</span>, <span class="number">2</span> <span class="keyword">do</span></div><div class="line">   <span class="built_in">print</span>(array[i])</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;Lua的索引默认从1开始，可以指定从0甚至从负数开始，索引指定的位置没有数值返回nil。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i= <span class="number">-2</span>, <span class="number">2</span> <span class="keyword">do</span></div><div class="line">   array[i] = i *<span class="number">2</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i = <span class="number">-2</span>,<span class="number">2</span> <span class="keyword">do</span></div><div class="line">   <span class="built_in">print</span>(array[i])</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>&emsp;&emsp;多维数组分为两种。数组中包含数组，或者是一维数组的索引键对应一个数组。</p>
<p>&emsp;&emsp;三行三列多维数组：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 初始化数组</span></div><div class="line">array = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></div><div class="line">   array[i] = &#123;&#125;</div><div class="line">      <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></div><div class="line">         array[i][j] = i*j</div><div class="line">      <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- 访问数组</span></div><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></div><div class="line">   <span class="keyword">for</span> j=<span class="number">1</span>,<span class="number">3</span> <span class="keyword">do</span></div><div class="line">      <span class="built_in">print</span>(array[i][j])</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;不同索引键的三行三列阵列多维数组：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 初始化数组</span></div><div class="line">array = &#123;&#125;</div><div class="line">maxRows = <span class="number">3</span></div><div class="line">maxColumns = <span class="number">3</span></div><div class="line"><span class="keyword">for</span> row=<span class="number">1</span>,maxRows <span class="keyword">do</span></div><div class="line">   <span class="keyword">for</span> col=<span class="number">1</span>,maxColumns <span class="keyword">do</span></div><div class="line">      array[row*maxColumns +col] = row*col</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment">-- 访问数组</span></div><div class="line"><span class="keyword">for</span> row=<span class="number">1</span>,maxRows <span class="keyword">do</span></div><div class="line">   <span class="keyword">for</span> col=<span class="number">1</span>,maxColumns <span class="keyword">do</span></div><div class="line">      <span class="built_in">print</span>(array[row*maxColumns +col])</div><div class="line">   <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>&emsp;&emsp;迭代器（iterator）是一种对象，它能够用来遍历标准模板库容器中的部分或全部元素，每个迭代器对象代表容器中的确定的地址。迭代器是一种支持指针类型的结构，它可以遍历集合的每一个元素。</p>
<h2 id="泛型for迭代器"><a href="#泛型for迭代器" class="headerlink" title="泛型for迭代器"></a>泛型for迭代器</h2><p>&emsp;&emsp;泛型 for 在自己内部保存迭代函数，实际上它保存三个值：迭代函数、状态常量、控制变量。泛型 for 迭代器提供了集合的 key/value 对，语法格式如下：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></div><div class="line">    <span class="built_in">print</span>(k, v)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;对于一个表来说，使用泛型for迭代器，用通俗直白的话来讲，k就是索引，v是索引对应的值，t则是这个表的表名。下面是一个实例：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">array = &#123;<span class="string">"Lua"</span>, <span class="string">"Tutorial"</span>&#125;</div><div class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) </div><div class="line"><span class="keyword">do</span></div><div class="line">   <span class="built_in">print</span>(key, value)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;上面的代码输出结果为：</p>
<blockquote>
<p>1  Lua<br>2  Tutorial</p>
</blockquote>
<p>&emsp;&emsp;</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="常用的几种遍历方式"><a href="#常用的几种遍历方式" class="headerlink" title="常用的几种遍历方式"></a>常用的几种遍历方式</h2><p>&emsp;&emsp;第一种，按照key的hash值排列的顺序遍历。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(tbtest) <span class="keyword">do</span>      </div><div class="line">    XXX  </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;第二种，要求Key是连续的，从1开始的数字。ipairs只会从1开始按连续的key顺序遍历到key不连续为止。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(tbtest) <span class="keyword">do</span>      </div><div class="line">    XXX  </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;第三种，必须存在1这个key，而且是从1开始依次加一的顺序，找到一个不是1的就不再进行遍历。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i=<span class="number">1</span>, #(tbtest) <span class="keyword">do</span>      </div><div class="line">    XXX  </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;学习资料地址：&lt;a href=&quot;http://www.runoob.com/lua/lua-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.runoob.com/lua/lua-tut
    
    </summary>
    
    
      <category term="Lua" scheme="http://www.z16388.top/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Markdown编辑器Smark</title>
    <link href="http://www.z16388.top/2018/01/17/smark/"/>
    <id>http://www.z16388.top/2018/01/17/smark/</id>
    <published>2018-01-17T04:54:11.000Z</published>
    <updated>2018-01-17T05:06:03.245Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;寒假到了，毕设也做完了，回到家之后我就更换了电脑，重做了系统。经过了漫长的系统更新以及某个臃肿的IDE的安装之后，到家第二天的中午终于能够使用我的老笔记本电脑了。在开始C#学习的时候，想要开一个博客文章记录一下学习的内容的时候。发现在安装之前使用过的MarkdownPad的时候，出现了异常，研究半天也没有研究好，只得去寻找其他的Markdown编辑器。</p>
<p>&emsp;&emsp;我找到了一款名为Smark的编辑器。这是一个开源的编辑器，虽然三年没有更新，但是作为一款Markdown文本编辑器它还是很中规中矩的。</p>
<p>&emsp;&emsp;首先是安装部分。原项目的地址在<a href="https://gitee.com/elerao/Smark" target="_blank" rel="external">https://gitee.com/elerao/Smark</a>相关的一些介绍可以查看项目的具体信息。文中出现的链接部分失效，相关的下载内容有雷锋转移到了<a href="http://pan.baidu.com/s/1pJnrX5x" target="_blank" rel="external">http://pan.baidu.com/s/1pJnrX5x</a>。</p>
<p>&emsp;&emsp;我在解压后直接就能使用，不同平台和其他异常情况参见原项目的内容介绍，下面将一些使用的注意事项。</p>
<ol>
<li><p>默认情况下，编辑栏在右侧，习惯之后反而觉得很方便。</p>
</li>
<li><p>没有实时渲染的功能，只能够渲染已经保存的内容。其实这个我觉得应该是一个优势，因为我经常会有写东西写一半忘了保存的时候，这个小缺陷能够随时提醒你要进行保存。没有保存的行在编辑器中会有灰色的背景标记，比较明显。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;寒假到了，毕设也做完了，回到家之后我就更换了电脑，重做了系统。经过了漫长的系统更新以及某个臃肿的IDE的安装之后，到家第二天的中午终于能够使用我的老笔记本电脑了。在开始C#学习的时候，想要开一个博客文章记录一下学习的内容的时候。发现在安装之前使用过的
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.z16388.top/tags/hexo/"/>
    
      <category term="markdown" scheme="http://www.z16388.top/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>评论系统Valine的使用</title>
    <link href="http://www.z16388.top/2018/01/10/valine/"/>
    <id>http://www.z16388.top/2018/01/10/valine/</id>
    <published>2018-01-10T14:02:29.000Z</published>
    <updated>2018-01-10T14:26:26.872Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>&emsp;&emsp;Valine是一款基于Leancloud的快速、简洁且高效的无后端评论系统。</p>
</blockquote>
<p>&emsp;&emsp;由于某些原因，博客的一些评论系统被查水表了。忙于考研的原因，一直没有更新评论系统。今天给博客更新了一下主题，也使用了新的评论系统。</p>
<p>&emsp;&emsp;进入<a href="https://leancloud.cn" target="_blank" rel="external">https://leancloud.cn</a>，点击免费试用，注册账号。根据Valine创建好应用，配置好各种参数即可使用。</p>
<p>&emsp;&emsp;值得一提的是，头像参数最好设置为<code>‘’<code>，信息参数最好设置为用户名与邮箱。</code></code></p>
<p>&emsp;&emsp;头像信息在<a href="https://cn.gravatar.com/" target="_blank" rel="external">https://cn.gravatar.com/</a>进行设置。</p>
<blockquote>
<p>Gravatar是一图像跟随著您到访过的网站，当您在博客中留言或发表文章，它将会出现在您的名称旁。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;Valine是一款基于Leancloud的快速、简洁且高效的无后端评论系统。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;由于某些原因，博客的一些评论系统被查水表了。忙于考研的原因，一直没有更新评论系统
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.z16388.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>免备案又免费的域名转发</title>
    <link href="http://www.z16388.top/2018/01/10/urlchange/"/>
    <id>http://www.z16388.top/2018/01/10/urlchange/</id>
    <published>2018-01-10T13:47:18.000Z</published>
    <updated>2018-01-11T03:40:41.463Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;由于.win域名的不稳定，无法备案，无法被搜索引擎收录等问题，我将博客的域名换为同样廉价的.top域名。然而Github Pages只支持一个域名的绑定，这就使我之前的域名变得无法使用。但是我通过各种渠道去宣传，使用这个域名已经很久了，更换起来也比较麻烦。因此，只能维持.win域名，明进行显式的域名转发。</p>
<p>&emsp;&emsp;万网的域名转发转功能有两个条件，一是必须是万网的域名，二是域名要进行备案。Github Pages无法进行备案，因此不能直接使用万网的解析。</p>
<p>&emsp;&emsp;经过测试，米发的域名转发功能最方便。<a href="https://www.mfpad.com/" target="_blank" rel="external">https://www.mfpad.com/</a></p>
<p>&emsp;&emsp;注册账号，添加域名，然后将域名解析到米发分配的CNAME即可。当然，@和www都要进行一次记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;由于.win域名的不稳定，无法备案，无法被搜索引擎收录等问题，我将博客的域名换为同样廉价的.top域名。然而Github Pages只支持一个域名的绑定，这就使我之前的域名变得无法使用。但是我通过各种渠道去宣传，使用这个域名已经很久了，更换起来也比较
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.z16388.top/tags/hexo/"/>
    
      <category term="域名" scheme="http://www.z16388.top/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>QT笔记-基础篇</title>
    <link href="http://www.z16388.top/2017/07/12/qt/"/>
    <id>http://www.z16388.top/2017/07/12/qt/</id>
    <published>2017-07-12T07:46:28.000Z</published>
    <updated>2017-07-12T15:26:41.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h3 id="修改某个控件显示的文字（优先级比属性高）"><a href="#修改某个控件显示的文字（优先级比属性高）" class="headerlink" title="修改某个控件显示的文字（优先级比属性高）"></a>修改某个控件显示的文字（优先级比属性高）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ui-&gt;pushButton-&gt;setText(tr(<span class="string">"新的"</span>));</div><div class="line"><span class="comment">//在软件中应避免直接出现中文字符串，应该使用tr()函数包含</span></div><div class="line"><span class="comment">//这段代码如果用于控件的初始化，应当写在构造函数中</span></div></pre></td></tr></table></figure>
<h3 id="弹出警告对话框"><a href="#弹出警告对话框" class="headerlink" title="弹出警告对话框"></a>弹出警告对话框</h3><blockquote>
<p>需要使用头文件<code>QMessageBox</code></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">QMessageBox::warning(<span class="keyword">this</span>, tr(<span class="string">"警告！"</span>),</div><div class="line">                   tr(<span class="string">"用户名或密码错误！"</span>),</div><div class="line">                   QMessageBox::Yes);</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;从上面的例子我们可以看出这个函数的参数分别为：父窗口、对话框标题、对话框的显示内容、对话框中的按钮。也就是说，上面这段代码实现的是弹出一个提示密码输入错误的，带有一个Yes按钮的警告对话框。</p>
<p>&emsp;&emsp;<em> 注：需要使用头文件<code> #include <qmessagebox></qmessagebox></code> </em></p>
<h3 id="登陆窗口的创建步骤"><a href="#登陆窗口的创建步骤" class="headerlink" title="登陆窗口的创建步骤"></a>登陆窗口的创建步骤</h3><ol>
<li>在项目视图中，右键-&gt;添加文件-&gt;QT-&gt;QT设计师界面类</li>
<li>在创建好的登陆窗口中新建一个按钮，切换成“控件和槽编辑模式”，拖动按钮，放开鼠标后，会弹出配置连接对话框。将pushButton的clicked()信号和LoginDlg的accept()槽关联起来。<em>其中，accept()槽的功能是：将对话框关闭并返回QDialog::Accepted标识。</em></li>
<li>修改main函数：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"logindlg.h"</span>                      <span class="comment">// 增加登陆窗口的头文件</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    MainWindow w;</div><div class="line">    LoginDlg dlg;                          <span class="comment">// 声明</span></div><div class="line">    <span class="keyword">if</span>(dlg.exec() == QDialog::Accepted)    <span class="comment">// 利用Accepted返回值判断按钮是否被按下</span></div><div class="line">    &#123;</div><div class="line">        w.show();                          <span class="comment">// 如果被按下，显示主窗口</span></div><div class="line">        <span class="keyword">return</span> a.exec();                   <span class="comment">// 程序一直执行，直到主窗口关闭</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;                         <span class="comment">// 如果没有被按下，则不会进入主窗口，整个程序结束运行</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;在上面的代码中，我们首先创建了LoginDlg类的对象dlg，然后让dlg运行，即执行<code>exec()</code>函数，然后判断它的返回值。如果用户按下了按钮，那么返回值应该是Accepted，这个时候就会显示主窗口，并正常执行程序；否则，结束程序。</p>
<p>&emsp;&emsp;另外，在平时写程序的时候，我们需要控制Accepted返回值，可以使用<code>accept()</code>函数。以点击登陆按钮直接进入为例：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> LoginDialog::on_loginBtn_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h3><p>&emsp;&emsp;首先，新建一个文本条。然后在这个文本条所在的窗口的构造函数中将它的EchoMode属性更改为密码条就行了。例子如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ui-&gt;pswEdit-&gt;setEchoMode(QLineEdit::Password);</div></pre></td></tr></table></figure></p>
<h3 id="去除输入中的空格"><a href="#去除输入中的空格" class="headerlink" title="去除输入中的空格"></a>去除输入中的空格</h3><p>&emsp;&emsp;使用函数<code>trimmed()</code></p>
<h3 id="清除文本条、光标定位"><a href="#清除文本条、光标定位" class="headerlink" title="清除文本条、光标定位"></a>清除文本条、光标定位</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ui-&gt;usrLineEdit-&gt;clear();</div><div class="line">ui-&gt;usrLineEdit-&gt;setFocus();</div></pre></td></tr></table></figure>
<h3 id="创建新窗口之后、原窗口不消失的窗口"><a href="#创建新窗口之后、原窗口不消失的窗口" class="headerlink" title="创建新窗口之后、原窗口不消失的窗口"></a>创建新窗口之后、原窗口不消失的窗口</h3><ol>
<li>对一个按钮右键-&gt;”转到槽”；</li>
<li>选择“clicked()”信号，确定，然后自动转到当前窗口代码编辑模式中的<code>on_pushButton_clicked()</code>函数处；</li>
<li>补充函数体：（需要添加头文件<code>#include <qdialog.h></qdialog.h></code>）<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MainWindow::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">   QDialog *dlg = <span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">   dlg-&gt;show();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>&emsp;&emsp;在上面的代码中实现了创建一个对话框对象，然后让它显示出来，创建时指定的this参数表明这个对话框的父窗口是MainWindow。</p>
<p>&emsp;&emsp;这种方法，会让我们每按一次按钮，都会生成一个新的对话框。但是在这个过程中，不会造成内存泄漏或者是内存耗尽，这得益于QT的对象机制，保证了不会造成内存泄漏，而且不需要使用delete语句。</p>
<p>&emsp;&emsp;在日常使用的过程中，我们可以在<code>mainwindow.h</code>文件中先定义一个对话框对象，并在构造函数中进行创建，再在这里使用。</p>
<h3 id="创建一个退出按钮"><a href="#创建一个退出按钮" class="headerlink" title="创建一个退出按钮"></a>创建一个退出按钮</h3><ol>
<li>单击设计模式下方的信号和槽编辑器（Signals &amp; Slots Editor）中的绿色加法号添加关联；</li>
<li>发送者为按钮，信号为<code>clicked()</code>，接受者为当前窗口，操为<code>close()</code>。</li>
</ol>
<h1 id="QT-Creator常用命令"><a href="#QT-Creator常用命令" class="headerlink" title="QT Creator常用命令"></a>QT Creator常用命令</h1><p>Ctrl+滚轮：控制字体大小</p>
<p>Ctrl+1~6：切换左侧边栏，如常用的Ctrl+2(编辑)、Ctrl+3(设计)</p>
<p>Ctrl+R：编译</p>
<p>F3：控件编辑模式</p>
<p>F4：信号和槽编辑模式</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://www.kuqin.com/qtdocument/index.html" target="_blank" rel="external">API和文档</a></p>
<p><a href="http://www.qter.org/portal.php?mod=list&amp;catid=6&amp;page=1" target="_blank" rel="external">QT开源社区 教程目录</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;&lt;h3 id=&quot;修改某个控件显示的文字（优先级比属性高）&quot;&gt;&lt;a href=&quot;#修改某个控件显示的文字（优先级比属性高）&quot; cla
    
    </summary>
    
    
      <category term="QT" scheme="http://www.z16388.top/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>数学模型中的Huntington除数法</title>
    <link href="http://www.z16388.top/2017/05/19/Huntington/"/>
    <id>http://www.z16388.top/2017/05/19/Huntington/</id>
    <published>2017-05-19T14:36:44.000Z</published>
    <updated>2017-05-22T10:42:40.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本篇博客请结合《数学模型（第四版）》，姜启源版教材第八章第四节内容阅读。</p>
</blockquote>
<p>&emsp;&emsp;在处理席位分析问题时，常使用Huntington除数法来进行处理。在书中279~281的学习中，我们了解到了怎样去比较一个分配结果的不公平度，以及一个较惯例分配法更加公平的“Q值法”。那么，下面我将介绍一种处理这类问题的通用方法，Huntington除数法。</p>
<p>&emsp;&emsp;Edward Vermilye Huntington(1874~1952)，1922年获得哈佛大学博士学位。20世纪20年代，他对这个问题做了具体的研究，提出了一系列的席位分配方法。之前介绍过的“Q值法”，也作为其中的一种情况，包含在内。</p>
<p>&emsp;&emsp;假设共有<code>m</code>方分配<code>N</code>个席位，第<code>i</code>方的人数记为<code>pi</code>,<code>ni</code>表示第<code>i</code>方分配的席位数，且均为非负整数。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Huntington除数法</th>
<th style="text-align:center">除数&emsp;d(n)</th>
<th style="text-align:center">不公平度的度量指标(假定pi/ni&gt;pj/nj)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">最大除数法(GD)</td>
<td style="text-align:center">n+1</td>
<td style="text-align:center">(nj-pi)/pj-ni</td>
</tr>
<tr>
<td style="text-align:center">主要分数法(MF)</td>
<td style="text-align:center">n+1/2</td>
<td style="text-align:center">(nj/pj)-(ni-pi)</td>
</tr>
<tr>
<td style="text-align:center">相等比例法(EP)</td>
<td style="text-align:center">sqrt(n(n+1))</td>
<td style="text-align:center">(njpi)/(nipj)-1</td>
</tr>
<tr>
<td style="text-align:center">调和平均法(HM)</td>
<td style="text-align:center">2n(n+1)/(2n+1)</td>
<td style="text-align:center">pi/ni-pj/nj</td>
</tr>
<tr>
<td style="text-align:center">最小除数法(SD)</td>
<td style="text-align:center">n</td>
<td style="text-align:center">nj-nipj/pi</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;下面是这个方法的思路：首先，我们对每一方都分配一个席位，然后利用选定的衡量指标，计算出每一方的不公平度。给最大的那一组，分配一个席位，然后继续计算，直到将所有席位分配完毕。一般情况下，在使用Huntington除数法时，通常在各方自动分得1席的基础上在做分配，除非在各方人数悬殊且席位数较少的时候。</p>
<p>&emsp;&emsp;由于在计算的过程中，采用了每增加1席计算一次的方式，因此不会出现席位悖论和人口悖论。</p>
<p>&emsp;&emsp;下面是C语言写的Huntington算法。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> w;</div><div class="line">FILE *fin=fopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">dn</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span>(w)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> n+<span class="number">1.0</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> n+<span class="number">0.5</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> <span class="built_in">sqrt</span>(n*(n+<span class="number">1.0</span>));</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="number">2</span>*n*(n+<span class="number">1.0</span>)/(<span class="number">2</span>*n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="keyword">return</span> n;</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Huntington</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> s,flag=<span class="number">0</span>,bh=<span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span> p[<span class="number">6</span>],pd[<span class="number">6</span>];</div><div class="line">    <span class="keyword">int</span> n[<span class="number">6</span>];</div><div class="line">    <span class="keyword">double</span> max_pd;</div><div class="line">    <span class="built_in">fscanf</span>(fin,<span class="string">"%d"</span>,&amp;s);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">fscanf</span>(fin,<span class="string">"%lf"</span>,&amp;p[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">    &#123;</div><div class="line">        n[i]=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(n[<span class="number">1</span>]+n[<span class="number">2</span>]+n[<span class="number">3</span>]+n[<span class="number">4</span>]+n[<span class="number">5</span>]!=s)</div><div class="line">    &#123;</div><div class="line">        flag=<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">        &#123;</div><div class="line">            pd[i] = p[i]/dn(n[i]);</div><div class="line">        &#125;</div><div class="line">        max_pd = p[<span class="number">1</span>]/dn(n[<span class="number">1</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(pd[i]&gt;max_pd)</div><div class="line">            &#123;</div><div class="line">                flag = i,max_pd = pd[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n[flag]++;</div><div class="line"></div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;bh++&lt;&lt;<span class="string">"次："</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"p/di="</span>&lt;&lt;pd[i]&lt;&lt;<span class="string">"  n="</span>&lt;&lt;n[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"--------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"#请选择需要模拟的权重函数#"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"1.最大除数法(GD)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"2.主要分数法(MF)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"3.相等比例法(EP)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"4.调和平均法(HM)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"5.最小除数法(SD)"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"--------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"退出请输入0"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    printList();</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;w) &#123;</div><div class="line">        <span class="keyword">switch</span> (w)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">                Huntington();</div><div class="line">                select();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:fclose(fin);<span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入错误，请重新输入"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"--------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">                select();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    select();</div><div class="line">    fclose(fin);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;GD法偏向于人数多的组，SD法偏向于人数少的组。Huntington推荐偏向适中的EP法，也就是“Q值法”，该方法在1930年后一直在被美国国会众议员席位分配中采用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本篇博客请结合《数学模型（第四版）》，姜启源版教材第八章第四节内容阅读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在处理席位分析问题时，常使用Huntington除数法来进行处理。在书中279~281的学习中，我们了解到了
    
    </summary>
    
    
      <category term="数学" scheme="http://www.z16388.top/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数学模型" scheme="http://www.z16388.top/tags/%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
</feed>
