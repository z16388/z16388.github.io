<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎径 其镜</title>
  <subtitle>求学道路上的行车记录仪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.z16388.win/"/>
  <updated>2017-04-15T02:30:57.722Z</updated>
  <id>http://www.z16388.win/</id>
  
  <author>
    <name>Anqi Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS调试时提示找不到msvcr80d.dll解决方案</title>
    <link href="http://www.z16388.win/2017/04/15/vs1/"/>
    <id>http://www.z16388.win/2017/04/15/vs1/</id>
    <published>2017-04-15T02:18:53.000Z</published>
    <updated>2017-04-15T02:30:57.722Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在学校的很多课程中，需要使用到Visual Studio。在编写程序进行调试的时候，经常会出现报错“找不到msvcr80d.dll”的情况，让人很头疼。</p>
<p>&emsp;&emsp;这个是由于调试类型和硬盘的格式造成的。在学校机房的环境里，可以进行一下的步骤解决问题：</p>
<ol>
<li>项目 -&gt; [项目名] 属性 -&gt; 配置属性 -&gt; 清单工具 -&gt; 常规 -&gt; 将“使用FAT解决办法”的属性设置为“是”。</li>
<li>进行设置之后，保存，执行: 生成 -&gt; 重新生成解决方案</li>
<li>重新调试</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在学校的很多课程中，需要使用到Visual Studio。在编写程序进行调试的时候，经常会出现报错“找不到msvcr80d.dll”的情况，让人很头疼。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这个是由于调试类型和硬盘的格式造成的。在学校机房的环境里，
    
    </summary>
    
    
      <category term="Visual-Studio" scheme="http://www.z16388.win/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>dfs专项练习</title>
    <link href="http://www.z16388.win/2017/03/30/dfs/"/>
    <id>http://www.z16388.win/2017/03/30/dfs/</id>
    <published>2017-03-30T10:52:27.000Z</published>
    <updated>2017-04-13T13:25:20.934Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=1664" target="_blank" rel="external">poj1664:放苹果</a></p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1016" target="_blank" rel="external">hdu1016:素数环问题</a></p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2553" target="_blank" rel="external">hdu2553:N皇后问题</a></p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1584" target="_blank" rel="external">hdu1584:蜘蛛牌</a></p>
<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1181" target="_blank" rel="external">hdu1181:变形课</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1664&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;poj1664:放苹果&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.8从全排列到深度优先搜索dfs算法</title>
    <link href="http://www.z16388.win/2017/03/22/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-8%E4%BB%8E%E5%85%A8%E6%8E%92%E5%88%97%E5%88%B0%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2dfs%E7%AE%97%E6%B3%95/"/>
    <id>http://www.z16388.win/2017/03/22/【ACM教程】3-8从全排列到深度优先搜索dfs算法/</id>
    <published>2017-03-22T08:37:34.000Z</published>
    <updated>2017-04-13T13:25:15.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第八节-从全排列到深度优先搜索算法"><a href="#第八节-从全排列到深度优先搜索算法" class="headerlink" title="第八节 从全排列到深度优先搜索算法"></a>第八节 从全排列到深度优先搜索算法</h1><h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h2><p>&emsp;&emsp;什么是全排列？就是一组数据所有可能的排列顺序。如果使用暴力枚举的方法，需要对每一个位置都进行一次循环，如果有n个数据则需要循环n次，而且还要加上对重复序列的判断。</p>
<p>&emsp;&emsp;可喜的是，在STL中有两个函数可以帮我们实现字典序的全排列。他们分别是：<code>next_permutation()</code><code>prev_permutation()</code>，参数是数据的开始和结束地址。举个例子，比如一个字符数组：a,b,c，它的下一个序列就是a,c,b。在处理全排列问题的时候，使用比较方便。这两个函数在算法头文件中。</p>
<p>&emsp;&emsp;由于这两个函数是根据字典序来给出下一个全排列，如果想要得出所有的全排列，则需要首先对序列进行排序。</p>
<p>&emsp;&emsp;蓝桥杯中很多题目可以使用这种方法来解决，以第七届蓝桥杯的第三题为例：</p>
<blockquote>
<p>　　B　　 DEF<br>A +  ——  +  ———   =  10<br>　　C　　 GHI<br>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。<br>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。<br>这个算式一共有多少种解法？<br>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> sum[<span class="number">4</span>];</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)&#123;</div><div class="line">        a[i]=i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        sum[<span class="number">0</span>]=a[<span class="number">1</span>]*a[<span class="number">3</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line">        sum[<span class="number">1</span>]=a[<span class="number">2</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line">        sum[<span class="number">2</span>]=(a[<span class="number">4</span>]*<span class="number">100</span>+a[<span class="number">5</span>]*<span class="number">10</span>+a[<span class="number">6</span>])*a[<span class="number">3</span>];</div><div class="line">        sum[<span class="number">3</span>]=<span class="number">10</span>*a[<span class="number">3</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(sum[<span class="number">0</span>]+sum[<span class="number">1</span>]+sum[<span class="number">2</span>]==sum[<span class="number">3</span>])&#123;</div><div class="line">            ++ans;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">1</span>+<span class="number">9</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="深度优先搜索dfs算法"><a href="#深度优先搜索dfs算法" class="headerlink" title="深度优先搜索dfs算法"></a>深度优先搜索dfs算法</h2><p>&emsp;&emsp;突然想要感叹一句：终于要讲到dfs算法了。为什么要发出这样的感叹呢，因为从这里开始，我们真正要接触到算法的内容了。之前的学习都可以说是小打小闹，到这里再是正主。</p>
<p>&emsp;&emsp;事实上，深度优先搜索属于图算法的一种，英文缩写为DFS即Depth First Search。其过程简要来说是对每一个可能的分支路径深入到不能再深入为止，而且每个节点只能访问一次。dfs算法是算法学习过程中的重中之重，因为全排列是个一维的过程，为了便于大家的理解，我就从它开始吧。</p>
<p>&emsp;&emsp;有a、b、c三个盒子，以及1，2，3三只球。我们将球放到盒子里，每个盒子只能放一个球，求一共有几种放法。如果形象地形容这个全排列的过程，将会是这个样子：首先按照字典序顺序放球，也就是在a盒子中放1号球，b盒子中放2号球，c盒子中放3号球。再向后走就没有盒子了，同时我们手中也没有剩余球了。这个时候，往回走，寻找有没有其他的放球顺序。先回到c盒子前拿出3号球，再到b盒子前拿出2号球。这时候，又产生了一种排列方式：把3号球放到b盒子中，2号球放到c盒子中。接下来以此类推，产生剩余的序列。</p>
<p>&emsp;&emsp;那么，我们把上面的过程用程序来模拟一下。首先是第一种放置方法，先按照升序将球放好：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">    a[step] = i;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的数组a表示盒子的序列，变量step表示我们正处在第step个盒子的前面。a[step]=i的意思就是将第i个球放到第step个盒子里。但是需要注意的是，球一旦放进一个盒子里，就不能放在另一个盒子里了。这时候，我们需要记录一下。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i;i&lt;=n;i++) &#123;</div><div class="line">    <span class="keyword">if</span>(book[i]==<span class="number">0</span>) &#123; <span class="comment">//book[i]==0表示球还在我们手上</span></div><div class="line">        a[step]=i;</div><div class="line">        book[i]=<span class="number">1</span>;   <span class="comment">//标记i号球已经放到盒子里了</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;那么，我们既然在第step个盒子里放球了，后面就要继续向后放了。很明显，这是一个递归的过程。我们将要写的过程封装到函数里，将这个函数命名为dfs。然后在里面处理第step+1个盒子。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">if</span>(book[i]==<span class="number">0</span>) &#123; </div><div class="line">            a[step]=i;</div><div class="line">            book[i]=<span class="number">1</span>;</div><div class="line">            dfs(step+<span class="number">1</span>);</div><div class="line">            book[i]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;细心的同学可能已经注意到了，除了除以step+1个盒子之外，我们还另外加了一行代码<code>book[i]=0</code>，为什么要加上这一句呢？我们想一下，递归放完所有的球之后，我们是不是在回来的过程中要将这个球从盒子里拿出来呀。如果没有这个操作，这将会对接下来的放置造成障碍。</p>
<p>&emsp;&emsp;在之前的学习中，我们都知道，递归必须要有一个停止条件。转换到这个问题中就是：我们应该在什么时候将计算完毕的全排列输出出来呢？答案是处理到第n+1个盒子时。在前面的“故事背景”中，我们在走到第四个盒子的位置时，发现这个地方没有盒子，就往回走了。这个时候就是要输出的时候。代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(step==n+<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span>;    <span class="comment">//返回前一步</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">if</span>(book[i]==<span class="number">0</span>) &#123; </div><div class="line">            a[step]=i;</div><div class="line">            book[i]=<span class="number">1</span>;</div><div class="line">            dfs(step+<span class="number">1</span>);</div><div class="line">            book[i]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;整个过程我们模拟完毕了，整理得到完整的代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>],book[<span class="number">10</span>],n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(step==n+<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span>;    <span class="comment">//返回前一步</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">if</span>(book[i]==<span class="number">0</span>) &#123; </div><div class="line">            a[step]=i;</div><div class="line">            book[i]=<span class="number">1</span>;</div><div class="line">            dfs(step+<span class="number">1</span>);</div><div class="line">            book[i]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    dfs(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这个问题虽然简单，但是包含了dfs的基本模型。理解dfs算法的关键在于理解“当下应该如何去做”。至于“下一步应该怎么做”是和当下的操作一样的。我们在处理第step个盒子和step+1个盒子的时候，都采用的是一样的操作。因此，我们可以整理出dfs的基本模型：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">    判断边界</div><div class="line">    尝试所有的可能 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        继续下一步 dfs(step+<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">    返回</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们以一道题目为例，第七届蓝桥杯的第七题，剪邮票：</p>
<blockquote>
<p>如【图1.jpg】, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。<br>（仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。<br>请你计算，一共有多少种不同的剪取方法。<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p><img src="http://oda2v68ht.bkt.clouddn.com/1.jpg" alt=""><br>图1</p>
<p><img src="http://oda2v68ht.bkt.clouddn.com/2.jpg" alt=""><br>图2</p>
<p><img src="http://oda2v68ht.bkt.clouddn.com/3.jpg" alt=""><br>图3</p>
<p>&emsp;&emsp;我们先看一下一位同学错误的解法吧：<a href="http://blog.csdn.net/star92014/article/details/50942239" target="_blank" rel="external">http://blog.csdn.net/star92014/article/details/50942239</a></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">0</span>,&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flag[<span class="number">5</span>]=&#123;<span class="number">0</span>,&#125;;</div><div class="line">    flag[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> check[<span class="number">5</span>]=&#123;<span class="number">0</span>,&#125;;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line">rep:    </div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(flag[i]&amp;&amp;check[i]==<span class="number">0</span>)&#123;</div><div class="line">            check[i]=<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</div><div class="line">                <span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">if</span>(a[j]==a[i]+<span class="number">1</span>||a[j]==a[i]<span class="number">-1</span></div><div class="line">                ||a[j]==a[i]<span class="number">-4</span>||a[j]==a[i]+<span class="number">4</span>)&#123;</div><div class="line">                    flag[j]=<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;   </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(flag[i]&amp;&amp;check[i]==<span class="number">0</span>)<span class="keyword">goto</span> rep;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(flag[i])count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(count==<span class="number">5</span>)<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(a[<span class="number">0</span>]=<span class="number">1</span>;a[<span class="number">0</span>]&lt;<span class="number">13</span>;a[<span class="number">0</span>]++)&#123;</div><div class="line">        <span class="keyword">for</span>(a[<span class="number">1</span>]=a[<span class="number">0</span>]+<span class="number">1</span>;a[<span class="number">1</span>]&lt;<span class="number">13</span>;a[<span class="number">1</span>]++)&#123;</div><div class="line">    <span class="comment">//  if(a[1]==a[0])continue;</span></div><div class="line">        <span class="keyword">for</span>(a[<span class="number">2</span>]=a[<span class="number">1</span>]+<span class="number">1</span>;a[<span class="number">2</span>]&lt;<span class="number">13</span>;a[<span class="number">2</span>]++)&#123;</div><div class="line">    <span class="comment">//  if(a[2]==a[0]||a[2]==a[1])continue;</span></div><div class="line">        <span class="keyword">for</span>(a[<span class="number">3</span>]=a[<span class="number">2</span>]+<span class="number">1</span>;a[<span class="number">3</span>]&lt;<span class="number">13</span>;a[<span class="number">3</span>]++)&#123;</div><div class="line">    <span class="comment">//  if(a[3]==a[0]||a[3]==a[1]||a[3]==a[2])continue;</span></div><div class="line">        <span class="keyword">for</span>(a[<span class="number">4</span>]=a[<span class="number">3</span>]+<span class="number">1</span>;a[<span class="number">4</span>]&lt;<span class="number">13</span>;a[<span class="number">4</span>]++)&#123;</div><div class="line">        <span class="comment">//if(a[4]==a[0]||a[4]==a[1]||a[4]==a[2]||a[4]==a[3])continue;</span></div><div class="line">        <span class="keyword">if</span>(check())&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d %d %d %d\n"</span>,a[<span class="number">0</span>],a[<span class="number">1</span>],a[<span class="number">2</span>],a[<span class="number">3</span>],a[<span class="number">4</span>]);</div><div class="line">        count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,count);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;代码质量不说，这位同学得到的答案是202，是错误的。那么问题出在了哪里呢？是序列的重复问题。比如12345和12354。为了避免这种情况，我们除了增加判断条件之外，还可以从数据上入手，将序列改为<code>{1,2,3,4,6,7,8,9,11,12,13,14};</code>这样，在判断换行之后的左右侧元素时，就会有失效的元素，避免了重复。下面是代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dir[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-5</span>&#125;;</div><div class="line"><span class="keyword">int</span> temp1[<span class="number">12</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;;</div><div class="line"><span class="keyword">int</span> temp2[<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">4</span> ;i++)&#123;</div><div class="line">        <span class="keyword">int</span> t = temp2[u]+dir[i];</div><div class="line">        <span class="keyword">if</span>(t&gt;=<span class="number">1</span>&amp;&amp;t&lt;=<span class="number">14</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;<span class="number">5</span> ;j++)</div><div class="line">                <span class="keyword">if</span>(t==temp2[j]&amp;&amp;!vis[j])&#123;</div><div class="line">                    vis[j]=<span class="number">1</span>;</div><div class="line">                    dfs(j);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span> ;a&lt;<span class="number">12</span> ;a++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=a+<span class="number">1</span> ;b&lt;<span class="number">12</span> ;b++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=b+<span class="number">1</span> ;c&lt;<span class="number">12</span> ;c++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> d=c+<span class="number">1</span> ;d&lt;<span class="number">12</span> ;d++)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> e=d+<span class="number">1</span> ;e&lt;<span class="number">12</span> ;e++)&#123;</div><div class="line">                        temp2[<span class="number">0</span>]=temp1[a];</div><div class="line">                        temp2[<span class="number">1</span>]=temp1[b];</div><div class="line">                        temp2[<span class="number">2</span>]=temp1[c];</div><div class="line">                        temp2[<span class="number">3</span>]=temp1[d];</div><div class="line">                        temp2[<span class="number">4</span>]=temp1[e];</div><div class="line">                        <span class="comment">//初始化访问标记数组</span></div><div class="line">                        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">                        vis[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                        dfs(<span class="number">0</span>);</div><div class="line">                        <span class="comment">//连通性判断</span></div><div class="line">                        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">5</span> ;i++)&#123;</div><div class="line">                            <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</div><div class="line">                                flag = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(flag)ans++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;DFS专项练习：<a href="http://www.z16388.win/2017/03/30/dfs/">http://www.z16388.win/2017/03/30/dfs/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第八节-从全排列到深度优先搜索算法&quot;&gt;&lt;a href=&quot;#第八节-从全排列到深度优先搜索算法&quot; class=&quot;headerlink&quot; title=&quot;第八节 从全排列到深度优先搜索算法&quot;&gt;&lt;/a&gt;第八节 从全排列到深度优先搜索算法&lt;/h1&gt;&lt;h2 id=&quot;全排列&quot;&gt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】2.5数学简单问题</title>
    <link href="http://www.z16388.win/2017/03/22/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%912-5%E6%95%B0%E5%AD%A6%E7%AE%80%E5%8D%95%E9%97%AE%E9%A2%98/"/>
    <id>http://www.z16388.win/2017/03/22/【ACM教程】2-5数学简单问题/</id>
    <published>2017-03-22T07:25:01.000Z</published>
    <updated>2017-04-13T13:25:15.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五节-数学简单问题"><a href="#第五节-数学简单问题" class="headerlink" title="第五节 数学简单问题"></a>第五节 数学简单问题</h1><p>&emsp;&emsp;竞赛中的很多题目会考到数学相关的知识，在这一节，我们会挑出一些简单的问题集中讲解。</p>
<h2 id="最大公约数-最小公倍数"><a href="#最大公约数-最小公倍数" class="headerlink" title="最大公约数/最小公倍数"></a>最大公约数/最小公倍数</h2><p>&emsp;&emsp;首先我们要介绍一个算法，欧几里德算法。欧几里得是著名的古希腊数学家，被称为“几何学之父”，代表作为《几何原本》。</p>
<p>&emsp;&emsp;欧几里得算法又称辗转相除算法，定理如下：两个整数的最大公约数等于其中较小的那个数和两数相除余数的最大公约数。（最大公约数缩写为gcd）在这里就不作证明了，直接给出代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//最大公约数</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>  <span class="comment">//最小公倍数</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> a/gcd(a,b)*b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断素数"><a href="#判断素数" class="headerlink" title="判断素数"></a>判断素数</h2><p>&emsp;&emsp;什么是素数呢？素数是大于等于2的，只有1和他本身能够整除他的数。要去判断一个数n是否是素数，只要从2到sqrt(n)依次判断即可，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">su</span><span class="params">(<span class="keyword">int</span> b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(b);i++) &#123;</div><div class="line">        <span class="keyword">if</span>(b%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="排列组合打表"><a href="#排列组合打表" class="headerlink" title="排列组合打表"></a>排列组合打表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c[N][N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">com</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">memset</span>(c,<span class="number">0</span>,<span class="keyword">sizeof</span>(c));</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++) &#123;</div><div class="line">		c[i][<span class="number">0</span>]=c[i][i]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++) &#123;</div><div class="line">			c[i][j]=c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>&emsp;&emsp;求a的b次幂，我们可以直接使用for循环去做。但是当b很大的时候，就会花费很多时间，这时候需要使用快速幂算法。</p>
<p>&emsp;&emsp;下面我们就以求a^11为例，介绍一下快速幂算法。</p>
<ol>
<li>将11转化为二进制——1011</li>
<li>分解：11=1*2^3+0*2^2+1*2^1+1*2^0</li>
<li>将a^11转化为a^(2^3)*a^(2^1)*a^(2^0)</li>
</ol>
<p>&emsp;&emsp;代码如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fast</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> tem=x,ans=<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(n) &#123;</div><div class="line">		<span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>) ans*=tem;</div><div class="line">		tem*=tem;</div><div class="line">		n&gt;&gt;=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h2><p>&emsp;&emsp;公式：a*b%c=((a%c)*b)%c&emsp;&emsp;(a+b)%c=(a%c+b%c)%c</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">1</span>,temp=a%p;</div><div class="line">	<span class="keyword">while</span>(x) &#123;</div><div class="line">		<span class="keyword">if</span>(x&amp;<span class="number">1</span>) ans=((<span class="keyword">long</span> <span class="keyword">long</span>)ans*temp)%p;</div><div class="line">		temp=((<span class="keyword">long</span> <span class="keyword">long</span>)temp*temp)%p;</div><div class="line">		x&gt;&gt;=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="十进制转换为x进制"><a href="#十进制转换为x进制" class="headerlink" title="十进制转换为x进制"></a>十进制转换为x进制</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="built_in">string</span> <span class="title">trans</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> base)</span> </span>&#123;</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	<span class="keyword">while</span>(num&gt;<span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span>(num%base&lt;<span class="number">10</span>) &#123;</div><div class="line">			str+=num%base+<span class="string">'0'</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			str+=num%base<span class="number">-10</span>+<span class="string">'A'</span>;</div><div class="line">		&#125;</div><div class="line">		num=num/base;</div><div class="line">	&#125;</div><div class="line">	reverse(str.begin(),str.end());</div><div class="line">	<span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用的数学公式"><a href="#常用的数学公式" class="headerlink" title="常用的数学公式"></a>常用的数学公式</h2><p>等差数列求和公式：</p>
<p>Sn=n*a1+n(n-1)d/2<br>Sn=n(a1+an)/2</p>
<p>等比数列求和公式：</p>
<p>Sn=a1(1-q^n)/(1-q)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第五节-数学简单问题&quot;&gt;&lt;a href=&quot;#第五节-数学简单问题&quot; class=&quot;headerlink&quot; title=&quot;第五节 数学简单问题&quot;&gt;&lt;/a&gt;第五节 数学简单问题&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;竞赛中的很多题目会考到数学相关的知识，在这一节，我们
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第六届蓝桥杯C/C++省赛B组题目详解</title>
    <link href="http://www.z16388.win/2017/03/21/lanqiao6/"/>
    <id>http://www.z16388.win/2017/03/21/lanqiao6/</id>
    <published>2017-03-21T11:57:34.000Z</published>
    <updated>2017-04-13T13:25:15.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一题-奖券数目"><a href="#第一题-奖券数目" class="headerlink" title="第一题 奖券数目"></a>第一题 奖券数目</h2><blockquote>
<p>有些人很迷信数字，比如带“4”的数字，认为和“死”谐音，就觉得不吉利。<br>虽然这些说法纯属无稽之谈，但有时还要迎合大众的需求。某抽奖活动的奖券号码是5位数（10000-99999），要求其中不要出现带“4”的号码，主办单位请你计算一下，如果任何两张奖券不重号，最多可发出奖券多少张。<br>请提交该数字（一个整数），不要写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这道题虽然可以使用穷举法去做，但是其实是一道“稿纸题”。分析每一位上面数的可能性，直接使用8*9*9*9*9即可计算出来。最终答案为：<code>52488</code></p>
<h2 id="第二题-星系炸弹"><a href="#第二题-星系炸弹" class="headerlink" title="第二题 星系炸弹"></a>第二题 星系炸弹</h2><blockquote>
<p>在X星系的广袤空间中漂浮着许多X星人造“炸弹”，用来作为宇宙中的路标。<br>每个炸弹都可以设定多少天之后爆炸。<br>比如：阿尔法炸弹2015年1月1日放置，定时为15天，则它在2015年1月16日爆炸。<br>有一个贝塔炸弹，2014年11月9日放置，定时为1000天，请你计算它爆炸的准确日期。<br>请填写该日期，格式为yyyy-mm-dd  即4位年份2位月份2位日期。比如：2015-02-19</p>
</blockquote>
<p>&emsp;&emsp;这是一道简单的日期计算问题。掌握好每个月的天数，然后计算。当然，也可以是一道稿纸题。</p>
<p>&emsp;&emsp;最终答案为：<code>2017-08-05</code></p>
<h2 id="第三题-三羊献瑞"><a href="#第三题-三羊献瑞" class="headerlink" title="第三题 三羊献瑞"></a>第三题 三羊献瑞</h2><blockquote>
<p>观察下面的加法算式：<br>       祥 瑞生 辉</p>
<ul>
<li>三羊 献 瑞<br>-——————<br>三 羊 生 瑞 气<br>其中，相同的汉字代表相同的数字，不同的汉字代表不同的数字。<br>请你填写“三羊献瑞”所代表的4位数字（答案唯一），不要填写任何多余内容。</li>
</ul>
</blockquote>
<p>&emsp;&emsp;经典的蓝桥题目，直接暴力枚举就可以。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">    int xiang,rui,sheng,hui;</div><div class="line">    int san,yang,xian,rui;</div><div class="line">    int san,yang,sheng,rui,qi;</div><div class="line">*/</div><div class="line"></div><div class="line">    <span class="keyword">int</span> xiang,rui,sheng,hui;</div><div class="line">    <span class="keyword">int</span> san,yang,xian;</div><div class="line">    <span class="keyword">int</span> qi;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a,b,c;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(xiang=<span class="number">1</span>;xiang&lt;=<span class="number">9</span>;++xiang)&#123;</div><div class="line">        <span class="keyword">for</span>(rui=<span class="number">0</span>;rui&lt;=<span class="number">9</span>;++rui)&#123;</div><div class="line">            <span class="keyword">if</span>(rui==xiang)<span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(sheng=<span class="number">0</span>;sheng&lt;=<span class="number">9</span>;++sheng)&#123;</div><div class="line">                <span class="keyword">if</span>(sheng==xiang||sheng==rui)<span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(hui=<span class="number">0</span>;hui&lt;=<span class="number">9</span>;++hui)&#123;</div><div class="line">                    <span class="keyword">if</span>(hui==xiang||hui==rui||hui==sheng)<span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">for</span>(san=<span class="number">1</span>;san&lt;=<span class="number">9</span>;++san)&#123;</div><div class="line">                        <span class="keyword">if</span>(san==xiang||san==rui||san==sheng||san==hui)<span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">for</span>(yang=<span class="number">0</span>;yang&lt;=<span class="number">9</span>;++yang)&#123;</div><div class="line">                            <span class="keyword">if</span>(yang==xiang||yang==rui||yang==sheng||yang==hui||yang==san)<span class="keyword">continue</span>;</div><div class="line">                            <span class="keyword">for</span>(xian=<span class="number">0</span>;xian&lt;=<span class="number">9</span>;++xian)&#123;</div><div class="line">                                <span class="keyword">if</span>(xian==xiang||xian==rui||xian==sheng||xian==hui||xian==san||xian==yang)<span class="keyword">continue</span>;</div><div class="line">                                <span class="keyword">for</span>(qi=<span class="number">0</span>;qi&lt;=<span class="number">9</span>;++qi)&#123;</div><div class="line">                                    <span class="keyword">if</span>(qi==xiang||qi==rui||qi==sheng||qi==hui||qi==san||qi==yang||qi==xian)<span class="keyword">continue</span>;</div><div class="line"></div><div class="line">                                    a=xiang*<span class="number">1000</span>+rui*<span class="number">100</span>+sheng*<span class="number">10</span>+hui;</div><div class="line">                                    b=san*<span class="number">1000</span>+yang*<span class="number">100</span>+xian*<span class="number">10</span>+rui;</div><div class="line">                                    c=san*<span class="number">10000</span>+yang*<span class="number">1000</span>+sheng*<span class="number">100</span>+rui*<span class="number">10</span>+qi;</div><div class="line">                                    <span class="keyword">if</span>(a+b==c)&#123;</div><div class="line">                                        <span class="comment">//printf("%d+%d=%d\n",a,b,c);</span></div><div class="line">                                        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,san,yang,xian,rui);</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第四题-格子中输出"><a href="#第四题-格子中输出" class="headerlink" title="第四题 格子中输出"></a>第四题 格子中输出</h2><blockquote>
<p>格子中输出<br>StringInGrid函数会在一个指定大小的格子中打印指定的字符串。<br>要求字符串在水平、垂直两个方向上都居中。<br>如果字符串太长，就截断。<br>如果不能恰好居中，可以稍稍偏左或者偏上一点。<br>下面的程序实现这个逻辑，请填写划线部分缺少的代码。<br>对于题目中数据，应该输出：<br>+——————+<br>|&emsp;&emsp;&emsp;&emsp;&emsp;|<br>|     abcd1234     |<br>|&emsp;&emsp;&emsp;&emsp;&emsp;|<br>|&emsp;&emsp;&emsp;&emsp;&emsp;|<br>+——————+</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">StringInGrid</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,k;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">1000</span>];</div><div class="line">    <span class="built_in">strcpy</span>(buf, s);</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(s)&gt;width<span class="number">-2</span>) buf[width<span class="number">-2</span>]=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+"</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;(height<span class="number">-1</span>)/<span class="number">2</span>;k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%*s%s%*s"</span>,<span class="number">_____________________________________________</span>);  <span class="comment">//填空</span></div><div class="line">              </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(k=(height<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; k&lt;height<span class="number">-1</span>; k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|"</span>);</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">" "</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"|\n"</span>);</div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+"</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;width<span class="number">-2</span>;i++) <span class="built_in">printf</span>(<span class="string">"-"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"+\n"</span>);    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    StringInGrid(<span class="number">20</span>,<span class="number">6</span>,<span class="string">"abcd1234"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>答案是：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(width-<span class="built_in">strlen</span>(buf)<span class="number">-2</span>)/<span class="number">2</span>,<span class="string">""</span>,buf,(width-<span class="built_in">strlen</span>(buf)<span class="number">-2</span>+<span class="number">1</span>)/<span class="number">2</span>,<span class="string">""</span></div></pre></td></tr></table></figure>
<p>&emsp;&emsp;C语言语法考题，太过于变态，基本没有做出来的。这道题不必深究。</p>
<h2 id="第五题-九数组分数"><a href="#第五题-九数组分数" class="headerlink" title="第五题 九数组分数"></a>第五题 九数组分数</h2><blockquote>
<p>九数组分数<br>1,2,3…9 这九个数字组成一个分数，其值恰好为1/3，如何组法？<br>下面的程序实现了该功能，请填写划线部分缺失的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a = x[<span class="number">0</span>]*<span class="number">1000</span> + x[<span class="number">1</span>]*<span class="number">100</span> + x[<span class="number">2</span>]*<span class="number">10</span> + x[<span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> b = x[<span class="number">4</span>]*<span class="number">10000</span> + x[<span class="number">5</span>]*<span class="number">1000</span> + x[<span class="number">6</span>]*<span class="number">100</span> + x[<span class="number">7</span>]*<span class="number">10</span> + x[<span class="number">8</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(a*<span class="number">3</span>==b) <span class="built_in">printf</span>(<span class="string">"%d / %d\n"</span>, a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,t;</div><div class="line">    <span class="keyword">if</span>(k&gt;=<span class="number">9</span>)&#123;</div><div class="line">        test(x);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(i=k; i&lt;<span class="number">9</span>; i++)&#123;</div><div class="line">        &#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</div><div class="line">        f(x,k+<span class="number">1</span>);</div><div class="line">        <span class="number">_____________________________________________</span> <span class="comment">// 填空处</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> x[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</div><div class="line">    f(x,<span class="number">0</span>);    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;水题，答案：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;t=x[k]; x[k]=x[i]; x[i]=t;&#125;</div></pre></td></tr></table></figure>
<h2 id="第六题-加法变乘法"><a href="#第六题-加法变乘法" class="headerlink" title="第六题 加法变乘法"></a>第六题 加法变乘法</h2><blockquote>
<p>我们都知道：1+2+3+… + 49 = 1225<br>现在要求你把其中两个不相邻的加号变成乘号，使得结果为2015<br>比如：<br>1+2+3+…+10*11+12+…+27*28+29+…+49 =2015<br>就是符合要求的答案。<br>请你寻找另外一个可能的答案，并把位置靠前的那个乘号左边的数字提交（对于示例，就是提交10）。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">49</span>;++i)&#123;</div><div class="line">        <span class="keyword">for</span>(j=i+<span class="number">2</span>;j&lt;=<span class="number">49</span>;++j)&#123;</div><div class="line">            a=<span class="number">1225</span>-(i+i+<span class="number">1</span>)-(j+j+<span class="number">1</span>);</div><div class="line">            b=<span class="number">2015</span>-(i*(i+<span class="number">1</span>))-(j*(j+<span class="number">1</span>));</div><div class="line">            <span class="keyword">if</span>(a==b)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"i=%d,j=%d\n"</span>,i,j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;暴力枚举，枚举所有的可能的两个位置，用1225和2015分别减去这两个位置的值，看看是否相等。</p>
<h2 id="第七题-牌型种数"><a href="#第七题-牌型种数" class="headerlink" title="第七题 牌型种数"></a>第七题 牌型种数</h2><blockquote>
<p>小明被劫持到X赌城，被迫与其他3人玩牌。<br>一副扑克牌（去掉大小王牌，共52张），均匀发给4个人，每个人13张。<br>这时，小明脑子里突然冒出一个问题：<br>如果不考虑花色，只考虑点数，也不考虑自己得到的牌的先后顺序，自己手里能拿到的初始牌型组合一共有多少种呢？</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,aJ,aQ,aK;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(a1=<span class="number">0</span>;a1&lt;=<span class="number">4</span>;++a1)&#123;</div><div class="line">        <span class="keyword">for</span>(a2=<span class="number">0</span>;a2&lt;=<span class="number">4</span>;++a2)&#123;</div><div class="line">            <span class="keyword">for</span>(a3=<span class="number">0</span>;a3&lt;=<span class="number">4</span>;++a3)&#123;</div><div class="line">                <span class="keyword">for</span>(a4=<span class="number">0</span>;a4&lt;=<span class="number">4</span>;++a4)&#123;</div><div class="line">                    <span class="keyword">for</span>(a5=<span class="number">0</span>;a5&lt;=<span class="number">4</span>;++a5)&#123;</div><div class="line">                        <span class="keyword">for</span>(a6=<span class="number">0</span>;a6&lt;=<span class="number">4</span>;++a6)&#123;</div><div class="line">                            <span class="keyword">for</span>(a7=<span class="number">0</span>;a7&lt;=<span class="number">4</span>;++a7)&#123;</div><div class="line">                                <span class="keyword">for</span>(a8=<span class="number">0</span>;a8&lt;=<span class="number">4</span>;++a8)&#123;</div><div class="line">                                    <span class="keyword">for</span>(a9=<span class="number">0</span>;a9&lt;=<span class="number">4</span>;++a9)&#123;</div><div class="line">                                        <span class="keyword">for</span>(a10=<span class="number">0</span>;a10&lt;=<span class="number">4</span>;++a10)&#123;</div><div class="line">                                            <span class="keyword">for</span>(aJ=<span class="number">0</span>;aJ&lt;=<span class="number">4</span>;++aJ)&#123;</div><div class="line">                                                <span class="keyword">for</span>(aQ=<span class="number">0</span>;aQ&lt;=<span class="number">4</span>;++aQ)&#123;</div><div class="line">                                                    <span class="keyword">for</span>(aK=<span class="number">0</span>;aK&lt;=<span class="number">4</span>;++aK)&#123;</div><div class="line">                                                        <span class="keyword">if</span>(a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+aJ+aQ+aK==<span class="number">13</span>)&#123;</div><div class="line">                                                            ++sum;</div><div class="line">                                                        &#125;</div><div class="line">                                                    &#125;</div><div class="line">                                                &#125;</div><div class="line">                                            &#125;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;当然，我们也可以用dfs来解决这道题。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> tol)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(tol&gt;<span class="number">13</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span>(cur==<span class="number">14</span>)&#123;<span class="comment">//13种牌都拿完了</span></div><div class="line">        <span class="keyword">if</span>(tol==<span class="number">13</span>)&#123;<span class="comment">//手里13张牌了</span></div><div class="line">            ++sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">4</span>;++i)&#123;</div><div class="line">        dfs(cur+<span class="number">1</span>,tol+i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    sum=<span class="number">0</span>;</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);<span class="comment">//从第1张牌开始选，当前手中有0张</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第八题-移动距离"><a href="#第八题-移动距离" class="headerlink" title="第八题 移动距离"></a>第八题 移动距离</h2><blockquote>
<p>X星球居民小区的楼房全是一样的，并且按矩阵样式排列。其楼房的编号为1,2,3…<br>当排满一行时，从下一行相邻的楼往反方向排号。<br>比如：当小区排号宽度为6时，开始情形如下：<br>  1   2   3  4 5  6<br>12 11 10 9 8  7<br>13 14 15 …..<br>我们的问题是：已知了两个楼号m和n，需要求出它们之间的最短移动距离（不能斜线方向移动）<br>输入为3个整数w m n，空格分开，都在1到10000范围内<br>w为排号宽度，m,n为待计算的楼号。<br>要求输出一个整数，表示m n两楼间最短移动距离。<br>例如：<br>用户输入：<br>6 8 2<br>则，程序应该输出：<br>4<br>再例如：<br>用户输入：<br>4 7 20<br>则，程序应该输出：<br>5<br>资源约定：<br>峰值内存消耗 <256m cpu消耗="" <="" 1ms="" 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...”="" 的多余内容。="" 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。="" 注意:="" main函数需要返回0="" 只使用ansi="" c="" ansi="" c++="" 标准，不要调用依赖于编译环境或操作系统的特殊函数。="" 所有依赖的函数必须明确地在源文件中="" #include<xxx="">， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</256m></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> w,m,n;</div><div class="line">    <span class="keyword">int</span> x1,y1;</div><div class="line">    <span class="keyword">int</span> x2,y2;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;w,&amp;m,&amp;n))&#123;</div><div class="line">        x1=(m<span class="number">-1</span>)/w;</div><div class="line">        y1=(m<span class="number">-1</span>)%w;</div><div class="line">        <span class="keyword">if</span>(x1%<span class="number">2</span>!=<span class="number">0</span>)&#123;</div><div class="line">            y1=w<span class="number">-1</span>-y1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        x2=(n<span class="number">-1</span>)/w;</div><div class="line">        y2=(n<span class="number">-1</span>)%w;</div><div class="line">        <span class="keyword">if</span>(x2%<span class="number">2</span>!=<span class="number">0</span>)&#123;</div><div class="line">            y2=w<span class="number">-1</span>-y2;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">abs</span>(x1-x2)+<span class="built_in">abs</span>(y1-y2));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第九题-垒骰子"><a href="#第九题-垒骰子" class="headerlink" title="第九题 垒骰子"></a>第九题 垒骰子</h2><blockquote>
<p>赌圣atm晚年迷恋上了垒骰子，就是把骰子一个垒在另一个上边，不能歪歪扭扭，要垒成方柱体。<br>经过长期观察，atm 发现了稳定骰子的奥秘：有些数字的面贴着会互相排斥！<br>我们先来规范一下骰子：1 的对面是 4，2 的对面是 5，3 的对面是 6。<br>假设有 m 组互斥现象，每组中的那两个数字的面紧贴在一起，骰子就不能稳定的垒起来。<br>atm想计算一下有多少种不同的可能的垒骰子方式。<br>两种垒骰子方式相同，当且仅当这两种方式中对应高度的骰子的对应数字的朝向都相同。<br>由于方案数可能过多，请输出模10^9 + 7 的结果。<br>不要小看了 atm 的骰子数量哦～<br>「输入格式」<br>第一行两个整数 n m<br>n表示骰子数目<br>接下来 m 行，每行两个整数 a b ，表示 a 和 b 数字不能紧贴在一起。<br>「输出格式」<br>一行一个数，表示答案模10^9 + 7 的结果。<br>「样例输入」<br>2 1<br>1 2<br>「样例输出」<br>544<br>「数据范围」<br>对于 30% 的数据：n &lt;= 5<br>对于 60% 的数据：n &lt;= 100<br>对于 100% 的数据：0 &lt; n &lt;= 10^9, m &lt;= 36<br>资源约定：<br>峰值内存消耗 <256m cpu消耗="" <="" 2000ms="" 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...”="" 的多余内容。="" 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。="" 注意:="" main函数需要返回0="" 只使用ansi="" c="" ansi="" c++="" 标准，不要调用依赖于编译环境或操作系统的特殊函数。="" 所有依赖的函数必须明确地在源文件中="" #include<xxx="">， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</256m></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> flag[<span class="number">7</span>][<span class="number">7</span>];<span class="comment">//-1可以相邻，0不能相邻</span></div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">2</span>][<span class="number">7</span>];<span class="comment">//滚动数组，dp[i][j]代表高度为i，顶面骰子的顶面点数为j的叠骰子方案数</span></div><div class="line"><span class="keyword">int</span> convert[<span class="number">7</span>]=&#123;<span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> n,m;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">int</span> i,j,k;</div><div class="line">    <span class="keyword">int</span> e;<span class="comment">//滚动标志，就2个交换的话这样滚动（e=1-e）应该比%快点吧（其实加减法和%速度应该差不多少吧。）</span></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum;</div><div class="line">    </div><div class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">memset</span>(flag,<span class="number">-1</span>,<span class="keyword">sizeof</span>(flag));</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;++i)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</div><div class="line">            flag[a][b]=<span class="number">0</span>;</div><div class="line">            flag[b][a]=<span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        e=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">7</span>;++i)&#123;</div><div class="line">            dp[e][i]=<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//骰子4面转动，乘以4</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;++i)&#123;</div><div class="line">            e=<span class="number">1</span>-e;<span class="comment">//滚动数组</span></div><div class="line">            </div><div class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;<span class="number">7</span>;++j)&#123;</div><div class="line">                dp[e][j]=<span class="number">0</span>;</div><div class="line">                <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;<span class="number">7</span>;++k)&#123;</div><div class="line">                    <span class="keyword">if</span>(flag[k][convert[j]]==<span class="number">-1</span>)&#123;</div><div class="line">                        dp[e][j]=(dp[e][j]+dp[<span class="number">1</span>-e][k]*<span class="number">4</span>)%MOD;</div><div class="line">                    &#125;    </div><div class="line">                &#125;    </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">7</span>;++i)&#123;</div><div class="line">            sum=(sum+dp[e][i])%MOD;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第十题-生命之树"><a href="#第十题-生命之树" class="headerlink" title="第十题 生命之树"></a>第十题 生命之树</h2><blockquote>
<p>在X森林里，上帝创建了生命之树。<br>他给每棵树的每个节点（叶子也称为一个节点）上，都标了一个整数，代表这个点的和谐值。<br>上帝要在这棵树内选出一个非空节点集S，使得对于S中的任意两个点a,b，都存在一个点列 {a, v1, v2, …, vk, b} 使得这个点列中的每个点都是S里面的元素，且序列中相邻两个点间有一条边相连。<br>在这个前提下，上帝要使得S中的点所对应的整数的和尽量大。<br>这个最大的和就是上帝给生命之树的评分。<br>经过atm的努力，他已经知道了上帝给每棵树上每个节点上的整数。但是由于 atm 不擅长计算，他不知道怎样有效的求评分。他需要你为他写一个程序来计算一棵树的分数。<br>「输入格式」<br>第一行一个整数 n 表示这棵树有 n 个节点。<br>第二行 n 个整数，依次表示每个节点的评分。<br>接下来 n-1 行，每行 2 个整数 u, v，表示存在一条 u 到 v 的边。由于这是一棵树，所以是不存在环的。<br>「输出格式」<br>输出一行一个数，表示上帝给这棵树的分数。<br>「样例输入」<br>5<br>1 -2 -3 4 5<br>4 2<br>3 1<br>1 2<br>2 5<br>「样例输出」<br>8<br>「数据范围」<br>对于 30% 的数据，n &lt;= 10<br>对于 100% 的数据，0 &lt; n &lt;= 10^5, 每个节点的评分的绝对值不超过 10^6 。<br>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗 &lt; 3000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</xxx></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一题-奖券数目&quot;&gt;&lt;a href=&quot;#第一题-奖券数目&quot; class=&quot;headerlink&quot; title=&quot;第一题 奖券数目&quot;&gt;&lt;/a&gt;第一题 奖券数目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有些人很迷信数字，比如带“4”的数字，认为和“死”谐音，就觉得不吉
    
    </summary>
    
    
      <category term="蓝桥杯" scheme="http://www.z16388.win/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>GJB5369考点笔记</title>
    <link href="http://www.z16388.win/2017/03/18/GJB5369%E8%80%83%E7%82%B9%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.z16388.win/2017/03/18/GJB5369考点笔记/</id>
    <published>2017-03-18T02:35:42.000Z</published>
    <updated>2017-04-13T13:25:20.920Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启用规则"><a href="#启用规则" class="headerlink" title="启用规则"></a>启用规则</h1><ol>
<li>禁止使用嵌套的注释</li>
<li>建议不适用单行的注释“//”</li>
<li>禁止使用不适合的循环变量类型（循环变量类型应为int）</li>
<li>循环变量必须是局部声明的</li>
<li>谨慎使用无限循环语句</li>
<li>避免在循环中使用break语句</li>
<li>谨慎使用无法控制的循环条件</li>
<li>禁止对指针变量使用强制类型转换赋值</li>
<li>谨慎使用其他类型变量给指针赋值</li>
<li>避免使用不必要的类型转换</li>
<li>枚举元素的初始化必须完整</li>
<li>结构体变量初始化的类型必须一致</li>
<li>结构体变量初始化的嵌套结构必须与定义的相一致</li>
<li>变量使用前必须被赋过值</li>
<li>禁止对实数类型的量做是否相等的比较</li>
<li>禁止逻辑判别的表达式不是逻辑表达式</li>
<li>switch语句中的表达式禁止是逻辑表达式</li>
<li>建议逻辑表达式采用显式的表达</li>
<li>禁止枚举类型中的元素名与已有的变量名同名</li>
<li>禁止局部变量与全局变量同名</li>
<li>禁止形参名与全局变量名同名</li>
<li>禁止形参名与类型或标识符同名</li>
<li>禁止在内部块中重定义已有的变量名</li>
<li>禁止复杂表达式中使用volatile类型的变量</li>
<li>在源程序中谨慎使用非标准字符</li>
<li>禁止使用预处理操作符#和##</li>
<li>过程名禁止被重用</li>
<li>禁止过程或函数中的参数表为空</li>
<li>禁止在同一个宏中使用多个#或##</li>
<li>禁止定义不像函数的宏</li>
<li>禁止在宏中包含不允许的项</li>
<li>禁止重新定义保留字</li>
<li>字符型变量必须明确定义是有符号还是无符号</li>
<li>禁止对一个名字重新定义</li>
<li>用typedef自定义的类型禁止被重定义</li>
<li>禁止在同一个文件中有#if而没有#endif</li>
<li>禁止数组没有边界限定</li>
<li>标号名禁止被重用</li>
<li>禁止在#include&lt;&gt;中使用绝对的路径名</li>
<li>禁止结构体声明不完整</li>
<li>禁止结构体定义中含有空域</li>
<li>禁止声明多重标号</li>
<li>在过程声明中必须对参数说明</li>
<li>禁止过程参数只有类型没有标识符</li>
<li>禁止在过程参数表中使用省略号</li>
<li>禁止重新定义使用C或C++的关键字</li>
<li>建议使用typedef在统一的变量声明头文件中对基本的变量类型重新定义</li>
<li>避免将过程定义为参数</li>
<li>过程中避免使用过多的参数，建议不要超过20个</li>
<li>在结构体定义中谨慎使用位域</li>
<li>禁止在块中使用#define或#undef</li>
<li>谨慎使用#pragma</li>
<li>谨慎使用联合(union)的声明</li>
<li>在结构体中谨慎使用无名位域</li>
<li>main必须定义为int main(void)或int main(int,char*[])的形式</li>
<li>循环体必须用大括号括起来</li>
<li>then/else中的语句必须用大括号括起来</li>
<li>逻辑表达式的连接必须使用括号</li>
<li>禁止在头文件前有可执行的代码</li>
<li>宏参数必须用括号括起来</li>
<li>嵌入汇编程序的过程必须是纯汇编程序</li>
<li>头文件名禁止使用“‘”,”、”,”\”和”#”等字符</li>
<li>禁止字符串中单独使用”\”，字符串的终止必须使用”\0”</li>
<li>建议一个文件中的程序总行不超过200行</li>
<li>建议一个过程或函数中的程序总行不超过200行</li>
<li>禁止条件判别成立时相应分支无可执行语句</li>
<li>在if…else if语句中必须使用else分支</li>
<li>禁止条件判别的else分支无可执行语句</li>
<li>在switch语句中必须使用default语句</li>
<li>禁止使用空switch语句</li>
<li>禁止switch语句中只包含defau语句</li>
<li>禁止switch的case语句不是由break终止</li>
<li>禁止switch的case语句中无任何可执行语句</li>
<li>禁止将参数指针赋值给过程指针</li>
<li>禁止将指针的指针超过两级</li>
<li>禁止将过程声明为指针类型</li>
<li>谨慎使用指针的逻辑比较</li>
<li>谨慎对指针进行代数运算</li>
<li>禁止直接从过程中跳出</li>
<li>禁止使用goto语句</li>
<li>避免使用setimp/longimp</li>
<li>禁止在非赋值表达式中出现赋值操作符</li>
<li>禁止对常数值做逻辑非的运算</li>
<li>禁止对有符号类型使用位运算</li>
<li>禁止对枚举类型的越限使用</li>
<li>禁止在逻辑表达式中使用赋值操作福</li>
<li>禁止赋值操作符与“&amp;&amp;”，“||”连用</li>
<li>禁止位操作符带有布尔型的操作数</li>
<li>禁止位操作符作用于布尔值</li>
<li>数组的使用必须保证不会出现越界</li>
<li>禁止对有符号的类型进行位运算</li>
<li>对变量进行位运算必须保证不会产生溢出</li>
<li>禁止给无符号变量赋负值</li>
<li>有符号类型的长度必须大于等于两位</li>
<li>位的定义必须是由符号整数或无符号整数</li>
<li>禁止给变量赋的值与变量的类型不一致</li>
<li>赋值类型必须匹配</li>
<li>避免使用逗号操作符</li>
<li>谨防长度操作符sizeof的副作用</li>
<li>谨慎使用不同类型变量的混合运算</li>
<li>避免由于设计的原因导致某些代码不能执行</li>
<li>主过程所在的文件中禁止有未被该文件中任何过程调用的子过程</li>
<li>static类型的过程在所在的文件中必须被调用</li>
<li>禁止使用被禁用的过程、函数、文件或名称</li>
<li>禁止用一个表达式中调用多个相关函数</li>
<li>禁止void类型的变量作为参数进行传递</li>
<li>禁止实参和形参类型不一致</li>
<li>避免过程参数在过程调用中未被使用</li>
<li>避免以非调用方式使用函数</li>
<li>谨慎使用abort，exit等函数</li>
<li>禁止单独使用小写字母”i”或大写字母”O”作为变量名</li>
<li>禁止三字母词的使用</li>
<li>使用八进制数必须加以注释</li>
<li>避免使用”+=”或”-=”操作符</li>
<li>谨慎使用”++”或”–”操作符</li>
<li>避免使用continue语句</li>
<li>谨慎使用三重表达式</li>
<li>避免使用不起作用的语句</li>
<li>避免使用空语句</li>
<li>谨慎使用寄存器变量</li>
<li>避免使用老的参数表的定义形式</li>
<li>函数必须有返回语句</li>
<li>禁止void类型的过程中的return语句带有返回值</li>
<li>有返回值的函数中，return必须带有返回值</li>
<li>函数返回类型必须一致</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启用规则&quot;&gt;&lt;a href=&quot;#启用规则&quot; class=&quot;headerlink&quot; title=&quot;启用规则&quot;&gt;&lt;/a&gt;启用规则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;禁止使用嵌套的注释&lt;/li&gt;
&lt;li&gt;建议不适用单行的注释“//”&lt;/li&gt;
&lt;li&gt;禁止使用不适合的循环变量类
    
    </summary>
    
    
      <category term="GJB5369" scheme="http://www.z16388.win/tags/GJB5369/"/>
    
      <category term="软件测试" scheme="http://www.z16388.win/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】5.3单源最短路径Dijkstra算法</title>
    <link href="http://www.z16388.win/2017/03/15/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%915-3%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Dijkstra%E7%AE%97%E6%B3%95/"/>
    <id>http://www.z16388.win/2017/03/15/【ACM教程】5-3单源最短路径Dijkstra算法/</id>
    <published>2017-03-15T08:46:18.000Z</published>
    <updated>2017-04-13T13:25:15.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三节-单源最短路径Dijkstra算法"><a href="#第三节-单源最短路径Dijkstra算法" class="headerlink" title="第三节 单源最短路径Dijkstra算法"></a>第三节 单源最短路径Dijkstra算法</h1><p>&emsp;&emsp;最短路径的问题在生活中是十分常见的。不仅仅是表面上的路程计算，网络中的数据传输什么的都能用到最短路径算法。我们在求最短路问题时，常用两种算法。Dijkstra单源最短路径算法和全源最短路径Floyd算法。首先对Dijkstra算法进行学习。</p>
<p>&emsp;&emsp;Dijkstra算法用于计算一个点到其他所有节点的最短路径，是比较有代表性的最短路径算法。数学的很多学科中，都会接触到。它的思路是：把所有的顶点分为两组，一组是已经知道最短路径的，然后从未知最短路径并与之相邻的顶点中选出一个最短的放进已知组里，直到将所有的点放入已知组，找到最短路。</p>
<p>&emsp;&emsp;举个例子，以下图为例，求A到F的最短路。</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1489579993939&amp;di=ac25fd27b19e70f9a1efe09cb4f23412&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fnigang%2F569181%2Fo_%25E5%259B%25BE.png" alt=""></p>
<p>&emsp;&emsp;首先，已知点是A，然后我们去找和他相邻的，距离最短的点。这时我们看到C点距离A点是3，比B的6要短，所以我们将C点放入已知集合；然后看A、C相邻的点，最短的路径是C到B，所以把B点放入已知集合。就这样一直做下去，直到将所有点放入已知点集合为止。我们将上面的过程，记录在表格里。</p>
<table>
<thead>
<tr>
<th style="text-align:left">步骤</th>
<th style="text-align:center">已知点集</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
<th>F</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:center">A</td>
<td>6</td>
<td>3</td>
<td>00</td>
<td>00</td>
<td>00</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:center">A、C</td>
<td>5</td>
<td></td>
<td>6</td>
<td>7</td>
<td>00</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:center">A、C、B</td>
<td></td>
<td></td>
<td>6</td>
<td>7</td>
<td>00</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:center">A、C、B、D</td>
<td></td>
<td></td>
<td></td>
<td>7</td>
<td>9</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:center">A、C、B、D、E</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>9</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;通过上面的步骤，我们将A到F的最短路找到了：A-C-D-F。除此之外，A到所有点的最短路我们都能够找到。那么，下面我们考虑用程序来实现这个过程。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x0f0f0f0f <span class="comment">//用INF来代替正无穷（+OO）</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1100</span></div><div class="line"><span class="keyword">int</span> low[N];  <span class="comment">//low[i]数组存放A号节点到已知集合中i号节点的最短距离</span></div><div class="line"><span class="keyword">int</span> vis[N];  <span class="comment">//vis[i] = 1表示i号节点已经在已知集合中，否则反之</span></div><div class="line"><span class="keyword">int</span> cost[N][N],n;<span class="comment">//cost[i][j]表示i节点到j节点的直接距离</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> edge,k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//这里是要初始化low[]数组和vis[]数组</span></div><div class="line">	low[i] = cost[start][i];</div><div class="line">	vis[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    vis[start] = <span class="number">1</span>;</div><div class="line">    low[start] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</div><div class="line">	edge = INF;<span class="comment">//edge是已知集合到未知集合的最短边</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//这里是要找到一条最短边:编号k,边长edge</span></div><div class="line">	    <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;edge&gt;low[j])&#123;</div><div class="line">		edge = low[j];</div><div class="line">		k = j;</div><div class="line">	    &#125; </div><div class="line">	&#125;</div><div class="line">	vis[k] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//更新得到的新节点k号节点发出去的边</span></div><div class="line">	    <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;low[j] &gt; low[k] + cost[k][j])&#123;</div><div class="line">		low[j] = low[k] + cost[k][j];</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;上面是Dijkstra算法的C语言实现，大家可以将其作为模板记录下来，以后可以直接使用。我们就以上图为例，练习一下Dijkstra算法的使用。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x0f0f0f0f</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1100</span></div><div class="line"><span class="keyword">int</span> low[N];</div><div class="line"><span class="keyword">int</span> vis[N];</div><div class="line"><span class="keyword">int</span> cost[N][N],n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> edge,k;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">	low[i] = cost[start][i];</div><div class="line">	vis[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    vis[start] = <span class="number">1</span>;</div><div class="line">    low[start] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</div><div class="line">	edge = INF;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">	    <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;edge&gt;low[j])&#123;</div><div class="line">		edge = low[j];</div><div class="line">		k = j;</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">	vis[k] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;=n;j++)&#123;</div><div class="line">	    <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;low[j] &gt; low[k] + cost[k][j])&#123;</div><div class="line">		low[j] = low[k] + cost[k][j];</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(cost,INF,<span class="keyword">sizeof</span>(cost));</div><div class="line">    n=<span class="number">6</span>;</div><div class="line">    cost[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">6</span>,cost[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">3</span>;</div><div class="line">    cost[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">2</span>,cost[<span class="number">2</span>][<span class="number">4</span>]=<span class="number">5</span>;</div><div class="line">    cost[<span class="number">3</span>][<span class="number">4</span>]=<span class="number">3</span>,cost[<span class="number">3</span>][<span class="number">5</span>]=<span class="number">4</span>;</div><div class="line">    cost[<span class="number">4</span>][<span class="number">5</span>]=<span class="number">2</span>,cost[<span class="number">4</span>][<span class="number">6</span>]=<span class="number">3</span>;</div><div class="line">    cost[<span class="number">5</span>][<span class="number">6</span>]=<span class="number">5</span>;</div><div class="line">    Dijkstra(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,low[n]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三节-单源最短路径Dijkstra算法&quot;&gt;&lt;a href=&quot;#第三节-单源最短路径Dijkstra算法&quot; class=&quot;headerlink&quot; title=&quot;第三节 单源最短路径Dijkstra算法&quot;&gt;&lt;/a&gt;第三节 单源最短路径Dijkstra算法&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】4.2动态规划初体验</title>
    <link href="http://www.z16388.win/2017/03/14/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%914-2%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.z16388.win/2017/03/14/【ACM教程】4-2动态规划初体验/</id>
    <published>2017-03-14T12:42:34.000Z</published>
    <updated>2017-04-13T13:25:15.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二节-动态规划初体验"><a href="#第二节-动态规划初体验" class="headerlink" title="第二节 动态规划初体验"></a>第二节 动态规划初体验</h1><p>&emsp;&emsp;在完成了动态规划概念的理解之后，我们来拿一道简单的题目理解一下问题的解决过程。</p>
<p>&emsp;&emsp;斐波那契数列F(n)。当n=1、2时，F(2)=F(1)=1;其他情况F(n)=F(n-1)+F(n-2)。我们发现，这是一个递归的过程，根据前面所学知识，不难写程序：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">3</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> F(n<span class="number">-2</span>)+F(n<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,F(<span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,F(i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;但是，如果把这道题用在一道题目里，可能会造成超时。因为我们在每次运算中，都要把之前的所有情况都要再计算一遍，这会造成很多浪费。如果我们把每次运算的结果存放在数组里，那么在计算F(n)时，我们只需要在存放的结果中把需要的找出来，进行计算，在存进去。下面是改进的函数F：(假设n&lt;=1000)</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> A[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;<span class="number">3</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(A[n]) <span class="keyword">return</span> A[n];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> A[n]=F(n<span class="number">-1</span>)+F(n<span class="number">-2</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(A));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,F(<span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,F(i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;当状态转移方程太过于复杂的时候，我们可以使用打表的方法——把所有的可能计算一遍，存在数组里。根据输入直接给出结果，实现方法如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1010</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    A[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    A[<span class="number">2</span>]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=<span class="number">1000</span>;i++) &#123;</div><div class="line">        A[i]=A[i<span class="number">-2</span>]+A[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    F();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,A[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>,A[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这是动态规划中的枚举法，比较暴力。水题可以尝试使用这种方法去做，但是比赛的时候，oj系统会有防止打表的机制。因此，这种方法最好不要去使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二节-动态规划初体验&quot;&gt;&lt;a href=&quot;#第二节-动态规划初体验&quot; class=&quot;headerlink&quot; title=&quot;第二节 动态规划初体验&quot;&gt;&lt;/a&gt;第二节 动态规划初体验&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在完成了动态规划概念的理解之后，我们来拿一道
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
      <category term="动态规划" scheme="http://www.z16388.win/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】4.3下降/非降子序列问题</title>
    <link href="http://www.z16388.win/2017/03/07/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%914-3%E4%B8%8B%E9%99%8D%EF%80%A2%E9%9D%9E%E9%99%8D%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>http://www.z16388.win/2017/03/07/【ACM教程】4-3下降非降子序列问题/</id>
    <published>2017-03-07T12:04:26.000Z</published>
    <updated>2017-04-13T13:25:15.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三节-下降-非降子序列问题"><a href="#第三节-下降-非降子序列问题" class="headerlink" title="第三节 下降/非降子序列问题"></a>第三节 下降/非降子序列问题</h1><p>&emsp;&emsp;这种题目在ACM竞赛中，通常作为“水题”出现。但是水题不水，不了解动态规划的还是AC不了这种类型。我们将会在这一节中，学习解决这种类型题。</p>
<h2 id="模型抽象"><a href="#模型抽象" class="headerlink" title="模型抽象"></a>模型抽象</h2><p>&emsp;&emsp;子序列问题分为下降子序列问题和非降子序列问题，解决方法类似：</p>
<blockquote>
<ul>
<li>最长非降子序列问题：在一个无序序列a[1],a[2],…,a[n]中，找到一个最长的子序列满足：</li>
</ul>
<ol>
<li>&emsp;a[i]&lt;=a[j]&lt;=…&lt;=a[m]</li>
<li>&emsp;i&lt;j&lt;…&lt;m</li>
</ol>
<ul>
<li>最长下降子序列问题：在一个无序序列a[1],a[2],…,a[n]中，找到一个最长的子序列满足：</li>
</ul>
<ol>
<li>a[i]&gt;a[j]&gt;…&gt;a[m]</li>
<li>i&gt;j&gt;…&gt;m</li>
</ol>
</blockquote>
<p>&emsp;&emsp;我们从动态规划的三要素入手，来分析这种问题是否能使用动态规划来解决：如果要找到一个长度为k的子序列，那么我们需要一个长度为k-1的满足条件的的序列，再判断第k个元素是否满足条件，这显然满足最优子结构。在考虑第i个元素时，只需要看前面的i-1个，满足无后效性。因此这类题目可以使用动态规划来解决。</p>
<p>&emsp;&emsp;下面我们来做一道经典的题目：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1257" target="_blank" rel="external">hdu1257：最少拦截系统</a></p>
<p>&emsp;&emsp;</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第三节-下降-非降子序列问题&quot;&gt;&lt;a href=&quot;#第三节-下降-非降子序列问题&quot; class=&quot;headerlink&quot; title=&quot;第三节 下降/非降子序列问题&quot;&gt;&lt;/a&gt;第三节 下降/非降子序列问题&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这种题目在ACM竞赛
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
      <category term="动态规划" scheme="http://www.z16388.win/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】4.1动态规划简介</title>
    <link href="http://www.z16388.win/2017/03/06/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%914-1%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.z16388.win/2017/03/06/【ACM教程】4-1动态规划简介/</id>
    <published>2017-03-06T12:05:18.000Z</published>
    <updated>2017-04-13T13:25:15.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一节-动态规划简介"><a href="#第一节-动态规划简介" class="headerlink" title="第一节 动态规划简介"></a>第一节 动态规划简介</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>&emsp;&emsp;动态规划（DP）是运筹学的一个分支，是求解决策过程最优化的数学方法。它将多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解。在现实生活中，我们经常会使用到动态规划。例如求最短路径、库存管理、排序、装载等问题，用动态规划方法比用其他方法更加简便。</p>
<p>&emsp;&emsp;动态规划主要用于求解以时间划分阶段的动态过程问题。但是在一些与时间无关的问题中，我们可以人为地引入时间因素，把它视为多阶段决策过程，也可以使用动态规划来求解。</p>
<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>&emsp;&emsp;动态规划算法经常用于求解具有某种最优性的问题中。在这类问题里，可能会有很多的可行解。每个解都对应一个值，我们希望得到具有最优解的值。动态规划算法的思路与分治法类似，其具体的思想也是将问题分割成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>
<p>&emsp;&emsp;在使用分治法的过程中，有些子问题可能计算了多次。如果我们能够保存已经解决的子问题的答案，在需要的时候直接拿出来，这样就会节省很多时间。我们可以使用一个表来存放我们计算的子问题的结果，无论这个问题在以后是否会用到，只要它被计算过，我们就将它存入表格中。这就是动态规划的基本思想。</p>
<h2 id="相关术语与性质"><a href="#相关术语与性质" class="headerlink" title="相关术语与性质"></a>相关术语与性质</h2><p>&emsp;&emsp;首先，我们来介绍动态规划的三要素——阶段、状态和决策。</p>
<p>&emsp;&emsp;阶段：把所给求解问题的过程恰当地分成若干个相互联系的阶段，以便于求解，过程不同，阶段数就可能不同．描述阶段的变量称为阶段变量。在多数情况下，阶段变量是离散的，用k表示。此外，也有阶段变量是连续的情形。如果过程可以在任何时刻作出决策，且在任意两个不同的时刻之间允许有无穷多个决策时，阶段变量就是连续的。</p>
<p>&emsp;&emsp;状态：状态表示每个阶段开始面临的自然状况或客观条件，它不以人们的主观意志为转移，也称为不可控因素。过程的状态通常可以用一个或一组数来描述，称为状态变量。一般，状态是离散的，但有时为了方便也将状态取成连续的。</p>
<p>&emsp;&emsp;决策：一个阶段的状态给定以后，从该状态演变到下一阶段某个状态的一种选择（行动）称为决策。在最优控制中，也称为控制。在许多问题中，决策可以自然而然地表示为一个数或一组数。不同的决策对应着不同的数值。描述决策的变量称决策变量，因状态满足无后效性，故在每个阶段选择决策时只需考虑当前的状态而无须考虑过程的历史。</p>
<p>&emsp;&emsp;在介绍决策时，我们提到了一个很重要的性质——无后效性。这是动态规划算法的的基本准则：</p>
<blockquote>
<p>&emsp;&emsp;我们要求状态具有下面的性质：如果给定某一阶段的状态，则在这一阶段以后过程中的发展不受这阶段以前各段状态的影响，所有各阶段都确定时，整个过程也就确定了；换句话说，过程的每一次实现可以用一个状态序列表示，在前面的例子中每阶段的状态是该线路的始点，确定了这些点的序列，整个线路也就完全确定。从某一阶段以后的线路开始，当这段的始点给定时，不受以前线路（所通过的点）的影响。状态的这个性质意味着过程的历史只能通过当前的状态去影响它的未来的发展，这个性质称为无后效性。</p>
</blockquote>
<p>&emsp;&emsp;状态转移方程：给定k阶段状态变量x(k)的值后，如果这一阶段的决策变量一经确定，第k+1阶段的状态变量x(k+1)也就完全确定，即x(k+1)的值随x(k)和第k阶段的决策u(k)的值变化而变化，那么可以把这一关系看成(x(k)，u(k))与x(k+1)确定的对应关系，我们来用x(k+1)=Tk(x(k),u(k))表示。它展示了从k阶段到k+1阶段的状态转移规律，我们称之为状态转移方程。</p>
<p>&emsp;&emsp;由每个阶段的决策组成的序列称为策略。对于每一个实际的多阶段决策过程，可供选取的策略有一定的范围限制，这个范围称为允许策略集合。允许策略集合中达到最优效果的策略称为最优策略。</p>
<p>&emsp;&emsp;最优化原理:作为整个过程的最优策略，它满足：相对前面决策所形成的状态而言，余下的子策略必然构成“最优子策略”。一个问题满足最优化原理也称其拥有最优子结构性质。最优性原理实际上是要求问题的最优策略的子策略也是最优。</p>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>&emsp;&emsp;综合前面的概念，如果我们把动态规划求解问题的过程比作工厂的生产线，那么阶段就是生产某个商品的不同环节，状态就是工件当前的状态，决策就是对工件进行的操作。之前对工件进行的操作只是在当时起效，我们可以在后面的过程中对它进行进一步的加工。不同阶段是对前面产品的一个小小的总结，由一个个过程，最终构成了最终的生产线。</p>
<p>&emsp;&emsp;一个状态经过一个决策变成了另外的一个状态，这个过程就是状态转移。而用来描述状态转移的方程就是状态转移方程。</p>
<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>&emsp;&emsp;虽然动态规划很强大，但是它并不是万能的，只能够解决多阶段决策最优化问题。一般在题目中，出现让你求最优解的就要考虑使用动态规划了。但是需要满足一下两个条件。</p>
<ol>
<li>最优子结构（最优化原理）</li>
<li>无后效性</li>
</ol>
<p>&emsp;&emsp;一个最优解，它的子问题的解也是最优解，我们就称这个问题具有最优子结构。那无后效性呢？就是在状态i求解时需要用到状态j，而求解j的时候需要k…当求解状态N的时候，需要用到i。那么这个时候就形成了一个环，无法求解了。</p>
<h2 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h2><p>&emsp;&emsp;在判断题目可以使用动态规划解决之后，我们可以使用以下几种方法进行解题：</p>
<blockquote>
<ol>
<li><em>模型匹配法</em>我们首先要考虑的就是这个方法了。分析题目，如果这个题目是我们之后讲到的模型，就可以直接套用；</li>
<li><em>三要素法</em>确定题目中的三要素，从比较明显的入手，尝试解题；</li>
<li><em>规律法</em>多计算出几组数据，试寻找他们之间的联系，建立方程；</li>
<li><em>边界条件法</em>找到问题的边界条件，分析边界条件和与之邻接状态之间的联系。</li>
<li><em>放宽约束和增加约束</em>对问题修改，增加或删除一些条件，以便于解题。</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一节-动态规划简介&quot;&gt;&lt;a href=&quot;#第一节-动态规划简介&quot; class=&quot;headerlink&quot; title=&quot;第一节 动态规划简介&quot;&gt;&lt;/a&gt;第一节 动态规划简介&lt;/h1&gt;&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;head
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
      <category term="动态规划" scheme="http://www.z16388.win/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】5.2图的存储方式</title>
    <link href="http://www.z16388.win/2017/03/06/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%915-2%E5%9B%BE%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.z16388.win/2017/03/06/【ACM教程】5-2图的存储方式/</id>
    <published>2017-03-06T11:03:14.000Z</published>
    <updated>2017-04-13T13:25:15.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二节-图的存储方式"><a href="#第二节-图的存储方式" class="headerlink" title="第二节 图的存储方式"></a>第二节 图的存储方式</h1><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>&emsp;&emsp;我们在第三章对数据结构的简单了解中学习了，图和树可以使用链表来进行存储。参考<a href="http://www.z16388.win/2016/11/16/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%9B%BE/">第六节 数据结构基础（2）树、二叉树和图</a>。虽然链表能够很方便地，在逻辑上对图进行定义和运算，但是我们知道，在比赛中我们的时间是有限的。如果花大量的时间去构建一个模型，然后针对这个模型的各种运算进行编写会耗费大量的时间。这个时候，我们就需要一个简单的数学模型，来处理这些数据。</p>
<h2 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h2><p>&emsp;&emsp;在数学上，我们经常用矩阵来表示一个图。我们知道，图是由它们的顶点和他们之间的邻接关系来唯一确定的。这个时候我们只需要两个矩阵，一个用来存放他们的定点，另一个来存放他们之间的关系。</p>
<p>&emsp;&emsp;举个例子：在上一节中，我们接触到了一个非常经典的七桥问题的图。</p>
<p><img src="http://amuseum.cdstm.cn/AMuseum/math/images/c/7_brige_2.jpg" alt=""></p>
<p>&emsp;&emsp;图中的三个点我们分别命名为：</p>
<blockquote>
<p>A<br>B &emsp;&emsp;&emsp;D<br>C</p>
</blockquote>
<p>&emsp;&emsp;这时，我们可以用一个矩阵V来表示这个图中的点。<code>V={A,B,C,D}</code>那怎么来表示他们之间的联系呢？我们用另一个矩阵M，如果两个点之间是相连的，我们就让m^ij=m^ji=1。如果它们之间没有联系，则m^ij=m^ji=inf。那么，<br>M=</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">inf</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">B</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">C</td>
<td style="text-align:center">inf</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">D</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>&emsp;&emsp;如果这是个有向图，我们可以根据行和列来确定出发和到达的定点；如果这是个对路径长度有要求的图，就比如在计算最短路径的时候，我们可以将矩阵中的数据改为两个点之间的距离。</p>
<p>&emsp;&emsp;在编程的时候，我们可以使用数组来存放这样的矩阵。既方便计算，也能够精确表示。在今后的学习中，我们大多数时候都会使用这种方法来表示和运算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第二节-图的存储方式&quot;&gt;&lt;a href=&quot;#第二节-图的存储方式&quot; class=&quot;headerlink&quot; title=&quot;第二节 图的存储方式&quot;&gt;&lt;/a&gt;第二节 图的存储方式&lt;/h1&gt;&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerli
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】5.1图论的基本概念</title>
    <link href="http://www.z16388.win/2017/03/06/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%915-1%E5%9B%BE%E8%AE%BA%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.z16388.win/2017/03/06/【ACM教程】5-1图论的基本概念/</id>
    <published>2017-03-06T10:25:05.000Z</published>
    <updated>2017-04-13T13:25:15.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一节-图论的基本概念"><a href="#第一节-图论的基本概念" class="headerlink" title="第一节 图论的基本概念"></a>第一节 图论的基本概念</h1><p>&emsp;&emsp;在前面的学习中，我们简单地接触到了树、图等图论知识的基础概念，在这一章中，我们将对图论做系统的研究。图论相关的知识是ACM中比较重要的一部分，在日常的软件设计中，也较为常用。</p>
<h2 id="图论的历史"><a href="#图论的历史" class="headerlink" title="图论的历史"></a>图论的历史</h2><p>&emsp;&emsp;图论是一门应用十分广泛、内容非常丰富的数学学科，也是近几十年来较为活跃的数学分支之一。它的起源很早，瑞士数学家欧拉在1736年解决了当时颇为有名的一个数学问题，即哥尼斯堡七桥问题，从而使他成为了图论的创始人。</p>
<p>&emsp;&emsp;七桥问题呢，就是在一个城市的中间，有一条河，河中有两个小岛。在两岸和小岛之间呢，有七座桥。我们需要找到一个路径，使得我们从这四块陆地的其中一个开始，通过每一座桥，并恰好回到起点。</p>
<p><img src="http://img.my.csdn.net/uploads/201303/16/1363441203_6349.jpg" alt=""></p>
<p>&emsp;&emsp;欧拉为了解决七桥问题，将这个问题转化为了一个数学问题。他认为这种走法是否存在，与岛的形状、大小、以及桥的长短等因素都没有关系，重要的是陆地之间是否有桥联通。因此他用点表示陆地，线表示陆地间的桥梁，就得出了七桥问题的示意图。欧拉在1736年证明了这个路径是不存在的，并进行了进一步的推广得出了一个判别法则—，用于判别给定一个图是否可以走遍。</p>
<p><img src="http://amuseum.cdstm.cn/AMuseum/math/images/c/7_brige_2.jpg" alt=""></p>
<p>&emsp;&emsp;除此之外，我们在高中曾经学习过基尔霍夫电压定律。基尔霍夫在1847年运用图论解决了电路理论中求解联立方程组问题，并引入了“树”的概念，可惜在当时并没有受到重视。1857年，凯莱在研究饱和碳氢化合物时，发现了一族重要的图，称其为树，并利用树来计算其同分异构体的数目。</p>
<p>&emsp;&emsp;20世纪后，图论的应用渗透到了其他的很多领域，在计算机网络、博弈论等方面起到了重要的作用。它是组合数学的一个分支，和数值分析、拓扑学等有着密切的联系。比如对于基础的图论来说，它不需要有高深复杂的数学工具，只需要一些集合、二元关系与线性代数知识，结合一般的逻辑推理来解决问题。</p>
<h2 id="图论简介"><a href="#图论简介" class="headerlink" title="图论简介"></a>图论简介</h2><p>&emsp;&emsp;这里我们讨论的图论并不是几何学上的图形，而是客观世界中，某些具体事物间相互联系的一个数学抽象。用点来表示事物，用边来表示关系。这种由定点及连接这些点的所有边组成的就是我们图论中的图。其中的点我们称为顶点，线称之为边。当边具有方向性时，图是有向图。（否则为无向图）</p>
<p>&emsp;&emsp;图在研究现实问题时会经常使用到，比如在地图上找到一条能够最快到达目的地的线路。这都是我们今后将要学习的内容。</p>
<p>&emsp;&emsp;从一个顶点出发，如果存在一个路径，能够回到该顶点，我们称之为圈。没有圈的连通图称为树，树是特殊的图。在解决问题时，我们有时候需要将图转化为它的“生成树”再对问题进行处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一节-图论的基本概念&quot;&gt;&lt;a href=&quot;#第一节-图论的基本概念&quot; class=&quot;headerlink&quot; title=&quot;第一节 图论的基本概念&quot;&gt;&lt;/a&gt;第一节 图论的基本概念&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在前面的学习中，我们简单地接触到了树、图等图
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>第七届蓝桥杯C/C++省赛B组题目详解</title>
    <link href="http://www.z16388.win/2017/02/21/lanqiao7/"/>
    <id>http://www.z16388.win/2017/02/21/lanqiao7/</id>
    <published>2017-02-21T11:36:29.000Z</published>
    <updated>2017-04-13T13:25:15.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一题-煤球数目"><a href="#第一题-煤球数目" class="headerlink" title="第一题 煤球数目"></a>第一题 煤球数目</h2><blockquote>
<p>有一堆煤球，堆成三角棱锥形。具体：<br>第一层放1个，<br>第二层3个（排列成三角形），<br>第三层6个（排列成三角形），<br>第四层10个（排列成三角形），<br>….<br>如果一共有100层，共有多少个煤球？<br>请填表示煤球总数目的数字。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;经过简单的分析，我们可以发现：第n层(n&gt;=2)的煤球个数为该层层数与上一层煤球数之和。所以易写出程序：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> c,last=<span class="number">0</span>,res=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">100</span>;c++) &#123;</div><div class="line">        last=c+last;</div><div class="line">        res+=last;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;最终结果为：171700.</p>
<h2 id="第二题-生日蜡烛"><a href="#第二题-生日蜡烛" class="headerlink" title="第二题 生日蜡烛"></a>第二题 生日蜡烛</h2><blockquote>
<p>某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。<br>现在算起来，他一共吹熄了236根蜡烛。<br>请问，他从多少岁开始过生日party的？<br>请填写他开始过生日party的年龄数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;对于这样的填空题目，不需要考虑代码的时间复杂度，直接暴力求解即可（就算在草稿纸上计算也很容易算出来），类似于之前讲过的百钱百鸡问题。这道题目的解决代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> start,year,l;</div><div class="line">    <span class="keyword">for</span>(start=<span class="number">1</span>;start&lt;=<span class="number">236</span>;start++)</div><div class="line">        <span class="keyword">for</span>(year=start;year&lt;=<span class="number">236</span>;year++) &#123;</div><div class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(l=start;l&lt;=year;l++)&#123;</div><div class="line">                sum+=l;</div><div class="line">                <span class="keyword">if</span>(sum==<span class="number">236</span>) &#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,start);</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;最终结果为26.</p>
<h2 id="第三题-凑算式"><a href="#第三题-凑算式" class="headerlink" title="第三题 凑算式"></a>第三题 凑算式</h2><blockquote>
<p>　　B　　 DEF<br>A +  ——  +  ———   =  10<br>　　C　　 GHI<br>这个算式中A~I代表1~9的数字，不同的字母代表不同的数字。<br>比如：<br>6+8/3+952/714 就是一种解法，<br>5+3/1+972/486 是另一种解法。<br>这个算式一共有多少种解法？<br>注意：你提交应该是个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这道题也可以使用暴力枚举的方法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b,c,d,e,f,g,h,i,res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">double</span> sum;</div><div class="line">    <span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">9</span>;a++)</div><div class="line">        <span class="keyword">for</span>(b=<span class="number">1</span>;b&lt;=<span class="number">9</span>;b++) &#123;</div><div class="line">            <span class="keyword">if</span>(a==b) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">for</span>(c=<span class="number">1</span>;c&lt;=<span class="number">9</span>;c++) &#123;</div><div class="line">                <span class="keyword">if</span>(c==a||c==b) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">for</span>(d=<span class="number">1</span>;d&lt;=<span class="number">9</span>;d++) &#123;</div><div class="line">                    <span class="keyword">if</span>(d==a||d==b||d==c) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">for</span>(e=<span class="number">1</span>;e&lt;=<span class="number">9</span>;e++) &#123;</div><div class="line">                        <span class="keyword">if</span>(e==a||e==b||e==c||e==d) <span class="keyword">continue</span>;</div><div class="line">                        <span class="keyword">for</span>(f=<span class="number">1</span>;f&lt;=<span class="number">9</span>;f++) &#123;</div><div class="line">                            <span class="keyword">if</span>(f==a||f==b||f==c||f==d||f==e) <span class="keyword">continue</span>;</div><div class="line">                            <span class="keyword">for</span>(g=<span class="number">1</span>;g&lt;=<span class="number">9</span>;g++) &#123;</div><div class="line">                                <span class="keyword">if</span>(g==a||g==b||g==c||g==d||g==e||g==f) <span class="keyword">continue</span>;</div><div class="line">                                <span class="keyword">for</span>(h=<span class="number">1</span>;h&lt;=<span class="number">9</span>;h++) &#123;</div><div class="line">                                    <span class="keyword">if</span>(h==a||h==b||h==c||h==d||h==e||h==f||h==g) <span class="keyword">continue</span>;</div><div class="line">                                    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++) &#123;</div><div class="line">                                        <span class="keyword">if</span>(i==a||i==b||i==c||i==d||i==e||i==f||i==g||i==h) <span class="keyword">continue</span>;</div><div class="line">                                        sum=a+(b*<span class="number">1.0</span>)/c+(d*<span class="number">100.0</span>+e*<span class="number">10.0</span>+f)/(g*<span class="number">100.0</span>+h*<span class="number">10.0</span>+i);</div><div class="line">                                        <span class="keyword">if</span>(sum==<span class="number">10.0</span>) res++;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;最终结果为29。</p>
<p>&emsp;&emsp;在做这种需要对大规模变量进行枚举的题目时（每年蓝桥杯都会出现几道类似的题目），大家应当注意尽量减少循环次数。就像上面的代码，有很多跳出循环的操作。这样会很快得出结果，否则的话可能会花费很多的宝贵时间。</p>
<p>&emsp;&emsp;后来呢，我在网上看到了一种更加好的解法，学习了之后和大家分享一下。首先，原作者对这道题目的算式进行了通分，这样做的好处就是避免了数据类型的不同，使题目中只出现了int型一种。做法是在等式两边都乘以<code>C*GHI</code>这样每一项就都是整数了。</p>
<p>&emsp;&emsp;第二步，使用全排列函数。下面是这道题的简便算法的代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> sum[<span class="number">4</span>];</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)&#123;</div><div class="line">        a[i]=i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        sum[<span class="number">0</span>]=a[<span class="number">1</span>]*a[<span class="number">3</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line">        sum[<span class="number">1</span>]=a[<span class="number">2</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line">        sum[<span class="number">2</span>]=(a[<span class="number">4</span>]*<span class="number">100</span>+a[<span class="number">5</span>]*<span class="number">10</span>+a[<span class="number">6</span>])*a[<span class="number">3</span>];</div><div class="line">        sum[<span class="number">3</span>]=<span class="number">10</span>*a[<span class="number">3</span>]*(a[<span class="number">7</span>]*<span class="number">100</span>+a[<span class="number">8</span>]*<span class="number">10</span>+a[<span class="number">9</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(sum[<span class="number">0</span>]+sum[<span class="number">1</span>]+sum[<span class="number">2</span>]==sum[<span class="number">3</span>])&#123;</div><div class="line">            ++ans;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">1</span>+<span class="number">9</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="第四题-快速排序"><a href="#第四题-快速排序" class="headerlink" title="第四题 快速排序"></a>第四题 快速排序</h2><blockquote>
<p>排序在各种场合经常被用到。<br>快速排序是十分常用的高效率的算法。<br>其思想是：先选一个“标尺”，<br>用它把整个队列过一遍筛子，<br>以保证：其左边的元素都不大于它，其右边的元素都不小于它。<br>这样，排序问题就被分割为两个子区间。<br>再分别对子区间排序就可以了。<br>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> t = a[i];</div><div class="line"></div><div class="line">a[i] = a[j];</div><div class="line"></div><div class="line">a[j] = t;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> i = p;</div><div class="line"></div><div class="line"><span class="keyword">int</span> j = r + <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> x = a[p];</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</div><div class="line"></div><div class="line"><span class="keyword">while</span>(a[--j]&gt;x);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">swap(a,i,j);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="number">______________________</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> j;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> q = partition(a,p,r);</div><div class="line"></div><div class="line">quicksort(a,p,q<span class="number">-1</span>);</div><div class="line"></div><div class="line">quicksort(a,q+<span class="number">1</span>,r);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> i;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> N = <span class="number">12</span>;</div><div class="line"></div><div class="line">quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"/n"</span>);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这道题目我在<a href="http://z16388.github.io/2017/01/18/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-7%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">【ACM教程】3.7排序（一）</a>中有过介绍，需要对快速排序有一定程度的理解不难得出需要填的内容为<code>swap(a,p,j)</code>。</p>
<h2 id="第五题-抽签"><a href="#第五题-抽签" class="headerlink" title="第五题 抽签"></a>第五题 抽签</h2><blockquote>
<p>X星球要派出一个5人组成的观察团前往W星。<br>其中：<br>A国最多可以派出4人。<br>B国最多可以派出2人。<br>C国最多可以派出2人。<br>….<br>那么最终派往W星的观察团会有多少种国别的不同组合呢？<br>下面的程序解决了这个问题。<br>数组a[] 中既是每个国家可以派出的最多的名额。<br>程序执行结果为：<br>DEFFF<br>CEFFF<br>CDFFF<br>CDEFF<br>CCFFF<br>CCEFF<br>CCDFF<br>CCDEF<br>BEFFF<br>BDFFF<br>BDEFF<br>BCFFF<br>BCEFF<br>BCDFF<br>BCDEF<br>….<br>(以下省略，总共101行)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF 1024</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> k, <span class="keyword">int</span> m, <span class="keyword">char</span> b[])</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(k==N)&#123; </div><div class="line"></div><div class="line">b[M] = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(m==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%s/n"</span>,b);</div><div class="line"></div><div class="line"><span class="keyword">return</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;=a[k]; i++)&#123;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;i; j++) b[M-m+j] = k+<span class="string">'A'</span>;</div><div class="line"></div><div class="line"><span class="number">______________________</span>; <span class="comment">//填空位置</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a</div><div class="line">= &#123;<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> b[BUF];</div><div class="line"></div><div class="line">f(a,<span class="number">0</span>,M,b);</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>仔细阅读代码，填写划线部分缺少的内容。<br>注意：不要填写任何已有内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这道题目最容易出问题的地方在于对函数参数的把握，在循环次数控制等。我们可以很容易看出来，函数<code>f()</code>是一个递归的过程。其中，在已经给出的代码中已经有了跳出递归的条件，也就是说，需要我们补全的是递归的过程方程。</p>
<p>&emsp;&emsp;我们看，函数f共有4个参数。第一个参数是数组<code>a[]</code>，表示的是每个国家最多派的人数。而且在函数的内部没有对数组的操作，因此第一个参数不变；第二个参数是一个整型变量k，观察函数的内部，k为数组<code>a[]</code>的下标变量。因此k为当前操作的国家编号；第三个参数是整形变量m，观察到在主函数中传入的是派遣人数M。那么每派出几个人，下次传进去的参数都要减去相应的人数；第四个参数是一个字符数组<code>b[]</code>，用来存放每一次的结果。经过上面的分析，可以确定需要补填的内容为：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f(a,k+<span class="number">1</span>,m-j,b)</div></pre></td></tr></table></figure>
<h2 id="第六题-方格填数"><a href="#第六题-方格填数" class="headerlink" title="第六题 方格填数"></a>第六题 方格填数</h2><blockquote>
<p>如下的10个格子<br>&emsp;+–+–+–+<br>　|　|　|　|<br>+–+–+–+–+<br>|　|　|　|　|<br>+–+–+–+–+<br>|　|　|　|<br>+–+–+–+<br>（4*3的长方形，左上角和右下角分别缺少一个方格）<br>填入0~9的数字。要求：连续的两个数字不能相邻。<br>（左右、上下、对角都算相邻）<br>一共有多少种可能的填数方案？<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这道题目又是可以使用暴力枚举做出来的，去年比赛的时候想的太复杂了，没做出来，也是非常后悔。但是最好还是使用dfs，深度优先搜索算法去做。在这里，像前面那道题那样，利用全排列函数，再写一个判断用的函数判断数字是否连续就行了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line"><span class="comment">/*</span></div><div class="line">  0 1 2</div><div class="line">3 4 5 6</div><div class="line">7 8 9</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">0</span>]-a[<span class="number">1</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">0</span>]-a[<span class="number">5</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">0</span>]-a[<span class="number">4</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">0</span>]-a[<span class="number">3</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">2</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">6</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">5</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">1</span>]-a[<span class="number">4</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">2</span>]-a[<span class="number">6</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">2</span>]-a[<span class="number">5</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">3</span>]-a[<span class="number">4</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">3</span>]-a[<span class="number">8</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">3</span>]-a[<span class="number">7</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">4</span>]-a[<span class="number">5</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">4</span>]-a[<span class="number">9</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">4</span>]-a[<span class="number">8</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">4</span>]-a[<span class="number">7</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">5</span>]-a[<span class="number">6</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">5</span>]-a[<span class="number">9</span>])==<span class="number">1</span>||<span class="built_in">abs</span>(a[<span class="number">5</span>]-a[<span class="number">8</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">6</span>]-a[<span class="number">9</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">7</span>]-a[<span class="number">8</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">abs</span>(a[<span class="number">8</span>]-a[<span class="number">9</span>])==<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)&#123;</div><div class="line">        a[i]=i;</div><div class="line">    &#125;</div><div class="line">    sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">do</span>&#123;</div><div class="line">        <span class="keyword">if</span>(judge())&#123;</div><div class="line">            ++sum;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">while</span>(next_permutation(a,a+<span class="number">10</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第七题-剪邮票"><a href="#第七题-剪邮票" class="headerlink" title="第七题 剪邮票"></a>第七题 剪邮票</h2><blockquote>
<p>如【图1.jpg】, 有12张连在一起的12生肖的邮票。<br>现在你要从中剪下5张来，要求必须是连着的。<br>（仅仅连接一个角不算相连）<br>比如，【图2.jpg】，【图3.jpg】中，粉红色所示部分就是合格的剪取。<br>请你计算，一共有多少种不同的剪取方法。<br>请填写表示方案数目的整数。<br>注意：你提交的应该是一个整数，不要填写任何多余的内容或说明性文字。</p>
</blockquote>
<p><img src="http://oda2v68ht.bkt.clouddn.com/1.jpg" alt=""><br>图1</p>
<p><img src="http://oda2v68ht.bkt.clouddn.com/2.jpg" alt=""><br>图2</p>
<p><img src="http://oda2v68ht.bkt.clouddn.com/3.jpg" alt=""><br>图3</p>
<p>&emsp;&emsp;这道题需要使用dfs去做。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dir[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-5</span>&#125;;</div><div class="line"><span class="keyword">int</span> temp1[<span class="number">12</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;;</div><div class="line"><span class="keyword">int</span> temp2[<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">5</span>];</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">4</span> ;i++)&#123;</div><div class="line">        <span class="keyword">int</span> t = temp2[u]+dir[i];</div><div class="line">        <span class="keyword">if</span>(t&gt;=<span class="number">1</span>&amp;&amp;t&lt;=<span class="number">14</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span> ;j&lt;<span class="number">5</span> ;j++)</div><div class="line">                <span class="keyword">if</span>(t==temp2[j]&amp;&amp;!vis[j])&#123;</div><div class="line">                    vis[j]=<span class="number">1</span>;</div><div class="line">                    dfs(j);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span> ;a&lt;<span class="number">12</span> ;a++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=a+<span class="number">1</span> ;b&lt;<span class="number">12</span> ;b++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=b+<span class="number">1</span> ;c&lt;<span class="number">12</span> ;c++)&#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> d=c+<span class="number">1</span> ;d&lt;<span class="number">12</span> ;d++)&#123;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> e=d+<span class="number">1</span> ;e&lt;<span class="number">12</span> ;e++)&#123;</div><div class="line">                        temp2[<span class="number">0</span>]=temp1[a];</div><div class="line">                        temp2[<span class="number">1</span>]=temp1[b];</div><div class="line">                        temp2[<span class="number">2</span>]=temp1[c];</div><div class="line">                        temp2[<span class="number">3</span>]=temp1[d];</div><div class="line">                        temp2[<span class="number">4</span>]=temp1[e];</div><div class="line">                        <span class="comment">//初始化访问标记数组</span></div><div class="line">                        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">                        vis[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">                        dfs(<span class="number">0</span>);</div><div class="line">                        <span class="comment">//连通性判断</span></div><div class="line">                        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">5</span> ;i++)&#123;</div><div class="line">                            <span class="keyword">if</span>(vis[i]==<span class="number">0</span>)&#123;</div><div class="line">                                flag = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span>(flag)ans++;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第八题-四平方和"><a href="#第八题-四平方和" class="headerlink" title="第八题 四平方和"></a>第八题 四平方和</h2><p>&emsp;&emsp;每年的最后三道题都是大题。大题是得省一的关键。能够保证前面的正确率的同时，如果能够A一道大题省一就基本没有问题了。</p>
<blockquote>
<p>四平方和定理，又称为拉格朗日定理：<br>每个正整数都可以表示为至多4个正整数的平方和。<br>如果把0包括进去，就正好可以表示为4个数的平方和。<br>比如：<br>5 = 0^2 + 0^2 + 1^2 + 2^2<br>7 = 1^2 + 1^2 + 1^2 + 2^2<br>（^符号表示乘方的意思）<br>对于一个给定的正整数，可能存在多种平方和的表示法。<br>要求你对4个数排序：<br>0 &lt;= a &lt;= b &lt;= c &lt;= d<br>并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法<br>程序输入为一个正整数N (N&lt;5000000)<br>要求输出4个非负整数，按从小到大排序，中间用空格分开<br>例如，输入：<br>5<br>则程序应该输出：<br>0 0 1 2<br>再例如，输入：<br>12<br>则程序应该输出：<br>0 2 2 2<br>再例如，输入：<br>773535<br>则程序应该输出：<br>1 1 267 838<br>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗 &lt; 3000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include ， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</p>
</blockquote>
<p>&emsp;&emsp;这道题可以通过枚举法暴力求解：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2300</span></div><div class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i*i&lt;=n)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;MAXN;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(i*i+j*j&lt;=n)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;MAXN;k++)&#123;</div><div class="line">                <span class="keyword">int</span> l=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n-i*i-j*j-k*k);</div><div class="line">                <span class="keyword">if</span>(i*i+j*j+k*k+l*l==n)&#123;</div><div class="line">                    <span class="built_in">printf</span>(<span class="string">"%d %d %d %d"</span>,i,j,k,l);</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第九题-交换瓶子"><a href="#第九题-交换瓶子" class="headerlink" title="第九题 交换瓶子"></a>第九题 交换瓶子</h2><blockquote>
<p>有N个瓶子，编号 1 ~ N，放在架子上。<br>比如有5个瓶子：<br>2 1 3 5 4<br>要求每次拿起2个瓶子，交换它们的位置。<br>经过若干次后，使得瓶子的序号为：<br>1 2 3 4 5<br>对于这么简单的情况，显然，至少需要交换2次就可以复位。<br>如果瓶子更多呢？你可以通过编程来解决。<br>输入格式为两行：<br>第一行: 一个正整数N（N&lt;10000）, 表示瓶子的数目<br>第二行：N个正整数，用空格分开，表示瓶子目前的排列情况。<br>输出数据为一行一个正整数，表示至少交换多少次，才能完成排序。<br>例如，输入：<br>5<br>3 1 2 5 4<br>程序应该输出：<br>3<br>再例如，输入：<br>5<br>5 4 3 2 1<br>程序应该输出：<br>2<br>资源约定：<br>峰值内存消耗 &lt; 256M<br>CPU消耗 &lt; 1000ms<br>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。<br>所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。<br>注意: main函数需要返回0<br>注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。<br>注意: 所有依赖的函数必须明确地在源文件中 #include ， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</p>
</blockquote>
<h2 id="第十题-最大比例"><a href="#第十题-最大比例" class="headerlink" title="第十题 最大比例"></a>第十题 最大比例</h2><blockquote>
<p>最大比例<br>X星球的某个大奖赛设了M级奖励。每个级别的奖金是一个正整数。<br>并且，相邻的两个级别间的比例是个固定值。<br>也就是说：所有级别的奖金数构成了一个等比数列。比如：<br>16,24,36,54<br>其等比值为：3/2<br>现在，我们随机调查了一些获奖者的奖金数。<br>请你据此推算可能的最大的等比值。<br>输入格式：<br>第一行为数字N，表示接下的一行包含N个正整数<br>第二行N个正整数Xi(Xi<1 1="" 2="" 3="" 4="" 5="" 25="" 32="" 200="" 1250="" 3125="" 524288="" 000="" 000)，用空格分开。每个整数表示调查到的某人的奖金数额="" 要求输出：="" 一个形如a="" b的分数，要求a、b互质。表示可能的最大比例系数="" 测试数据保证了输入格式正确，并且最大比例是存在的。="" 例如，输入：="" 程序应该输出：="" 再例如，输入：="" 549755813888="" 资源约定：="" 峰值内存消耗="" <="" 256m="" cpu消耗="" 3000ms="" 请严格按要求输出，不要画蛇添足地打印类似：“请您输入...”="" 的多余内容。="" 所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。="" 注意:="" main函数需要返回0="" 只使用ansi="" c="" ansi="" c++="" 标准，不要调用依赖于编译环境或操作系统的特殊函数。="" 所有依赖的函数必须明确地在源文件中="" #include="" <xxx="">， 不能通过工程设置而省略常用头文件。<br>提交时，注意选择所期望的编译器类型。</1></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一题-煤球数目&quot;&gt;&lt;a href=&quot;#第一题-煤球数目&quot; class=&quot;headerlink&quot; title=&quot;第一题 煤球数目&quot;&gt;&lt;/a&gt;第一题 煤球数目&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有一堆煤球，堆成三角棱锥形。具体：&lt;br&gt;第一层放1个，&lt;br&gt;第
    
    </summary>
    
    
      <category term="蓝桥杯" scheme="http://www.z16388.win/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>VPS笔记</title>
    <link href="http://www.z16388.win/2017/01/22/VPS%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.z16388.win/2017/01/22/VPS笔记/</id>
    <published>2017-01-22T13:28:47.000Z</published>
    <updated>2017-04-13T13:25:15.880Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;登录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@ip</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;安装可视化管理面板<strong>AMH</strong></p>
<ol>
<li>登录</li>
<li><p>运行脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://amysql.com/file/AMH/4.2/amh.sh; chmod 775 amh.sh; ./amh.sh 2&gt;&amp;1 | tee amh.log;</div></pre></td></tr></table></figure>
</li>
<li><p>根据安装步骤提醒键入相应内容，完成安装</p>
</li>
<li>使用ip和配置的端口进行访问，例如<code><a href="http://ip:8888" target="_blank" rel="external">http://ip:8888</a></code></li>
</ol>
<p>&emsp;&emsp;ShadowsocksR一键安装脚本<br>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</div><div class="line">chmod +x shadowsocksR.sh</div><div class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</div></pre></td></tr></table></figure></p>
<p>卸载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./shadowsocksR.sh uninstall</div></pre></td></tr></table></figure></p>
<p>其他操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">启动：/etc/init.d/shadowsocks start</div><div class="line">停止：/etc/init.d/shadowsocks stop</div><div class="line">重启：/etc/init.d/shadowsocks restart</div><div class="line">状态：/etc/init.d/shadowsocks status</div><div class="line"></div><div class="line">配置文件路径：/etc/shadowsocks.json</div><div class="line">日志文件路径：/var/log/shadowsocks.log</div><div class="line">代码安装目录：/usr/local/shadowsocks</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;登录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;cod
    
    </summary>
    
    
      <category term="VPS" scheme="http://www.z16388.win/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.7排序（一）</title>
    <link href="http://www.z16388.win/2017/01/18/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-7%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.z16388.win/2017/01/18/【ACM教程】3-7排序（一）/</id>
    <published>2017-01-18T03:25:23.000Z</published>
    <updated>2017-04-13T13:25:15.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第七节-排序（一）"><a href="#第七节-排序（一）" class="headerlink" title="第七节 排序（一）"></a>第七节 排序（一）</h1><p>&emsp;&emsp;我们在写程序的时候，经常需要去进行排序这种操作。在面对大量数据进行排序的时候，我们可能需要花费很多的时间和资源。因此，优化排序算法是我们在优化程序中的一个重要步骤。在我们前面的学习中，我们已经接触到了C++的STL中<code>sort()</code>函数。那么，在无法使用STL的情况或者是需要一些特殊的要求的排序，我们就需要对排序算法进行手撸。因此，掌握各种常见的排序方法极为重要。接下来，我们将会从冒泡排序开始，系统地对常见的排序算法进行练习。</p>
<h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p>&emsp;&emsp;我们早在学习C语言的时候，就已经接触到这种排序方法了，是一种非常简便的排序方法。我们依次比较相邻的两个元素，以达到排序的目的。冒泡排序的运作方式如下：</p>
<blockquote>
<p>重复走访所要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们相互交换<br>如果这个数列一共有<code>n</code>个元素，我们需要进行<code>n-1</code>组比较，每一组需要进行<code>n-i</code>次比较</p>
</blockquote>
<p>&emsp;&emsp;下面是冒泡排序的C语言代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">15</span>];</div><div class="line">    <span class="keyword">int</span> n=<span class="number">10</span>,i,j,t;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        a[i]=<span class="number">10</span>-i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n-i;j++) <span class="comment">//这里可以记作i+j=n;</span></div><div class="line">        sif(a[j]&gt;a[j+<span class="number">1</span>]) &#123;</div><div class="line">                t=a[j];</div><div class="line">                a[j]=a[j+<span class="number">1</span>];</div><div class="line">                a[j+<span class="number">1</span>]=t;</div><div class="line">            &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;冒泡排序是一种常用的排序方法，但是它的时间复杂度为<code>O(n^2)</code>，在做题时不推荐使用。</p>
<h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>&emsp;&emsp;快速排序是对冒泡排序的一种改进，它的基本思想和冒泡排序类似：</p>
<blockquote>
<p>通过一趟排序将序列分成两部分<br>保证左侧部分的数据都比右侧的小<br>再分别对两侧进行排序</p>
</blockquote>
<p>&emsp;&emsp;快速排序是排序算法中的优等生，它的时间复杂度为<code>O(logn)</code>，但是要到达了最不理想的状态，也就是针对一个完全反序的数列进行排序。这个时候，它就变成了冒泡排序，时间复杂度为<code>O(n^2)</code>。在去年的蓝桥杯比赛中，就成为了一道代码填空题，题目是这样的：</p>
<blockquote>
<p>排序在各种场合经常被用到。</p>
<p>快速排序是十分常用的高效率的算法。</p>
<p>其思想是：先选一个“标尺”，</p>
<p>用它把整个队列过一遍筛子，</p>
<p>以保证：其左边的元素都不大于它，其右边的元素都不小于它。</p>
<p>这样，排序问题就被分割为两个子区间。</p>
<p>再分别对子区间排序就可以了。</p>
<p>下面的代码是一种实现，请分析并填写划线部分缺少的代码。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t = a[i];</div><div class="line">    a[i] = a[j];</div><div class="line">    a[j] = t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = p;</div><div class="line">    <span class="keyword">int</span> j = r + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> x = a[p];</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;r &amp;&amp; a[++i]&lt;x);</div><div class="line">        <span class="keyword">while</span>(a[--j]&gt;x);</div><div class="line">        <span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</div><div class="line">        swap(a,i,j);</div><div class="line">    &#125;</div><div class="line"><span class="number">______________________</span>;</div><div class="line"></div><div class="line"><span class="keyword">return</span> j;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(p&lt;r)&#123;</div><div class="line">    <span class="keyword">int</span> q = partition(a,p,r);</div><div class="line">    quicksort(a,p,q<span class="number">-1</span>);</div><div class="line">    quicksort(a,q+<span class="number">1</span>,r);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">13</span>,<span class="number">6</span>,<span class="number">24</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">19</span>,<span class="number">27</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">17</span>&#125;;</div><div class="line">    <span class="keyword">int</span> N = <span class="number">12</span>;</div><div class="line">    quicksort(a, <span class="number">0</span>, N<span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"/n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：只填写缺少的内容，不要书写任何题面已有代码或说明性文字。</p>
</blockquote>
<p>&emsp;&emsp;这里的答案是<code>swap(a,p,j)</code>，我们就以上面的例子来简单地描述一下快速排序。首先我们看，这个程序中有四个函数，<code>swap()</code>函数实现的是值交换，<code>main()</code>是声明了一个数组，然后对他进行快速排序然后打印出来，我们就不多说了。现在我们来看一下<code>quicksort</code>这个函数。这个函数就是用来实现我们在前面描述过的“分别对两个子区间进行快速排序”这个过程，也比较简单。比较让人头疼就是要我们填空的这个<code>partition()</code>函数。</p>
<p>&emsp;&emsp;下面就让我们来回忆一下快速排序的方法。快速排序就是找一个标尺（一般是一段序列的第一个），比他大的放在他左边，比他小的放在他右边。那么程序上是怎么实现的呢？</p>
<p>&emsp;&emsp;我们需要在程序中定义两个指针，分别从序列的两端出发，左侧的指针向右寻找比标尺大的数据，右侧的指针向左寻找比标尺小的数据，但是在实现上，有两种方法。第一种：先从右侧出发，找到第一个比标尺小的数据，将其和标尺交换位置。然后从左侧出发，找到第一个比标尺大的数据，交换位置，直到两标尺相遇。但是这种方法会频繁地使用赋值操作，那么还有一种改进思路：我们让标尺在a[0]的位置不动，将a[1]作为左侧指针的出发点。两指针分别从左右出发，找到相应的数据之后对两个数据交换位置，直到两个指针相遇。之后再把标尺放在正确的位置上，完成排序。而这个正确的位置呢，就是两指针相遇的位置。</p>
<p>&emsp;&emsp;在<code>partition()</code>函数中，有三个参数，第一个参数i,j,x。i作为low指针，j作为high指针，而x即是标尺。我们看在函数中，i初始化为标尺的位置后，在下面的while循环里，使用的是++i。这就保证了标尺是不移动的，也就是说这个程序使用的是第二种思路。仔细阅读代码，我们可以发现，函数中缺少的正是最后一步——将标尺移动到正确的位置。所以需要补填的代码是<code>swap(a,p,j)</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第七节-排序（一）&quot;&gt;&lt;a href=&quot;#第七节-排序（一）&quot; class=&quot;headerlink&quot; title=&quot;第七节 排序（一）&quot;&gt;&lt;/a&gt;第七节 排序（一）&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们在写程序的时候，经常需要去进行排序这种操作。在面对大量数
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>2017新年祝福</title>
    <link href="http://www.z16388.win/2017/01/01/2017/"/>
    <id>http://www.z16388.win/2017/01/01/2017/</id>
    <published>2016-12-31T16:16:10.000Z</published>
    <updated>2017-04-13T13:25:20.963Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2016已经成为了过去式，新的一年已经来临。过去的一年里，无论有多少收获，2017，我们都会遇到一个新的自己。祝大家在新的一年里，能够距离自己的目标更进一步，保持自己的信心，继续前进。无论结果如何，这都会是我们人生中最精彩的一年——今年。</p>
<p>&emsp;&emsp;2017，要实训，要考研，要学习日语，要加强算法的练习，完善ACM的教程，要增进刀塔的技术…</p>
<p>&emsp;&emsp;我们笑着送走2016，2017，也会是快乐的一年。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;2016已经成为了过去式，新的一年已经来临。过去的一年里，无论有多少收获，2017，我们都会遇到一个新的自己。祝大家在新的一年里，能够距离自己的目标更进一步，保持自己的信心，继续前进。无论结果如何，这都会是我们人生中最精彩的一年——今年。&lt;/p&gt;
&lt;
    
    </summary>
    
    
      <category term="心情" scheme="http://www.z16388.win/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>hdu1326,hdu2088</title>
    <link href="http://www.z16388.win/2016/11/16/hdu1326-hdu2088/"/>
    <id>http://www.z16388.win/2016/11/16/hdu1326-hdu2088/</id>
    <published>2016-11-16T12:06:16.000Z</published>
    <updated>2017-04-13T13:25:20.911Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这两道是同一道题，只是区别在输出格式。</p>
<p>&emsp;&emsp;算出需要移动的方块个数（相差平均数的总个数）即可，需要注意的是每两个输出之间有一个空行。</p>
<p>&emsp;&emsp;2088就比较套路，最后一组输出没有空行。</p>
<p>hdu1326</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,flag=<span class="number">0</span>,ave,sum;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        ave=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            ave+=a[i];</div><div class="line">        &#125;</div><div class="line">        ave/=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;ave) &#123;</div><div class="line">                sum+=ave-a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Set #%d\n"</span>,++flag);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"The minimum number of moves is %d.\n\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>hdu 2088</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 55</span></div><div class="line"><span class="keyword">int</span> a[N];</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n,ave,sum,flag=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n) &#123;</div><div class="line">        ave=<span class="number">0</span>,sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(flag++) <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">            ave+=a[i];</div><div class="line">        &#125;</div><div class="line">        ave/=n;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">            <span class="keyword">if</span>(a[i]&lt;ave) &#123;</div><div class="line">                sum+=ave-a[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这两道是同一道题，只是区别在输出格式。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;算出需要移动的方块个数（相差平均数的总个数）即可，需要注意的是每两个输出之间有一个空行。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;2088就比较套路，最后一组输出没有空行。&lt;
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>hdu1720 A+B Coming</title>
    <link href="http://www.z16388.win/2016/11/16/hdu1720/"/>
    <id>http://www.z16388.win/2016/11/16/hdu1720/</id>
    <published>2016-11-16T11:32:29.000Z</published>
    <updated>2017-04-13T13:25:20.904Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是一道简单的输入输出问题，把输入当做十六进制，计算和并按照十进制输出即可。</p>
<p>&emsp;&emsp;以下是C和C++两种做法：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a,b;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%x%x"</span>,&amp;a,&amp;b)!=EOF) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a+b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span>  </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> a,b;  </div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;hex&gt;&gt;a&gt;&gt;b)  </div><div class="line">    &#123;  </div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这是一道简单的输入输出问题，把输入当做十六进制，计算和并按照十进制输出即可。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;以下是C和C++两种做法：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="hdu" scheme="http://www.z16388.win/tags/hdu/"/>
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title>ACM Steps</title>
    <link href="http://www.z16388.win/2016/11/16/Steps/"/>
    <id>http://www.z16388.win/2016/11/16/Steps/</id>
    <published>2016-11-16T11:06:30.000Z</published>
    <updated>2017-04-13T13:25:20.828Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;hdu里的题目，题目量大，种类多，很多人用，同时也不方便找对应难度的试题。只知道水题都在11页，那么其他的题目都该怎么刷呢。</p>
<p>&emsp;&emsp;其实hdu有一个比较隐蔽的功能叫做ACM Steps，按照难度将题目随机分配出来的，难度相近，全部做完才能进入下一关，比较适合练习。</p>
<p>链接：<a href="http://acm.hdu.edu.cn/game" target="_blank" rel="external">http://acm.hdu.edu.cn/game</a>(需要登录)</p>
<p>第一章：</p>
<ul>
<li>A+B</li>
<li>输入输出，快速幂，排序，ascii问题</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;hdu里的题目，题目量大，种类多，很多人用，同时也不方便找对应难度的试题。只知道水题都在11页，那么其他的题目都该怎么刷呢。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;其实hdu有一个比较隐蔽的功能叫做ACM Steps，按照难度将题目随机分配出来的，难
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【ACM教程】3.6数据结构基础（2）树、二叉树和图</title>
    <link href="http://www.z16388.win/2016/11/16/%E3%80%90ACM%E6%95%99%E7%A8%8B%E3%80%913-6%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89%E6%A0%91%E3%80%81%E4%BA%8C%E5%8F%89%E6%A0%91%E5%92%8C%E5%9B%BE/"/>
    <id>http://www.z16388.win/2016/11/16/【ACM教程】3-6数据结构基础（2）树、二叉树和图/</id>
    <published>2016-11-16T06:49:28.000Z</published>
    <updated>2017-04-13T13:25:15.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第六节-数据结构基础（2）树、二叉树和图"><a href="#第六节-数据结构基础（2）树、二叉树和图" class="headerlink" title="第六节 数据结构基础（2）树、二叉树和图"></a>第六节 数据结构基础（2）树、二叉树和图</h1><p>&emsp;&emsp;我们之前讲了数据结构中的几个线性结构，链表、栈还有队列。那么如果想要一个能表示多个元素之间关系的数据结构，就要使用我们的树形结构和图了。在ACM和蓝桥杯的比赛中，有关树和图的题目是百分百出现的。</p>
<h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>&emsp;&emsp;树形结构是一类非常重要的非线性数据结构，其中以树和二叉树最为常用。树结构在客观世界中广泛存在，比如我们日常生活中常见的组织结构图：<br><img src="http://www.wxtgcl.com/images/organization.jpg" alt=""></p>
<p>&emsp;&emsp;树是n个结点的有限集合，在任意一棵非空的树中：</p>
<ul>
<li>有且仅有一个特定的，称为根（Root）的结点</li>
<li>当n&gt;1时，其余结点可分别为m（m&gt;0）个互不相交的有限集合T1,T2,…,Tm，其中每一个集合本身又是一棵树，并且称为根的子树</li>
</ul>
<p>&emsp;&emsp;以上就是一棵树的定义。</p>
<p>&emsp;&emsp;结点的子树称为它的“孩子”，相应地，该节点称为“双亲”。同一个双亲的孩子称为“兄弟”。孩子的数量称为“度”。</p>
<p>&emsp;&emsp;规定根为第一层，它的孩子为第二层，以此类推。树中最大的层数称为树的深度或高度。</p>
<p>&emsp;&emsp;森林：m（m&gt;0）课互不相交的树的集合。</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="emsp-emsp-二叉树的定义和性质"><a href="#emsp-emsp-二叉树的定义和性质" class="headerlink" title="&emsp;&emsp;二叉树的定义和性质"></a>&emsp;&emsp;二叉树的定义和性质</h3><p>&emsp;&emsp;在讨论一般树的存储结构及操作之前，我们首先研究一种名为二叉树的抽象数据结构类型。</p>
<p>&emsp;&emsp;二叉树是另一种树形结构，它的特点是每个结点至多只有两棵子树（即二叉树中不存在度大于2的结点）。并且，二叉树的子树左右之分，其次序不能任意颠倒。</p>
<p><img src="http://7xospc.com1.z0.glb.clouddn.com/6-5-5.jpg" alt=""></p>
<p>&emsp;&emsp;下面是二叉树的一些性质：</p>
<ul>
<li>在二叉树的第i层上至多有2^(i-1)个结点（i&gt;=1）；可以使用数学归纳法来证明</li>
<li>深度为k的二叉树至多有2^k-1个结点（k&gt;=1）；由第一个性质推导</li>
<li>对任何一棵二叉树T，若其终端结点数为n0，度为2的结点数为n2，则n0=n2+1。</li>
<li>…</li>
</ul>
<h3 id="emsp-emsp-二叉树的存储结构"><a href="#emsp-emsp-二叉树的存储结构" class="headerlink" title="&emsp;&emsp;二叉树的存储结构"></a>&emsp;&emsp;二叉树的存储结构</h3><p>&emsp;&emsp;二叉树的概念和性质不是我们研究的主要问题，我们来看一下二叉树的存储结构。二叉树可以使用顺序存储结构和链式存储结构，这里我们先讲一下顺序存储结构。</p>
<p>&emsp;&emsp;我们规定，用一组地址连续的存储单元，自上而下、自左至右存储完全二叉树上的结点元素，即将完全二叉树上编号为i的结点元素存放在一维数组下表为i（i-1）的分量中。对于一般的二叉树，则应该将其每个节点与完全二叉树相对照，存放在一维数组中。其中0表示不存在此结点。（想想我们之前讲过的memset函数）</p>
<p>&emsp;&emsp;链式存储可以使用拥有两个指针域或者三个指针域的链表来表示，这里要看我们对这个二叉树的操作需求。如果需要返回访问根节点，则需要三个指针域。结合下面的内容，理解一下。</p>
<blockquote>
<p>&emsp;&emsp;lchild&emsp;&emsp;data&emsp;&emsp;rchild<br>&emsp;&emsp;lchild&emsp;&emsp;data&emsp;&emsp;parent&emsp;&emsp;rchild</p>
</blockquote>
<h3 id="emsp-emsp-二叉树的遍历和线索二叉树"><a href="#emsp-emsp-二叉树的遍历和线索二叉树" class="headerlink" title="&emsp;&emsp;二叉树的遍历和线索二叉树"></a>&emsp;&emsp;二叉树的遍历和线索二叉树</h3><p>&emsp;&emsp;在二叉树的一些应用中，我们常常要求在树种查找具有某种特征的结点，或者对树中全部结点做统一处理，我们就要对二叉树进行遍历。遍历就是按照某条搜索路径巡访树中的每个节点，就比如我们要输出的时候。对于一个线性结构，比如说数组，我们进行遍历就很方便，但是二叉树就比较复杂了。下面我们介绍三种操作方法：</p>
<p>先序遍历：</p>
<ul>
<li>访问根节点</li>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
</ul>
<p>中序遍历：</p>
<ul>
<li>中序遍历左子树</li>
<li>访问根节点</li>
<li>中序遍历右子树</li>
</ul>
<p>后序遍历：</p>
<ul>
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根节点</li>
</ul>
<p>&emsp;&emsp;我们知道，二叉树的遍历是以一定的规则将其排列成一个线性结构，但是当以二叉链表作为存储结构时，我们只能找到结点的左右孩子信息，而不能找到结点在任一序列中的前驱和后继。这种信息只有在动态的过程中才能够得到。那么想要保存的话，我们需要在每个节点上再加两个指针域用来存放结点的前驱和后继的信息。</p>
<blockquote>
<p>&emsp;&emsp;lchild&emsp;&emsp;LTag&emsp;&emsp;data&emsp;&emsp;RTag&emsp;&emsp;rchild</p>
</blockquote>
<p>&emsp;&emsp;以这种结点结构构成的二叉链表作为二叉树的存储结构，叫做线索二叉链表，对某种次序遍历使其变成线索二叉树的过程叫做线索化。</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="emsp-emsp-图的定义"><a href="#emsp-emsp-图的定义" class="headerlink" title="&emsp;&emsp;图的定义"></a>&emsp;&emsp;图的定义</h3><p>&emsp;&emsp;图是较线性表和树更为复杂的数据结构。在图结构中，结点之间的关系是任意的——图中任意两个元素都有可能相关。图中的数据元素称为定点（Vertex），VR是表示两个点之间的关系的集合,<v,w>是VR中的元素，表示的是从v到w的的一条弧（Arc）。v为初始点（弧尾），w为终端点（弧头），此时的图称为有向图。如果对任意的<v,w>都有<w,v>，则用无序队（v,w）来代替这个有序对，表示v和w之间的一条边，此时的图为无向图。</w,v></v,w></v,w></p>
<p><img src="http://img.my.csdn.net/uploads/201212/27/1356610270_4985.png" alt=""></p>
<p>&emsp;&emsp;有关图的问题还有很多，在数学上，我们专门有一门研究图的学科，叫做图论，这也将是接下来我们的研究对象。在今后的学习中，我们可能会接触到以下内容：</p>
<h3 id="emsp-emsp-图的存储方法"><a href="#emsp-emsp-图的存储方法" class="headerlink" title="&emsp;&emsp;图的存储方法"></a>&emsp;&emsp;图的存储方法</h3><h3 id="emsp-emsp-图的遍历"><a href="#emsp-emsp-图的遍历" class="headerlink" title="&emsp;&emsp;图的遍历"></a>&emsp;&emsp;图的遍历</h3><h4 id="emsp-emsp-emsp-emsp-深度优先搜索（dfs）"><a href="#emsp-emsp-emsp-emsp-深度优先搜索（dfs）" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;深度优先搜索（dfs）"></a>&emsp;&emsp;&emsp;&emsp;深度优先搜索（dfs）</h4><h4 id="emsp-emsp-emsp-emsp-广度优先搜索（bfs）"><a href="#emsp-emsp-emsp-emsp-广度优先搜索（bfs）" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;广度优先搜索（bfs）"></a>&emsp;&emsp;&emsp;&emsp;广度优先搜索（bfs）</h4><h3 id="emsp-emsp-图的连通性"><a href="#emsp-emsp-图的连通性" class="headerlink" title="&emsp;&emsp;图的连通性"></a>&emsp;&emsp;图的连通性</h3><p>&emsp;&emsp;克鲁斯卡尔算法</p>
<h3 id="emsp-emsp-最短路径"><a href="#emsp-emsp-最短路径" class="headerlink" title="&emsp;&emsp;最短路径"></a>&emsp;&emsp;最短路径</h3><h4 id="emsp-emsp-emsp-emsp-单源最短路径"><a href="#emsp-emsp-emsp-emsp-单源最短路径" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;单源最短路径"></a>&emsp;&emsp;&emsp;&emsp;单源最短路径</h4><p>&emsp;&emsp;迪杰斯特拉算法</p>
<h4 id="emsp-emsp-emsp-emsp-多源最短路径"><a href="#emsp-emsp-emsp-emsp-多源最短路径" class="headerlink" title="&emsp;&emsp;&emsp;&emsp;多源最短路径"></a>&emsp;&emsp;&emsp;&emsp;多源最短路径</h4><p>&emsp;&emsp;普里姆算法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第六节-数据结构基础（2）树、二叉树和图&quot;&gt;&lt;a href=&quot;#第六节-数据结构基础（2）树、二叉树和图&quot; class=&quot;headerlink&quot; title=&quot;第六节 数据结构基础（2）树、二叉树和图&quot;&gt;&lt;/a&gt;第六节 数据结构基础（2）树、二叉树和图&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="ACM" scheme="http://www.z16388.win/tags/ACM/"/>
    
      <category term="算法" scheme="http://www.z16388.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM教程" scheme="http://www.z16388.win/tags/ACM%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
