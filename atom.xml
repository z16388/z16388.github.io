<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>崎径 其镜</title>
  <subtitle>求学道路上的行车记录仪</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.z16388.top/"/>
  <updated>2019-12-01T16:48:03.109Z</updated>
  <id>http://www.z16388.top/</id>
  
  <author>
    <name>Anqi Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>震惊，JS不加分号会造成错误！？</title>
    <link href="http://www.z16388.top/2019/12/02/%E9%9C%87%E6%83%8Ajs/"/>
    <id>http://www.z16388.top/2019/12/02/震惊js/</id>
    <published>2019-12-01T16:12:19.000Z</published>
    <updated>2019-12-01T16:48:03.109Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的工作中，我遇到了一个奇怪的问题。明明在语法上没有问题，找同事也看了，但是程序依旧会产生奇怪的错误。最后通过一步一步断点，定为了错误位置，才找到了造成这个错误的原因———在一个不需要分号的语言中，句末不加分号居然报错了。</p>
<p>不卖关子了，这个错误是多返回值函数造成了对上一句值的影响。下面举个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="number">0</span></div><div class="line"><span class="keyword">let</span> c = <span class="number">0</span></div><div class="line"><span class="keyword">let</span> a = <span class="number">3</span></div><div class="line">[b, c] = func();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"a is :"</span> + a)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"b is :"</span> + b + <span class="string">" c is :"</span> + c)</div></pre></td></tr></table></figure>
<p>运行的结果将会是这样:</p>
<blockquote>
<p>a is :1,2<br>b is :0 c is :0</p>
</blockquote>
<p>很容易看到，我们函数的返回值给了上一行的a。这是因为我们的编译器将代码认为了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">3</span> ,[b, c] = func();</div></pre></td></tr></table></figure>
<p>避免这种情况，还是要多加分号吧——虽然它并不会报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的工作中，我遇到了一个奇怪的问题。明明在语法上没有问题，找同事也看了，但是程序依旧会产生奇怪的错误。最后通过一步一步断点，定为了错误位置，才找到了造成这个错误的原因———在一个不需要分号的语言中，句末不加分号居然报错了。&lt;/p&gt;
&lt;p&gt;不卖关子了，这个错误是多返回值函
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Linux升级Python</title>
    <link href="http://www.z16388.top/2019/11/28/linuxuppy/"/>
    <id>http://www.z16388.top/2019/11/28/linuxuppy/</id>
    <published>2019-11-28T04:12:19.000Z</published>
    <updated>2019-12-01T17:10:37.987Z</updated>
    
    <content type="html"><![CDATA[<p>11月底，腾讯云搞了一波双11返场活动，我买了三年的服务器。</p>
<p>和买了新的电脑或者做了新系统一样，得先把生产环境搞好。</p>
<p>距离Python2.x停止维护大概只有5个月了吧，所以第一要务是升级Python的版本。但是yum是依赖Python2的，所以升级还是会有一些顾虑的。下面是升级的过程：</p>
<h1 id="下载、解压"><a href="#下载、解压" class="headerlink" title="下载、解压"></a>下载、解压</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</div><div class="line">tar -zxvf Python-3.8.0.tgz</div></pre></td></tr></table></figure>
<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install make build-essential libssl-dev zlib1g-dev libbz2-dev</div><div class="line">yum install zlib</div></pre></td></tr></table></figure>
<h1 id="编译、安装"><a href="#编译、安装" class="headerlink" title="编译、安装"></a>编译、安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install -y make build-essential libssl-dev zlib1g-dev libbz2-dev</div><div class="line">yum -y install zlib</div><div class="line"></div><div class="line">cd Python-3.8.0</div><div class="line">./configure</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h1 id="备份与配置"><a href="#备份与配置" class="headerlink" title="备份与配置"></a>备份与配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv /usr/bin/python /usr/bin/python.bak</div><div class="line">ln -s /usr/local/bin/python3 /usr/bin/python</div></pre></td></tr></table></figure>
<h1 id="保证yum可用"><a href="#保证yum可用" class="headerlink" title="保证yum可用"></a>保证yum可用</h1><p>将下面文件中的配置修改为Python2.x版本的路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/yum</div><div class="line">/usr/libexec/urlgrabber-ext-down</div></pre></td></tr></table></figure>
<h1 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h1><p>pip需要依赖setuptools，所以要先安装setuptools。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">wget https://files.pythonhosted.org/packages/ce/1d/96320b9784b04943c924a9f1c6fa49124a1542039ce098a5f9a369227bad/setuptools-42.0.1.zip</div><div class="line">unzip setuptools-42.0.1.zip</div><div class="line">cd setuptools-42.0.1</div><div class="line">python setup.py build</div><div class="line">python setup.py install</div><div class="line"></div><div class="line">wget https://files.pythonhosted.org/packages/ce/ea/9b445176a65ae4ba22dce1d93e4b5fe182f953df71a145f557cffaffc1bf/pip-19.3.1.tar.gz</div><div class="line">tar -zxvf pip-19.3.1.tar.gz</div><div class="line">cd pip-19.3.1</div><div class="line">python setup.py build</div><div class="line">python setup.py install</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cnblogs.com/zhangym/p/6226435.html" target="_blank" rel="external">https://www.cnblogs.com/zhangym/p/6226435.html</a><br><a href="https://www.cnblogs.com/fjping0606/p/9156344.html" target="_blank" rel="external">https://www.cnblogs.com/fjping0606/p/9156344.html</a><br><a href="https://www.cnblogs.com/fyly/p/11112169.html" target="_blank" rel="external">https://www.cnblogs.com/fyly/p/11112169.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;11月底，腾讯云搞了一波双11返场活动，我买了三年的服务器。&lt;/p&gt;
&lt;p&gt;和买了新的电脑或者做了新系统一样，得先把生产环境搞好。&lt;/p&gt;
&lt;p&gt;距离Python2.x停止维护大概只有5个月了吧，所以第一要务是升级Python的版本。但是yum是依赖Python2的，所以升
    
    </summary>
    
    
      <category term="Python" scheme="http://www.z16388.top/tags/Python/"/>
    
      <category term="Linux" scheme="http://www.z16388.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Github图床工具</title>
    <link href="http://www.z16388.top/2019/11/17/picupdate/"/>
    <id>http://www.z16388.top/2019/11/17/picupdate/</id>
    <published>2019-11-17T10:32:44.000Z</published>
    <updated>2019-11-17T10:33:15.419Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个上传图片到github的工具，目前还不是很成熟，不过已经可以实现压缩并上传图片的目的了，对于写博客来说已经够用了。</p>
<h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol>
<li>创建todo目录</li>
<li>创建pic目录，在github上创建一个空项目，然后pull到这里</li>
<li>修改配置文件，将git_url修改为上一步新建的项目</li>
<li>将图片放到todo文件夹下</li>
<li>执行工具</li>
</ol>
<p>需要注意的是，因为图床需要一个git目录，同时代码也需要。在使用部分git管理工具时会禁止这种目录的嵌套。因此最好将代码独立运行。可以自己打包，也可以使用我打好的可执行程序。</p>
<p>在这里需要提一句，一般如果只想要下载github上项目的一个目录或者一个文件，可以使用svn进行下载。将文件路径中的<code>文件名/master</code>替换为<code>trunk</code>即可使用下载。</p>
<p>经过配置之后，以后只需要将图片放到todo目录下，执行脚本即可。</p>
<p>编译时需要安装以下运行库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install pyyaml</div><div class="line">pip install gitpython</div><div class="line">pip install pillow</div></pre></td></tr></table></figure>
<h1 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h1><p>Ver.0.2 2019-11-17 提交编译的可执行程序；增加配置文件</p>
<p>Ver.0.1 2019-11-12 提交项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个上传图片到github的工具，目前还不是很成熟，不过已经可以实现压缩并上传图片的目的了，对于写博客来说已经够用了。&lt;/p&gt;
&lt;h1 id=&quot;使用步骤&quot;&gt;&lt;a href=&quot;#使用步骤&quot; class=&quot;headerlink&quot; title=&quot;使用步骤&quot;&gt;&lt;/a&gt;使用步骤&lt;
    
    </summary>
    
    
      <category term="Python" scheme="http://www.z16388.top/tags/Python/"/>
    
      <category term="Github" scheme="http://www.z16388.top/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>JS使用replace()函数全部替换</title>
    <link href="http://www.z16388.top/2019/11/16/jsreplace/"/>
    <id>http://www.z16388.top/2019/11/16/jsreplace/</id>
    <published>2019-11-16T14:03:56.000Z</published>
    <updated>2019-11-16T14:03:21.249Z</updated>
    
    <content type="html"><![CDATA[<p>在处理爬虫爬取下来的数据时，遇到了在文字中出现了经过转义的换行符，在文中显示出了\n，很影响观赏效果。因此，我对内容做了处理。</p>
<p>但是在刷库的过程中，我发现，我总不能一次处理完所有的数据。后来发现是JavaScript的Replace函数的问题，这个函数默认只能替换第一个匹配到的项目。如果需要处理全部的，需要使用正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string.replace(<span class="regexp">/\\n/g</span>, <span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<p>除此之外，下面是一些处理爬取内容常用操作，包含了html的转义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">string.replace(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">' '</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">'&lt;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">'&gt;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">'&amp;'</span>)</div><div class="line">string.replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'"'</span>)</div><div class="line">   string.replace(<span class="regexp">/&amp;#x3D;/g</span>, <span class="string">'='</span>)</div><div class="line">   string.replace(<span class="regexp">/\[.*?\]/g</span>,<span class="string">''</span>)</div><div class="line">   string.replace(<span class="string">"\\n"</span>,<span class="string">"\n"</span>)</div><div class="line">   string.replace(<span class="string">"\\t"</span>,<span class="string">""</span>)</div><div class="line">   string.replace(<span class="string">"\\r"</span>,<span class="string">""</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在处理爬虫爬取下来的数据时，遇到了在文字中出现了经过转义的换行符，在文中显示出了\n，很影响观赏效果。因此，我对内容做了处理。&lt;/p&gt;
&lt;p&gt;但是在刷库的过程中，我发现，我总不能一次处理完所有的数据。后来发现是JavaScript的Replace函数的问题，这个函数默认只能
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS使用Splice()函数操作数组</title>
    <link href="http://www.z16388.top/2019/11/16/jssplice/"/>
    <id>http://www.z16388.top/2019/11/16/jssplice/</id>
    <published>2019-11-16T13:59:56.000Z</published>
    <updated>2019-11-16T14:00:02.652Z</updated>
    
    <content type="html"><![CDATA[<p>在js的使用过程中，有一次需要对数组进行各种操作，一时间迫使我想要去使用链表。后来通过查阅资料，总结了下面的一些方法，主要使用了splice()函数。</p>
<p>下面的方法主要是使用下标进行操作。如果是用值的话，可以通过<code>indexOf()</code>函数来获取下标。若不存在则返回-1。</p>
<p>值交换</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap_arr</span>(<span class="params">a_list, index1, index2</span>) </span>&#123;</div><div class="line">    a_list[index1] = a_list.splice(index2, <span class="number">1</span>, a_list[index1])[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> a_list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>置顶</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">up_arr</span>(<span class="params">a_list, index</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=<span class="number">0</span> &amp;&amp; index!=<span class="number">-1</span>)&#123;</div><div class="line">        a_list[index] = a_list.splice(index<span class="number">-1</span>, <span class="number">1</span>, a_list[index])[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下移</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">down_arr</span>(<span class="params">a_list, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=a_list.length<span class="number">-1</span> &amp;&amp; index!=<span class="number">-1</span>)&#123;</div><div class="line">        a_list[index] = a_list.splice(index+<span class="number">1</span>, <span class="number">1</span>, a_list[index])[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>插入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ins_arr</span>(<span class="params">a_list, index, a_data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(index!=<span class="number">-1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (a_list.indexOf(a_data)==<span class="number">-1</span>) &#123;</div><div class="line">            a_list.splice(index+<span class="number">1</span>, <span class="number">0</span>, a_data);</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在顶部插入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">topins_arr</span>(<span class="params">a_list, a_data</span>) </span>&#123;</div><div class="line">    a_list.splice(<span class="number">0</span>, <span class="number">0</span>, a_data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>删除元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">del_arr</span>(<span class="params">a_list, a_data_list</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> ele <span class="keyword">of</span> a_data_list) &#123;</div><div class="line">        <span class="keyword">let</span> index = a_list.indexOf(ele);</div><div class="line">        <span class="keyword">if</span>(index!=<span class="number">-1</span>)&#123;</div><div class="line">            a_list.splice(index, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在js的使用过程中，有一次需要对数组进行各种操作，一时间迫使我想要去使用链表。后来通过查阅资料，总结了下面的一些方法，主要使用了splice()函数。&lt;/p&gt;
&lt;p&gt;下面的方法主要是使用下标进行操作。如果是用值的话，可以通过&lt;code&gt;indexOf()&lt;/code&gt;函数来
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>当你的程序连接Mysql然后崩溃时</title>
    <link href="http://www.z16388.top/2019/11/16/mysqltimeout/"/>
    <id>http://www.z16388.top/2019/11/16/mysqltimeout/</id>
    <published>2019-11-16T13:43:56.000Z</published>
    <updated>2019-11-16T13:47:13.465Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个监控mysql数据库更新状态的预警程序，总是莫名其妙的报一个连接错误的错，然后程序死掉。后来在系统趋于稳定之后，我就没再继续维护这个工具了。</p>
<p>但是最近我在写另一个工具时，遇到了一个奇怪的问题，就是：tick总在27000多左右的时候崩溃。</p>
<p>我进行了一系列的猜测，比如tick的代码，或者是逻辑有问题，最后我把思路放在了之前遇到的这个错误上。查阅资料后发现，MySQL数据库在连接之后，如果超过一个设定的时间戳之后，会断开。这个值叫<code>WAIT_TIMEOUT</code>，默认值是28800，也就是说如果连上MySQL数据库之后，8小时内没有进行操作，这个连接便会断开。</p>
<p>网上很多连接MySQL数据库的代码没有处理过超时连接的问题，就连JS的官方代码好像也是在17年之后才更新的。以往这个问题，大家都是通过修改这个值来进行规避的。比如改成300天。修改有两种方式，一种是修改配置文件，这样在启动时便会使用这个配置；另一种是修改这个值，或者全局，或者当次生效。</p>
<p>下面是我在使用JavaScript语言链接MySQL数据库时，处理超时重连问题的代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">this.config = &#123;</div><div class="line">    "host": "x.x.x.x",</div><div class="line">	"port": xxxx,</div><div class="line">	"user": "root",</div><div class="line">	"password": "pass",</div><div class="line">	"database": "name""</div><div class="line">&#125;		</div><div class="line"></div><div class="line">async connect() &#123;</div><div class="line">    let self = this;</div><div class="line">    console.log("connect mysql success with", JSON.stringify(this.config))</div><div class="line">    // 创建连接</div><div class="line">    this.db_mysql = mysql.createConnection(</div><div class="line">        this.config</div><div class="line">    );</div><div class="line">    // 连接数据库</div><div class="line">    await this.db_mysql.connect();</div><div class="line">    // 错误处理</div><div class="line">    this.db_mysql.on('error', function(err) &#123;</div><div class="line">        if (err) &#123;</div><div class="line">            if (err.code === 'PROTOCOL_CONNECTION_LOST') &#123;</div><div class="line">                // 处理超时</div><div class="line">                console.warning("start reconnect mysql");</div><div class="line">                self.connect();</div><div class="line">            &#125; else &#123;</div><div class="line">                console.error(err.stack || err);</div><div class="line">                console.warning("start reconnect mysql");</div><div class="line">                self.connect();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写过一个监控mysql数据库更新状态的预警程序，总是莫名其妙的报一个连接错误的错，然后程序死掉。后来在系统趋于稳定之后，我就没再继续维护这个工具了。&lt;/p&gt;
&lt;p&gt;但是最近我在写另一个工具时，遇到了一个奇怪的问题，就是：tick总在27000多左右的时候崩溃。&lt;/p&gt;

    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.z16388.top/tags/JavaScript/"/>
    
      <category term="MySQL" scheme="http://www.z16388.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>安卓应用闪屏</title>
    <link href="http://www.z16388.top/2019/11/16/AndroidSplash/"/>
    <id>http://www.z16388.top/2019/11/16/AndroidSplash/</id>
    <published>2019-11-16T13:19:56.000Z</published>
    <updated>2019-11-16T13:41:45.264Z</updated>
    
    <content type="html"><![CDATA[<p>去年在接入安卓SDK时，会有部分渠道有要求手写闪屏的情况，下面是当时的笔记，这只是最简单的一种方法。</p>
<h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>很好的例子：</p>
<p><a href="https://www.jianshu.com/p/a609f510b19a" target="_blank" rel="external">https://www.jianshu.com/p/a609f510b19a</a></p>
<p><a href="https://blog.csdn.net/l799069596/article/details/47094731" target="_blank" rel="external">https://blog.csdn.net/l799069596/article/details/47094731</a></p>
<p>安卓动画：<a href="https://blog.csdn.net/IO_Field/article/details/53101499" target="_blank" rel="external">https://blog.csdn.net/IO_Field/article/details/53101499</a></p>
<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h1><p>除去游戏本身的闪屏之外，有的渠道会要求，有额外的渠道闪屏。为了使用一套资源出不同渠道包，我们可以对接渠道的AS工程进行处理，单独设置闪屏。</p>
<p>首先，创建一个闪屏Activity，为你的主Activity，这样在游戏的一开始你就可以看到闪屏了。</p>
<p>这里需要注意的是，你原先的Activit也需要在Manifest中注册打开日志，否则在打包的时候会找不到，报错：</p>
<p><a href="https://blog.csdn.net/qq_28301007/article/details/52265775" target="_blank" rel="external">https://blog.csdn.net/qq_28301007/article/details/52265775</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"...Activity"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>下面是主Activity，也就是闪屏Activity的代码，需要根据AS的提示import缺少的部分。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.animation.ObjectAnimator;</div><div class="line"><span class="keyword">import</span> android.animation.ValueAnimator;</div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.os.Handler;</div><div class="line"><span class="keyword">import</span> android.view.WindowManager;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> TimeAnimDurning = <span class="number">2000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> displayDeviceWidth;</div><div class="line">    ImageView iv_splash;</div><div class="line">    <span class="keyword">private</span> ObjectAnimator objAnim;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        displayDeviceWidth = getResources().getDisplayMetrics().widthPixels;</div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">        iv_splash = (ImageView) findViewById(R.id.splash);</div><div class="line">        objAnim = ObjectAnimator.ofFloat(iv_splash,<span class="string">"alpha"</span>,<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">        objAnim.setDuration(TimeAnimDurning);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                objAnim.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span>((<span class="keyword">int</span>)animation.getAnimatedFraction() == <span class="number">1</span>)&#123;</div><div class="line">                            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line">                            startActivity(<span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span> , .YouActivity.class));</div><div class="line">                            finish();</div><div class="line">                            <span class="keyword">return</span> ;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                objAnim.start();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@color/white"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.unity3d.player.SplashActivity"</span>&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:visibility</span>=<span class="string">"visible"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/splash"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@drawable/splash"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面控制闪屏格式的style.xml中，可以看到闪屏的背景色设置为了白色。这里有一些常用的颜色xml：<a href="https://blog.csdn.net/sundaysunshine/article/details/53509854" target="_blank" rel="external">https://blog.csdn.net/sundaysunshine/article/details/53509854</a></p>
<p>除了这两处之外，还需要根据style.xml中的配置，放好闪屏图片，设置闪屏背景。</p>
<p>整个闪屏的原理就是创建一个动画，在动画播放完成之后，去执行一个新的activity。在补全报错的部分之后，还是有一些细节部分需要注意的。</p>
<p>首先是结束时间的判定。判定时机总共有两种，一种是获取动画的进度，就像这里的例子，使用<code>(int)animation.getAnimatedFraction()</code>进行获取一个从0~1的数，来表示目前的动画的播放进度。除此之外还可以获取播放的时间，这个函数是：<code>getAnimatedValue()</code>，它可以获取属性的当前值。使用这两个函数可以很方便地控制动画的时间和动作。</p>
<p>除此之外，在调起另一个Activity之后，我结束了这个Activity。这是因为如果使用默认的LaunchMode，在重新唤醒应用时，闪屏会再次启动，然后走完动画，应用重启。这就造成了应用无法关闭的状况，只能后台强制杀掉。解决办法就是让闪屏只执行一次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年在接入安卓SDK时，会有部分渠道有要求手写闪屏的情况，下面是当时的笔记，这只是最简单的一种方法。&lt;/p&gt;
&lt;h1 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h1&gt;&lt;p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>安卓各渠道SDK接入体验</title>
    <link href="http://www.z16388.top/2019/11/12/mostsdk/"/>
    <id>http://www.z16388.top/2019/11/12/mostsdk/</id>
    <published>2019-11-12T15:00:23.000Z</published>
    <updated>2019-11-12T15:13:25.279Z</updated>
    
    <content type="html"><![CDATA[<p>去年的这个时候，我在忙于接入各种SDK。接渠道SDK，是一件十分薛定谔的事情。你觉得很容易，的确很容易，但是，也很容易遇到问题。然后我就陷入了长期的自闭状态，再加上偷懒，然后博客就断更了一年。现在回头来回忆一下，去年的这个时候，接入SDK时的那些体验。</p>
<blockquote>
<p>1.酷派</p>
</blockquote>
<p>充值之后，服务器收不到消息，对接也没有人。</p>
<p>现在看来很明显，已然黄了。</p>
<blockquote>
<p>2.应用宝</p>
</blockquote>
<p>传说中的5000人大群只有2个技术的大渠道。每天上午问问题会施舍你两句，下午是肯定不会回答问题的，团建能团建半个月。这个渠道我是使用聚合sdk接入的。需要注意的是，接入时有测试阶段，和正式阶段之分，游戏货币名不能修改，同时还必须接入腾讯的信鸽推送SDK，否则无法过审，手动接入成本极高。</p>
<blockquote>
<p>3.金立</p>
</blockquote>
<p>高版本会造成初次进入闪退，主动获取权限也不行，必须低版本编译。<br>华为手机会出现渲染错误，游戏变成紫红色。<br>需要安装支付插件。<br>现在也应该没有接入的必要了。</p>
<blockquote>
<p>4.华为</p>
</blockquote>
<p>相当棒的渠道，文档详细，对接起来体验也很不错。充值错误的时候，每一步骤，原因都会有显示。<br>但是不支持第三方工具接入。<br>需要安装支付插件。</p>
<blockquote>
<p>5.魅族</p>
</blockquote>
<p>商品id配置不明，会出现莫名的变动，很不靠谱。<br>支付回调生效需要1天的时间，需要对商品进行映射，对接很麻烦的渠道。<br>需要安装支付插件。</p>
<blockquote>
<p>6.360</p>
</blockquote>
<p>包体最大，足足有50多k的方法数，不分包就是死。</p>
<blockquote>
<p>7.百度</p>
</blockquote>
<p>方法数排名第二，仅次于360。<br>高版本编译会无法使用闪屏。<br>提审体验极差。说好的SDK不强用更，但是等到提审后告诉你不合格。</p>
<blockquote>
<p>8.联想</p>
</blockquote>
<p>商品id为自动生成，需要做好映射。<br>AnySDK接入需要注意参数顺序。</p>
<blockquote>
<p>9.UC</p>
</blockquote>
<p>无法使用第三方工具进行接入。<br>闪屏比较蛋疼，在sdk初始化时自动播放。首次运行时无法正常显示，时机不一定，容易和应用闪屏覆盖。</p>
<blockquote>
<p>10.OPPO、VIVO</p>
</blockquote>
<p>无法使用第三方工具进行接入。<br>需要安装支付插件。</p>
<blockquote>
<p>11.小七</p>
</blockquote>
<p>文档描述不明确，注意对登陆回调的处理方式，注重切换账号的测试。<br>SDK的Manifest中，最高宽高比设置为2.2。如果游戏中有对这个参数进行修改，需要进行统一。</p>
<blockquote>
<p>12.拇指玩</p>
</blockquote>
<p>sdk默认背景为透明，会造成有些版本的手机唤起sdk时会显示桌面为背景。或者是切换到主屏后，再回来，只有单独的sdk页面。<br>解决方式是把style.xml中的windowIsTranslucent值置为为false。<br>回调处理方式与其他sdk略有不同,Log与执行功能部分的代码进行了分离。<br>目前版本，无法使用qq登陆等方式，在登陆界面仍没有去掉该入口。</p>
<blockquote>
<p>其他:</p>
</blockquote>
<p>在运营过程中，小米、UC、应用宝和魅族会不同频率出现无法登录的问题，属正常现象，是他们的SDK服务器抽风了，会报一些很可怕的错误，比如应用不存在，应用id无效之类的。这时候只需要稳定好用户的心态即可，没有任何解决办法。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年的这个时候，我在忙于接入各种SDK。接渠道SDK，是一件十分薛定谔的事情。你觉得很容易，的确很容易，但是，也很容易遇到问题。然后我就陷入了长期的自闭状态，再加上偷懒，然后博客就断更了一年。现在回头来回忆一下，去年的这个时候，接入SDK时的那些体验。&lt;/p&gt;
&lt;block
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>某微信爬虫工具多开方案</title>
    <link href="http://www.z16388.top/2019/11/12/most_wechat/"/>
    <id>http://www.z16388.top/2019/11/12/most_wechat/</id>
    <published>2019-11-12T13:15:53.000Z</published>
    <updated>2019-11-12T13:28:07.569Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为需求找到了这个超级好用的微信爬虫工具<a href="https://github.com/striver-ing/wechat-spider" target="_blank" rel="external">https://github.com/striver-ing/wechat-spider</a>，目前已经开源。工具可以很方便地实现爬取微信文章，获取点赞、评论等功能。</p>
<p>最近，微信针对文章历史接口做了调整：PC版限制了爬取的次数，访问间隔应该控制在8分钟以上，移动端则是在两个月前直接干掉了这个功能。文章评论则没有改变。因此，这个工具目前最好的使用方式就是多开，分别爬不同的文章，再单开一个用来爬需要爬的评论。</p>
<p>工具的具体使用方法在原工程中都有提到，这里就不再赘述了。</p>
<p>在工具的使用方法中，我们知道，作者是使用全局代理，将所有的https消息都强制走了本机的8080端口，然后通过Python的mitmproxy来截取消息内容来实现的这个工具。那么，我可以使用局部代理，将制定的微信客户端，走制定端口，即可实现工具的多开。</p>
<p>有了这个思路，那么我们就只需要解决两个问题：</p>
<ol>
<li>微信的多开</li>
<li>多个微信走多个局部代理</li>
</ol>
<p>这里先说一下，我们无法使用微信PC客户端自带的代理功能。因为一旦这个功能开启，微信的所有链接都将进行加密，你得到的只会是一个格式如：<code><a href="https://xxx.xxx.xx.xx/mmtls/xxxxxx" target="_blank" rel="external">https://xxx.xxx.xx.xx/mmtls/xxxxxx</a></code>的加密链接。</p>
<h1 id="微信的多开"><a href="#微信的多开" class="headerlink" title="微信的多开"></a>微信的多开</h1><p>微信多开的实现比较简单，直接使用bat脚本打开多个微信即可。需要注意的是，要以管理员模式运行。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">start /d <span class="string">"C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChat\<span class="string">" WeChat.exe</span></div><div class="line">exit</div></pre></td></tr></table></figure>
<p>这样虽然可以打开多个微信，但是在设置局部代理时，工具无法区相同路径下的相同可执行文件。因此，我们需要把微信客户端拷贝多份，以应对后面的步骤。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line">start /d <span class="string">"C:\Program Files (x86)\Tencent\WeChat\" WeChat.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatb\<span class="string">" WeChatb.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatc\<span class="string">" WeChatc.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChatd\<span class="string">" WeChatd.exe</span></div><div class="line">start /d "C:\Program Files (x86)\Tencent\WeChate\<span class="string">" WeChate.exe</span></div><div class="line">exit</div></pre></td></tr></table></figure>
<p>需要注意的是，这样配置之后的脚本将不一定百分百执行成功，可能只打开一个客户端。一般第二次即可执行成功。</p>
<h1 id="局部代理"><a href="#局部代理" class="headerlink" title="局部代理"></a>局部代理</h1><p>这里，我使用了Proxifier工具，进行局部代理。这个工具很容易获取，x度上很容易就可以获取到免费破解汉化的版本。</p>
<p>安装之后，我们开始配置工作。</p>
<blockquote>
<p>1.配置文件-&gt;代理服务器  这里地址填本机127.0.0.1，端口填你想要转发的端口，比如8080，8081，协议类型是HTTPS。你想开多少，就填多少个。</p>
<p><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693277.png" alt="图1"><br><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693607.png" alt="图2"></p>
<p>2.配置文件-&gt;代理规则    这里我们把默认的全局代理给关闭，双击条目，将“是否有效”取消勾选即可。然后添加微信的代理规则，点击添加，名称随意，应用程序浏览到微信的exe文件，目标主机清空，端口清空，然后在最下方的动作中选择你上一步配置的一个端口。那么这个路径下的客户端执行时，便会代理到这个端口下了。</p>
<p><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574693777.png" alt="图3"><br><img src="https://raw.githubusercontent.com/z16388/blog_pic/master/15735574694007.png" alt="图4"></p>
</blockquote>
<p>微信多开之后，我们会发现多开的这几个的微信的进程名是一样的，无法进行区分。这时候可以在任务管理器中使用切换到、最小化等功能确定哪个窗口是哪个进程，转到本地文件来确定他是哪个目录下的。在开多个的时候，一定要注意区分，以防登错账号，影响爬取。</p>
<p>爬虫的配置文件中，我们最好使用不同的mysql数据库，以免产影响。当然，如果你修改了原工具的代码，那就另当别论了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前因为需求找到了这个超级好用的微信爬虫工具&lt;a href=&quot;https://github.com/striver-ing/wechat-spider&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/striver-in
    
    </summary>
    
    
      <category term="微信" scheme="http://www.z16388.top/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="爬虫" scheme="http://www.z16388.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（七） lua</title>
    <link href="http://www.z16388.top/2019/10/29/unity7/"/>
    <id>http://www.z16388.top/2019/10/29/unity7/</id>
    <published>2019-10-29T15:00:07.000Z</published>
    <updated>2020-10-30T08:41:14.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lua实现类的继承"><a href="#lua实现类的继承" class="headerlink" title="lua实现类的继承"></a>lua实现类的继承</h2><h2 id="lua遍历查找某个数"><a href="#lua遍历查找某个数" class="headerlink" title="lua遍历查找某个数"></a>lua遍历查找某个数</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lua实现类的继承&quot;&gt;&lt;a href=&quot;#lua实现类的继承&quot; class=&quot;headerlink&quot; title=&quot;lua实现类的继承&quot;&gt;&lt;/a&gt;lua实现类的继承&lt;/h2&gt;&lt;h2 id=&quot;lua遍历查找某个数&quot;&gt;&lt;a href=&quot;#lua遍历查找某个数&quot; cla
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（六） 优化</title>
    <link href="http://www.z16388.top/2019/10/29/unity6/"/>
    <id>http://www.z16388.top/2019/10/29/unity6/</id>
    <published>2019-10-29T15:00:06.000Z</published>
    <updated>2020-10-30T04:31:19.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="请简述GC（垃圾回收）产生的原因，并描述如何避免（？"><a href="#请简述GC（垃圾回收）产生的原因，并描述如何避免（？" class="headerlink" title="请简述GC（垃圾回收）产生的原因，并描述如何避免（？"></a>请简述GC（垃圾回收）产生的原因，并描述如何避免（？</h2><blockquote>
<p>GC回收堆上的内存<br>避免：1.减少new产生对象的次数<br>2.使用公用的对象（静态成员）<br>3.将String换为StringBuilder</p>
</blockquote>
<h2 id="如何优化内存？"><a href="#如何优化内存？" class="headerlink" title="如何优化内存？"></a>如何优化内存？</h2><blockquote>
<p>1.压缩自带类库；<br>2.将暂时不用的以后还需要使用的物体隐藏起来而不是直接Destroy掉；<br>3.释放AssetBundle占用的资源；<br>4.降低模型的片面数，降低模型的骨骼数量，降低贴图的大小；<br>5.使用光照贴图，使用多层次细节(LOD)，使用着色器(Shader)，使用预设(Prefab)。<br>6.代码中少产生临时变量</p>
</blockquote>
<h2 id="UNITY3d在移动设备上的一些优化资源的方法"><a href="#UNITY3d在移动设备上的一些优化资源的方法" class="headerlink" title="UNITY3d在移动设备上的一些优化资源的方法"></a>UNITY3d在移动设备上的一些优化资源的方法</h2><blockquote>
<p>1.使用assetbundle，实现资源分离和共享，将内存控制到200m之内，同时也可以实现资源的在线更新<br>2.顶点数对渲染无论是cpu还是gpu都是压力最大的贡献者，降低顶点数到8万以下，fps稳定到了30帧左右<br>3.只使用一盏动态光，不是用阴影，不使用光照探头<br>粒子系统是cpu上的大头<br>4.剪裁粒子系统<br>5.合并同时出现的粒子系统<br>6.自己实现轻量级的粒子系统<br>animator也是一个效率奇差的地方<br>7.把不需要跟骨骼动画和动作过渡的地方全部使用animation，控制骨骼数量在30根以下<br>8.animator出视野不更新<br>9.删除无意义的animator<br>10.animator的初始化很耗时（粒子上能不能尽量不用animator）<br>11.除主角外都不要跟骨骼运动apply root motion<br>12.绝对禁止掉那些不带刚体带包围盒的物体（static collider ）运动<br>NUGI的代码效率很差，基本上runtime的时候对cpu的贡献和render不相上下<br>13每帧递归的计算finalalpha改为只有初始化和变动时计算<br>14去掉法线计算<br>15不要每帧计算viewsize 和windowsize<br>16filldrawcall时构建顶点缓存使用array.copy<br>17.代码剪裁：使用strip level ，使用.net2.0 subset<br>18.尽量减少smooth group<br>19.给美术定一个严格的经过科学验证的美术标准，并在U3D里面配以相应的检查工具</p>
</blockquote>
<h2 id="场景优化"><a href="#场景优化" class="headerlink" title="场景优化"></a>场景优化</h2><blockquote>
<p>1.遮挡剔除（Occlusion Culling）                不显示被遮挡住的物体<br>2.LOD                                         根据相机距离远近显示不同精细程度的模型<br>3.大场景可以调节相机可视距离<br>4.小物体可以适当隐藏掉<br>5.使用光照贴图                                 避免动态实时的进行光照计算，提高效率</p>
</blockquote>
<h2 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h2><blockquote>
<p>1.将同一画面图片放到同一图集中<br>2.图片和文字尽量不要交叉，会产生多余drawcall（相同材质和纹理的UI元素是可以合并的）<br>3.UI层级尽量不要重叠太多<br>4.取消勾选不必要的射线检测RaycastTarget<br>5.将动态的UI元素和静态的UI元素放在不同的Canvas中，减少canvas网格重构频率</p>
</blockquote>
<h2 id="GC优化"><a href="#GC优化" class="headerlink" title="GC优化"></a>GC优化</h2><blockquote>
<p>1.字符串使用StringBuilder而不是string，stringBuilder在创建时会自动获取一个容量存储并逐渐扩充，string每一次改变都会创建一个新的对象。<br>2.访问物体tag的时候尽量使用Gameobject.CompareTag()，因为访问物体的tag属性会在堆上额外的分配空间<br>3.使用对象池缓存大量创建的物体<br>4.用for代替foreach，foreach每次迭代产生24字节垃圾内存</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;请简述GC（垃圾回收）产生的原因，并描述如何避免（？&quot;&gt;&lt;a href=&quot;#请简述GC（垃圾回收）产生的原因，并描述如何避免（？&quot; class=&quot;headerlink&quot; title=&quot;请简述GC（垃圾回收）产生的原因，并描述如何避免（？&quot;&gt;&lt;/a&gt;请简述GC（垃圾
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（五） 渲染与光照</title>
    <link href="http://www.z16388.top/2019/10/29/unity5/"/>
    <id>http://www.z16388.top/2019/10/29/unity5/</id>
    <published>2019-10-29T15:00:05.000Z</published>
    <updated>2020-10-30T07:38:01.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是渲染管道（？"><a href="#什么是渲染管道（？" class="headerlink" title="什么是渲染管道（？"></a>什么是渲染管道（？</h2><blockquote>
<p>是指在显示器上为了显示出图像而经过的一系列必要操作。 渲染管道中的很多步骤，都要将几何物体从一个坐标系中变换到另一个坐标系中去。主要步骤有：<br>本地坐标-&gt;视图坐标-&gt;背面裁剪-&gt;光照-&gt;裁剪-&gt;投影-&gt;视图变换-&gt;光栅化</p>
</blockquote>
<h2 id="对渲染管线的理解"><a href="#对渲染管线的理解" class="headerlink" title="对渲染管线的理解"></a>对渲染管线的理解</h2><blockquote>
<p>渲染流水线流程：<br>1.应用阶段（由CPU负责，输出是渲染所需要的几何信息，即渲染图元）<br>2.几何阶段（由GPU负责，处理渲染图元，这阶段中最重要的就是把顶点坐标变换屏幕空间中，交给光栅器处理<br>这阶段输出的是屏幕空间中二维顶点坐标、每个顶点对应的深度值、着色等相关信息）<br>3.光栅化阶段（由GPU，负责这一阶段会使用上个阶段传递的数据来产生屏幕上的像素，并渲染出最终的图像）<br>细节过程<a href="https://zhuanlan.zhihu.com/p/97498781" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/97498781</a></p>
<p>渲染管线(Rendering Pipeline)就是GPU渲染。流程：顶点处理、面处理、光栅化、像素处理。顶点处理：通过一系列坐标系转换将模型顶点在摄像机前位移，最终投影到摄像机屏幕上(本地 - 世界 - 观察 - 投影)。包括顶点坐标变化、逐顶点雾化、材质属性和光照属性处理。面处理：面的组装、截取、剔除。光栅化：消除遮挡面；Texture Operation，根据像素纹理坐标查询对应纹理值；Blending，根据已经画好颜色与正在计算的颜色alpha值混合形成新颜色；Filtering，将正在计算的颜色经过某种滤镜后输出，该阶段后像素的颜色值被写入帧缓存中。像素处理：对每个像素区域着色，对像素贴上贴图形成最终画面。</p>
</blockquote>
<h2 id="什么是DrawCall？DrawCall高了又什么影响？如何降低DrawCall？"><a href="#什么是DrawCall？DrawCall高了又什么影响？如何降低DrawCall？" class="headerlink" title="什么是DrawCall？DrawCall高了又什么影响？如何降低DrawCall？"></a>什么是DrawCall？DrawCall高了又什么影响？如何降低DrawCall？</h2><blockquote>
<p>Unity中，每次引擎准备数据并通知GPU的过程称为一次Draw Call。DrawCall越高对显卡的消耗就越大。降低DrawCall的方法：</p>
<ol>
<li>Dynamic Batching</li>
<li>Static Batching</li>
<li>高级特性Shader降级为统一的低级特性的Shader。</li>
</ol>
</blockquote>
<h2 id="什么是DrawCall，有什么方法可以减少DrawCall"><a href="#什么是DrawCall，有什么方法可以减少DrawCall" class="headerlink" title="什么是DrawCall，有什么方法可以减少DrawCall"></a>什么是DrawCall，有什么方法可以减少DrawCall</h2><blockquote>
<p>CPU通过调用绘制命令来告诉GPU开始进行一个渲染过程(一次DrawCall)。<br>CPU方面减少DrawCall：<br>1、使用Draw Call Batching 、Dynamic Batching动态批处理<br>2、纹理打包成图集减少材质使用<br>3、少用反光、阴影<br>4、设置一个合适的Fixed Timestep<br>5、不要使用网格碰撞器(Mesh Collider)<br>6、大量或频繁的字符串连接操作一定要用StringBuilder<br>7、某些可能情况，使用结构体代替类<br>8、使用对象池重复利用空间<br>9、尽量不要用foreach，用for<br>10、不要直接访问GameObjcet的tag属性<br>11、不要频繁使用GetComponent，访问一次后保留其引用<br>12、使用OnBecameVisible()和OnBecameInVisible()，控制物体update()函数的执行减少开销<br>13、使用内建数组，如Vector3.zero而不是new Vector3(0,0,0)<br>14、使用ref关键字对方法的参数进行优化<br>15、关闭所有update中的log操作<br>16、不在update中调用GetComponent、SendMessage、FindWithTag等方法<br>17、不在update中使用临时变量</p>
</blockquote>
<h2 id="GPU方面减少DrawCall"><a href="#GPU方面减少DrawCall" class="headerlink" title="GPU方面减少DrawCall"></a>GPU方面减少DrawCall</h2><blockquote>
<p>1、使用纹理图集代替一系列单独小贴图<br>2、保持材质数目尽可能少<br>3、如果使用纹理图集和共享材质，用Renderer.sharedMaterial代替Renderer.material<br>4、使用光照纹理(lightmap)而非实时灯光<br>5、使用LOD<br>6、使用mobile版的shader<br>7、尽可能减少顶点数、背面删减<br>8、压缩图片，减少显存带宽压力</p>
</blockquote>
<h2 id="什么是material，什么是shader，二者有什么关系"><a href="#什么是material，什么是shader，二者有什么关系" class="headerlink" title="什么是material，什么是shader，二者有什么关系"></a>什么是material，什么是shader，二者有什么关系</h2><blockquote>
<p>材质系统定义了如何渲染物件表面信息。shader里面使用材质信息加自身操作，最终呈现物体渲染。shader是material一部分，是根据计算即时演算生成贴图的程序，叫着色器。常用处理无法用固定贴图表现的模型。material是模型的材质，包含贴图、shader、顶点、凹凸等信息。</p>
</blockquote>
<h2 id="如何在Unity3D中查看场景的面数，顶点数和Draw-Call数？如何降低Draw-Call数"><a href="#如何在Unity3D中查看场景的面数，顶点数和Draw-Call数？如何降低Draw-Call数" class="headerlink" title="如何在Unity3D中查看场景的面数，顶点数和Draw Call数？如何降低Draw Call数"></a>如何在Unity3D中查看场景的面数，顶点数和Draw Call数？如何降低Draw Call数</h2><blockquote>
<p>在Game视图右上角点击Stats。降低Draw Call 的技术是Draw Call Batching<br>这个在5.0以后在window-》Profiler下面，快捷键是cmd + 7（ctl + 7</p>
</blockquote>
<h2 id="DrawCall和SetPass-Call"><a href="#DrawCall和SetPass-Call" class="headerlink" title="DrawCall和SetPass Call"></a>DrawCall和SetPass Call</h2><blockquote>
<p>DrawCall：meshes网格绘制应用批处理后的总数。请注意，在多次呈现对象(例如，由像素灯照明的对象)，每个在一个单独的渲染结果绘制调用。</p>
<p>SetPass Call：渲染改变（ passes）次数。每个改变 需要Unity运行时绑定一个新的渲染器（shader），它可能会引入 CPU 开销。</p>
</blockquote>
<h2 id="Unity3D-Shader分哪几种，有什么区别"><a href="#Unity3D-Shader分哪几种，有什么区别" class="headerlink" title="Unity3D Shader分哪几种，有什么区别"></a>Unity3D Shader分哪几种，有什么区别</h2><blockquote>
<p>表面着色器的抽象层次比较高，它可以轻松地以简洁方式实现复杂着色。表面着色器可同时在前向渲染及延迟渲染模式下正常工作。<br>顶点片段着色器可以非常灵活地实现需要的效果，但是需要编写更多的代码，并且很难与Unity的渲染管线完美集成。<br>固定功能管线着色器可以作为前两种着色器的备用选择，当硬件无法运行那些酷炫Shader的时，还可以通过固定功能管线着色器来绘制出一些基本的内容。</p>
</blockquote>
<h2 id="有A和B两组物体，有什么办法能够保证A组物体永远比B组物体先渲染？"><a href="#有A和B两组物体，有什么办法能够保证A组物体永远比B组物体先渲染？" class="headerlink" title="有A和B两组物体，有什么办法能够保证A组物体永远比B组物体先渲染？"></a>有A和B两组物体，有什么办法能够保证A组物体永远比B组物体先渲染？</h2><blockquote>
<p>把A组物体的渲染队列大于B物体的渲染队列，通过shader里面的渲染队列来渲染</p>
</blockquote>
<h2 id="问一个Terrain，分别贴3张，4张，5张地表贴图，渲染速度有什么区别？为什么？"><a href="#问一个Terrain，分别贴3张，4张，5张地表贴图，渲染速度有什么区别？为什么？" class="headerlink" title="问一个Terrain，分别贴3张，4张，5张地表贴图，渲染速度有什么区别？为什么？"></a>问一个Terrain，分别贴3张，4张，5张地表贴图，渲染速度有什么区别？为什么？</h2><blockquote>
<p>没有区别，因为不管几张贴图只渲染一次。</p>
</blockquote>
<h2 id="LOD是什么，优缺点"><a href="#LOD是什么，优缺点" class="headerlink" title="LOD是什么，优缺点(?"></a>LOD是什么，优缺点(?</h2><blockquote>
<p>LOD(Level of detail)多层次细节，是最常用的游戏优化技术。它按照模型的位置和重要程度决定物体渲染的资源分配，降低非重要物体的面数和细节度，从而获得高效率的渲染运算。缺点是增加了内存。</p>
</blockquote>
<h2 id="MipMap是什么，作用"><a href="#MipMap是什么，作用" class="headerlink" title="MipMap是什么，作用(?"></a>MipMap是什么，作用(?</h2><blockquote>
<p>MipMapping：在三维计算机图形的贴图渲染中有常用的技术，为加快渲染进度和减少图像锯齿，贴图被处理成由一系列被预先计算和优化过的图片组成的文件，这样的贴图被称为MipMap。</p>
</blockquote>
<h2 id="什么是LightMap"><a href="#什么是LightMap" class="headerlink" title="什么是LightMap"></a>什么是LightMap</h2><blockquote>
<p>LightMap:就是指在三维软件里实现打好光，然后渲染把场景各表面的光照输出到贴图上，最后又通过引擎贴到场景上，这样就使物体有了光照的感觉。</p>
</blockquote>
<h2 id="alpha-blend工作原理"><a href="#alpha-blend工作原理" class="headerlink" title="alpha blend工作原理"></a>alpha blend工作原理</h2><blockquote>
<p>Alpha Blend 实现透明效果，不过只能针对某块区域进行alpha操作，透明度可设。</p>
<p>alpha blend 用于做半透明效果。Color = (源颜色 <em>    源系数) OP (   目标颜色</em> 目标系数);其中OP（混合方式）有加，减，反减，取最小，取最大</p>
</blockquote>
<h2 id="Unity的Shader中，Blend-SrcAlpha-OneMinusSrcAlpha这句话是什么意思"><a href="#Unity的Shader中，Blend-SrcAlpha-OneMinusSrcAlpha这句话是什么意思" class="headerlink" title="Unity的Shader中，Blend SrcAlpha OneMinusSrcAlpha这句话是什么意思"></a>Unity的Shader中，Blend SrcAlpha OneMinusSrcAlpha这句话是什么意思</h2><blockquote>
<p>作用就是Alpha混合。公式：最终颜色 = 源颜色 x 源透明值 + 目标颜色 x（1 - 源透明值）</p>
</blockquote>
<h2 id="alpha-test在何时使用？能达到什么效果"><a href="#alpha-test在何时使用？能达到什么效果" class="headerlink" title="alpha test在何时使用？能达到什么效果"></a>alpha test在何时使用？能达到什么效果</h2><blockquote>
<p>Alpha Test ,中文就是透明度测试。简而言之就是V&amp;F shader中最后fragment函数输出的该点颜色值（即上一讲frag的输出half4）的alpha值与固定值进行比较。AlphaTest语句通常于Pass{}中的起始位置。Alpha Test产生的效果也很极端，要么完全透明，即看不到，要么完全不透明。</p>
</blockquote>
<h2 id="Vertex-Shader是什么，怎么计算"><a href="#Vertex-Shader是什么，怎么计算" class="headerlink" title="Vertex Shader是什么，怎么计算"></a>Vertex Shader是什么，怎么计算</h2><blockquote>
<p>顶点着色器是一段执行在GPU上的程序，用来取代fixed pipeline中的transformation和lighting，Vertex Shader主要操作顶点。<br>Vertex Shader对输入顶点完成了从local space到homogeneous space（齐次空间）的变换过程，homogeneous space即projection space的下一个space。在这其间共有world transformation, view transformation和projection transformation及lighting几个过程。</p>
</blockquote>
<h2 id="写出光照计算中的diffuse（漫反射）的计算公式"><a href="#写出光照计算中的diffuse（漫反射）的计算公式" class="headerlink" title="写出光照计算中的diffuse（漫反射）的计算公式"></a>写出光照计算中的diffuse（漫反射）的计算公式</h2><blockquote>
<p>diffuse = Kd x colorLight x max(N*L,0)；<br>Kd 漫反射系数、colorLight 光的颜色、N 单位法线向量、L 由点指向光源的单位向量、其中N与L点乘，如果结果小于等于0，则漫反射为0。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">答：漫反射光(diffuse)计算公式为：Idiffuse = Dintensity*Dcolor*N.L ; (Dintensity表示漫反射强度，Dcolor表示漫反射光颜色，N为该点的法向量，L为光源向量)</div><div class="line"></div><div class="line">  其他，3D渲染中，物体表面的光照计算公式为：</div><div class="line"></div><div class="line">I = 环境光(Iambient) + 漫反射光(Idiffuse) + 镜面高光(Ispecular);</div><div class="line"></div><div class="line">  其中，环境光(ambient)计算公式为：</div><div class="line"></div><div class="line">Iambient= Aintensity* Acolor; (Aintensity表示环境光强度，Acolor表示环境光颜色)</div><div class="line"></div><div class="line">  漫反射光(diffuse)计算公式为：</div><div class="line"></div><div class="line">Idiffuse = Dintensity*Dcolor*N.L ; (Dintensity表示漫反射强度，Dcolor表示漫反射光颜色，N为该点的法向量，L为光源向量)</div><div class="line"></div><div class="line">镜面光照(specular)计算公式为：</div><div class="line"></div><div class="line">Ispecular = Sintensity*Scolor*(R.V)n; (Sintensity表示镜面光照强度，Scolor表示镜面光颜色，R为光的反射向量，V为观察者向量)</div><div class="line"></div><div class="line">综上所得：整个光照公式为：</div><div class="line"></div><div class="line">I = Aintensity* Acolor+ Dintensity*Dcolor*N.L + Sintensity*Scolor*(R.V)n ;</div><div class="line"></div><div class="line">将一些值合并，并使用白色作为光照颜色，则上述公式可简化为：</div><div class="line"></div><div class="line">I = A + D*N.L + (R.V)n</div></pre></td></tr></table></figure>
<h2 id="MeshRender中material和sharedmaterial的区别"><a href="#MeshRender中material和sharedmaterial的区别" class="headerlink" title="MeshRender中material和sharedmaterial的区别(?"></a>MeshRender中material和sharedmaterial的区别(?</h2><blockquote>
<p>修改sharedMaterial将改变所有物体使用这个材质的外观，并且也改变储存在工程里的材质设置。不推荐修改由sharedMaterial返回的材质。如果你想修改渲染器的材质，使用material替代。</p>
</blockquote>
<h1 id="简述水面倒影的渲染原理"><a href="#简述水面倒影的渲染原理" class="headerlink" title="简述水面倒影的渲染原理"></a>简述水面倒影的渲染原理</h1><blockquote>
<p>原理就是对水面的贴图纹理进行扰动，以产生波光玲玲的效果。用shader可以通过GPU在像素级别作扰动，效果细腻，需要的顶点少，速度快</p>
</blockquote>
<h2 id="什么叫动态合批？跟静态合批有什么区别"><a href="#什么叫动态合批？跟静态合批有什么区别" class="headerlink" title="什么叫动态合批？跟静态合批有什么区别"></a>什么叫动态合批？跟静态合批有什么区别</h2><blockquote>
<p>如果动态物体共用着相同的材质，那么Unity会自动对这些物体进行批处理。动态批处理操作是自动完成的，并不需要你进行额外的操作。<br>区别：动态批处理一切都是自动的，不需要做任何操作，而且物体是可以移动的，但是限制很多。静态批处理：自由度很高，限制很少，缺点可能会占用更多的内存，而且经过静态批处理后的所有物体都不可以再移动了。</p>
</blockquote>
<h2 id="两种阴影判断的方法、工作原理。"><a href="#两种阴影判断的方法、工作原理。" class="headerlink" title="两种阴影判断的方法、工作原理。"></a>两种阴影判断的方法、工作原理。</h2><blockquote>
<p>本影：景物表面上那些没有被光源直接照射的区域（全黑的轮廓分明的区域）。<br>半影：景物表面上那些被某些特定光源直接照射但并非被所有特定光源直接照射的区域（半明半暗区域）<br>工作原理：从光源处向物体的所有可见面投射光线，将这些面投影到场景中得到投影面，再将这些投影面与场景中的其他平面求交得出阴影多边形，保存这些阴影多边形信息，然后再按视点位置对场景进行相应处理得到所要求的视图（利用空间换时间，每次只需依据视点位置进行一次阴影计算即可，省去了一次消隐过程）</p>
</blockquote>
<h2 id="Unity提供了几种光源，分别是什么"><a href="#Unity提供了几种光源，分别是什么" class="headerlink" title="Unity提供了几种光源，分别是什么"></a>Unity提供了几种光源，分别是什么</h2><blockquote>
<p>四种。<br>平行光：Directional Light<br>点光源：Point Light<br>聚光灯：Spot Light<br>区域光源：Area Light</p>
</blockquote>
<h2 id="实时点光源的优缺点是什么"><a href="#实时点光源的优缺点是什么" class="headerlink" title="实时点光源的优缺点是什么"></a>实时点光源的优缺点是什么</h2><blockquote>
<p>可以有cookies – 带有 alpha通道的立方图(Cubemap )纹理。点光源是最耗费资源的。</p>
</blockquote>
<h2 id="GPU的工作原理"><a href="#GPU的工作原理" class="headerlink" title="GPU的工作原理"></a>GPU的工作原理</h2><blockquote>
<p>简而言之，GPU的图形（处理）流水线完成如下的工作：（并不一定是按照如下顺序） 顶点处理：这阶段GPU读取描述3D图形外观的顶点数据并根据顶点数据确定3D图形的形状及位置关系，建立起3D图形的骨架。在支持DX8和DX9规格的GPU中，这些工作由硬件实现的Vertex Shader（定点着色器）完成。 光栅化计算：显示器实际显示的图像是由像素组成的，我们需要将上面生成的图形上的点和线通过一定的算法转换到相应的像素点。把一个矢量图形转换为一系列像素点的过程就称为光栅化。例如，一条数学表示的斜线段，最终被转化成阶梯状的连续像素点。 纹理帖图：顶点单元生成的多边形只构成了3D物体的轮廓，而纹理映射（texture mapping）工作完成对多变形表面的帖图，通俗的说，就是将多边形的表面贴上相应的图片，从而生成“真实”的图形。TMU（Texture mapping unit）即是用来完成此项工作。 像素处理：这阶段（在对每个像素进行光栅化处理期间）GPU完成对像素的计算和处理，从而确定每个像素的最终属性。在支持DX8和DX9规格的GPU中，这些工作由硬件实现的Pixel Shader（像素着色器）完成。 最终输出：由ROP（光栅化引擎）最终完成像素的输出，1帧渲染完毕后，被送到显存帧缓冲区。<br>总结：GPU的工作通俗的来说就是完成3D图形的生成，将图形映射到相应的像素点上，对每个像素进行计算确定最终颜色并完成输出。</p>
</blockquote>
<h1 id="图形学"><a href="#图形学" class="headerlink" title="图形学"></a>图形学</h1><h2 id="光照模型有哪些"><a href="#光照模型有哪些" class="headerlink" title="光照模型有哪些"></a>光照模型有哪些</h2><h2 id="3维模型组成"><a href="#3维模型组成" class="headerlink" title="3维模型组成"></a>3维模型组成</h2><p>Mesh</p>
<h2 id="Mesh下面有哪些字段"><a href="#Mesh下面有哪些字段" class="headerlink" title="Mesh下面有哪些字段"></a>Mesh下面有哪些字段</h2><h2 id="如向将文理贴在模型上"><a href="#如向将文理贴在模型上" class="headerlink" title="如向将文理贴在模型上"></a>如向将文理贴在模型上</h2><h2 id="图片向格式有那些"><a href="#图片向格式有那些" class="headerlink" title="图片向格式有那些"></a>图片向格式有那些</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是渲染管道（？&quot;&gt;&lt;a href=&quot;#什么是渲染管道（？&quot; class=&quot;headerlink&quot; title=&quot;什么是渲染管道（？&quot;&gt;&lt;/a&gt;什么是渲染管道（？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;是指在显示器上为了显示出图像而经过的一系列必要操作。 渲染
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（四） 物理相关</title>
    <link href="http://www.z16388.top/2019/10/29/unity4/"/>
    <id>http://www.z16388.top/2019/10/29/unity4/</id>
    <published>2019-10-29T15:00:04.000Z</published>
    <updated>2020-10-30T08:41:37.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="射线检测碰撞物的原理是"><a href="#射线检测碰撞物的原理是" class="headerlink" title="射线检测碰撞物的原理是"></a>射线检测碰撞物的原理是</h2><blockquote>
<p>射线是3D世界中一个点向一个方向发射的一条无终点的线，在发射轨迹中与其他物体发生碰撞时，它将停止发射 。</p>
</blockquote>
<h2 id="Unity3d中的碰撞器和触发器的区别？"><a href="#Unity3d中的碰撞器和触发器的区别？" class="headerlink" title="Unity3d中的碰撞器和触发器的区别？"></a>Unity3d中的碰撞器和触发器的区别？</h2><blockquote>
<p>碰撞器是触发器的载体，触发器是碰撞器的属性<br>Is Trigger=false，碰撞器根据物理引擎引发碰撞，产生碰撞的效果<br>此时调用OnCollisionEnter/Stay/Exit函数<br>Is Trigger=true，碰撞器被物理引擎所忽略，没有碰撞效果<br>此时调用OnTriggerEnter/Stay/Exit函数</p>
</blockquote>
<h2 id="发生碰撞的必要条件"><a href="#发生碰撞的必要条件" class="headerlink" title="发生碰撞的必要条件"></a>发生碰撞的必要条件</h2><blockquote>
<p>两个物体都必须带有碰撞器（Collider）<br>其中至少有一个物体带有刚体（Rigidbody）或者角色控制器（CharacController）<br>必须是运动的物体带有Rigidbody脚本才能检测到碰撞</p>
</blockquote>
<h2 id="物体发生碰撞的过程有几个阶段"><a href="#物体发生碰撞的过程有几个阶段" class="headerlink" title="物体发生碰撞的过程有几个阶段"></a>物体发生碰撞的过程有几个阶段</h2><blockquote>
<p>1.OnCollisionEnter<br>2.OnCollisionStay<br>3.OnCollisionExit</p>
</blockquote>
<h2 id="当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"><a href="#当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？" class="headerlink" title="当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？"></a>当一个细小的高速物体撞向另一个较大的物体时，会出现什么情况？如何避免？</h2><blockquote>
<p>穿透（碰撞检测失败）<br>1）增大细小物体的碰撞体（不建议这样做）<br>（2）使用射线检测，检测他们之间的距离<br>（3）FixedUpdate频率修改，可以physics time减小（同样不建议）<br>（4）改变物体的速度（废话）<br>（5）将检测方式改为连续检测，rigifdbody.collisionDetectionMode =CollisionDetectionMode.Continuous;<br>或者是动态连续检测（CollisionDetectionMode.ContinuousDynamic）<br>（6）代码限制，加大计算量 提前计算好下一个位置</p>
</blockquote>
<h2 id="Unity3d物理引擎中，有几种施加力的方式（？"><a href="#Unity3d物理引擎中，有几种施加力的方式（？" class="headerlink" title="Unity3d物理引擎中，有几种施加力的方式（？"></a>Unity3d物理引擎中，有几种施加力的方式（？</h2><blockquote>
<p>rigidbody.AddForce/AddForceAtPosition，都在rigidbody系列函数中</p>
</blockquote>
<h2 id="CharacterController和Rigdibody的区别"><a href="#CharacterController和Rigdibody的区别" class="headerlink" title="CharacterController和Rigdibody的区别"></a>CharacterController和Rigdibody的区别</h2><blockquote>
<p>Rigidbody：刚体组件、用于模拟真实的物理效果、可以受到重力和其他力的作用、这个力可以直接施加、也可以来自其他刚体的碰撞<br>CharacterController：角色控制组件，它自带一个胶囊控制器，能够受到重力的影响。移动时使用自身的Move()、SimpleMove()方法</p>
<p>Rigidbody具有完全真实物理的特性，Unity中物理系统最基本的一个组件，包含了常用的物理特性，而CharacterController可以说是受限的的Rigidbody，具有一定的物理效果但不是完全真实的，是Unity为了使开发者能方便的开发第一人称视角的游戏而封装的一个组件</p>
</blockquote>
<h2 id="什么叫做链条关节-？"><a href="#什么叫做链条关节-？" class="headerlink" title="什么叫做链条关节(？"></a>什么叫做链条关节(？</h2><blockquote>
<p>Hinge Joint，可以模拟两个物体间用一根链条连接在一起的情况，能保持两个物体在一个固定距离内部相互移动而不产生作用力，但是达到固定距离后就会产生拉力。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;射线检测碰撞物的原理是&quot;&gt;&lt;a href=&quot;#射线检测碰撞物的原理是&quot; class=&quot;headerlink&quot; title=&quot;射线检测碰撞物的原理是&quot;&gt;&lt;/a&gt;射线检测碰撞物的原理是&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;射线是3D世界中一个点向一个方向发射的一条
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（三） Unity基础</title>
    <link href="http://www.z16388.top/2019/10/29/unity3/"/>
    <id>http://www.z16388.top/2019/10/29/unity3/</id>
    <published>2019-10-29T15:00:03.000Z</published>
    <updated>2020-10-30T09:46:16.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unity基础"><a href="#Unity基础" class="headerlink" title="Unity基础"></a>Unity基础</h1><h2 id="Unity和Android与iOS如何交互"><a href="#Unity和Android与iOS如何交互" class="headerlink" title="Unity和Android与iOS如何交互"></a>Unity和Android与iOS如何交互</h2><blockquote>
<p>Unity可以导出安卓和IOS的工程。导出的工程有Unity封装的方法，可以通过发消息的方式跟Unity进行交互。其中，C#不能与OC直接进行交互，需要用C++去写。</p>
</blockquote>
<h2 id="Unity3D支持的作为脚本的语言"><a href="#Unity3D支持的作为脚本的语言" class="headerlink" title="Unity3D支持的作为脚本的语言"></a>Unity3D支持的作为脚本的语言</h2><blockquote>
<p>C#、JS、Boo </p>
</blockquote>
<h2 id="Unity中用过哪些插件？具体功能"><a href="#Unity中用过哪些插件？具体功能" class="headerlink" title="Unity中用过哪些插件？具体功能"></a>Unity中用过哪些插件？具体功能</h2><blockquote>
<p>NGUI，制作2D界面</p>
<p>Helpshift，帮助与提示</p>
<p>KTPlay，游戏论坛</p>
<p>UniClipboard，粘贴板</p>
</blockquote>
<h2 id="Unity中常用的插件（Δ）"><a href="#Unity中常用的插件（Δ）" class="headerlink" title="Unity中常用的插件（Δ）"></a>Unity中常用的插件（Δ）</h2><h2 id="Unity引擎使用的是左手坐标系还是右手坐标系（A）"><a href="#Unity引擎使用的是左手坐标系还是右手坐标系（A）" class="headerlink" title="Unity引擎使用的是左手坐标系还是右手坐标系（A）"></a>Unity引擎使用的是左手坐标系还是右手坐标系（A）</h2><blockquote>
<p>A.左手坐标系 B.右手坐标系<br>C.可以通过ProjectSetting切换右手坐标系 D.可以通过Reference切换左手坐标系</p>
</blockquote>
<h2 id="什么是导航网格（NavMesh）（B）"><a href="#什么是导航网格（NavMesh）（B）" class="headerlink" title="什么是导航网格（NavMesh）（B）"></a>什么是导航网格（NavMesh）（B）</h2><blockquote>
<p>A.一种用于描述相机轨迹的网格 B.一种用于实现自动寻址的网格<br>C.一种被优化过的物体网格 D.一种用于物理碰撞的网格</p>
</blockquote>
<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="OnEnable、Awake、Start运行时发生的顺序，哪些可以在同一周期中重复发生"><a href="#OnEnable、Awake、Start运行时发生的顺序，哪些可以在同一周期中重复发生" class="headerlink" title="OnEnable、Awake、Start运行时发生的顺序，哪些可以在同一周期中重复发生"></a>OnEnable、Awake、Start运行时发生的顺序，哪些可以在同一周期中重复发生</h2><blockquote>
<p>Awake-&gt;OnEnable-&gt;Start<br>OnEnable可以在同一周期中重复发生</p>
</blockquote>
<h2 id="生命周期顺序"><a href="#生命周期顺序" class="headerlink" title="生命周期顺序"></a>生命周期顺序</h2><blockquote>
<p>Awake——&gt;OnEnable–&gt;Start——&gt;Update——&gt;FixedUpdate——&gt;LateUpdate——&gt;OnGUI——&gt;OnDisable——&gt;OnDestroy</p>
<p>Awake() 脚本唤醒，系统执行的第一个方法，用于脚本初始化，只执行一次。</p>
<p>Start()在Awake之后、Update之前执行，只执行一次。</p>
<p>Update()用于逻辑正常更新，每帧由系统自动调用一次。</p>
<p>FixedUpdate()固定更新。</p>
<p>LateUpdate()推迟更新，每帧调用，在Update之后调用。</p>
<p>OnGUI() 每帧可能会被绘制多次，每次对应于一个 GUI event</p>
<p>OnDestroy()当前脚本销毁时调用。</p>
</blockquote>
<h2 id="12-以下关于-MonoBehaviour-OnGUI-的描述错误的是（D）"><a href="#12-以下关于-MonoBehaviour-OnGUI-的描述错误的是（D）" class="headerlink" title="12.以下关于 MonoBehaviour.OnGUI()的描述错误的是（D）"></a>12.以下关于 MonoBehaviour.OnGUI()的描述错误的是（D）</h2><blockquote>
<p>A.如果 MonoBehaviour 没有被启用，则OnGUI函数不会被调用<br>B.用于绘制和处理 GUI events<br>C.每帧可能会被绘制多次，每次对应于一个 GUI event<br>D.每帧被调用一次</p>
</blockquote>
<h2 id="Addcomponent后哪个生命周期函数会被调用？"><a href="#Addcomponent后哪个生命周期函数会被调用？" class="headerlink" title="Addcomponent后哪个生命周期函数会被调用？"></a>Addcomponent后哪个生命周期函数会被调用？</h2><blockquote>
<p>对于AddComponent添加的脚本，其Awake，Start，OnEnable是在Add的当前帧被调用的，其中Awake，OnEnable与AddComponent处于同一调用链上，Start会在当前帧稍晚一些的时候被调用。Update则是根据Add调用时机决定何时调用：如果Add是在当前帧的Update前调用，那么新脚本的Update也会在当前帧被调用，否则会被延迟到下一帧调用。<br><a href="https://blog.csdn.net/qq_32821435/article/details/94760815" target="_blank" rel="external">https://blog.csdn.net/qq_32821435/article/details/94760815</a></p>
</blockquote>
<h2 id="物理更新一般放在哪个系统函数里"><a href="#物理更新一般放在哪个系统函数里" class="headerlink" title="物理更新一般放在哪个系统函数里"></a>物理更新一般放在哪个系统函数里</h2><blockquote>
<p>FixedUpdate。update跟当前平台的帧数有关，而FixedUpdate是真实时间</p>
</blockquote>
<h2 id="Update和FixedUpdate的区别？"><a href="#Update和FixedUpdate的区别？" class="headerlink" title="Update和FixedUpdate的区别？"></a>Update和FixedUpdate的区别？</h2><blockquote>
<p>Update是在每次渲染新的一帧的时候会调用，FixedUpdate，是在固定的时间间隔执行，不受游戏帧率的影响。FixedUpdate的时间间隔可以在项目设置中更改，Edit-&gt;ProjectSetting-&gt;time  找到Fixedtimestep。</p>
</blockquote>
<h2 id="移动相机动作在哪个函数里，为什么在这个函数里"><a href="#移动相机动作在哪个函数里，为什么在这个函数里" class="headerlink" title="移动相机动作在哪个函数里，为什么在这个函数里"></a>移动相机动作在哪个函数里，为什么在这个函数里</h2><blockquote>
<p>LateUpdate，是在所有的update结束后才调用，比较适合用于命令脚本的执行。官网上例子是摄像机的跟随，都是所有的update操作完才进行摄像机的跟进，不然就有可能出现摄像机已经推进了，但是视角里还未有角色的空帧出现。</p>
</blockquote>
<h2 id="关于-MonoBehaviour-LateUpdate-函数描述错误的是：（B）"><a href="#关于-MonoBehaviour-LateUpdate-函数描述错误的是：（B）" class="headerlink" title="关于 MonoBehaviour.LateUpdate 函数描述错误的是：（B）"></a>关于 MonoBehaviour.LateUpdate 函数描述错误的是：（B）</h2><blockquote>
<p>A.当 MonoBehaviour 类被启用后，每帧调用一次<br>B.常被用于处理 Rigidbody 的更新<br>C.在所有 Update 函数执行后才能被调用<br>D.常被用于实现跟随相机效果，且目标物体的位置已经在 Update 函数中被更新</p>
<p>应该放在FixedUpdate</p>
</blockquote>
<h2 id="如何让已经存在的GameObject在LoadLevel后不被卸载掉"><a href="#如何让已经存在的GameObject在LoadLevel后不被卸载掉" class="headerlink" title="如何让已经存在的GameObject在LoadLevel后不被卸载掉"></a>如何让已经存在的GameObject在LoadLevel后不被卸载掉</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void Awake()</div><div class="line">&#123;</div><div class="line">    DontDestroyOnLoad(transform.gameObject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="脚本及编辑器"><a href="#脚本及编辑器" class="headerlink" title="脚本及编辑器"></a>脚本及编辑器</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><blockquote>
<p>unityEngne</p>
</blockquote>
<h2 id="9-在哪个面板中可以修改物体的空间属性，如位置，朝向，大小等（B）"><a href="#9-在哪个面板中可以修改物体的空间属性，如位置，朝向，大小等（B）" class="headerlink" title="9.在哪个面板中可以修改物体的空间属性，如位置，朝向，大小等（B）"></a>9.在哪个面板中可以修改物体的空间属性，如位置，朝向，大小等（B）</h2><blockquote>
<p>A.Project B.Inspector C.Hierarchy D.Toolbar</p>
</blockquote>
<h2 id="如何为一个Asset-资源设定一个Label，从而能够方便准确的搜索到？（D）"><a href="#如何为一个Asset-资源设定一个Label，从而能够方便准确的搜索到？（D）" class="headerlink" title="如何为一个Asset 资源设定一个Label，从而能够方便准确的搜索到？（D）"></a>如何为一个Asset 资源设定一个Label，从而能够方便准确的搜索到？（D）</h2><blockquote>
<p>A.在Project窗口中选中一个Asset，右键-&gt;Create-&gt;Label<br>B.在Project窗口中选中一个Asset，右键-&gt;Add Label<br>C.在Project窗口中选中一个Asset，在Inspector窗口中点击添加Label的图标<br>D.在Project窗口中选中一个Asset，在Inspector窗口中点击按钮“Add Label”</p>
</blockquote>
<h2 id="5-Application-loadLevel命令为（A）"><a href="#5-Application-loadLevel命令为（A）" class="headerlink" title="5.Application.loadLevel命令为（A）"></a>5.Application.loadLevel命令为（A）</h2><blockquote>
<p>A.加载关卡 B.异步加载关卡 C.加载动作 D.加载动画</p>
</blockquote>
<h2 id="将图片的TextureType选项分别选为“Texture”和“Sprite”有什么区别"><a href="#将图片的TextureType选项分别选为“Texture”和“Sprite”有什么区别" class="headerlink" title="将图片的TextureType选项分别选为“Texture”和“Sprite”有什么区别"></a>将图片的TextureType选项分别选为“Texture”和“Sprite”有什么区别</h2><blockquote>
<p>Sprite作为UI精灵使用，Texture作用模型贴图使用。Sprite需要2的整次幂，打包图片省资源</p>
</blockquote>
<h2 id="为什么dynamic-font在unicode环境下优于static-font（？"><a href="#为什么dynamic-font在unicode环境下优于static-font（？" class="headerlink" title="为什么dynamic font在unicode环境下优于static font（？"></a>为什么dynamic font在unicode环境下优于static font（？</h2><blockquote>
<p>Unicode是国际组织制定的可以容纳世界上所有文字和符号的字符编码方案。<br>使用动态字体时，Unity将不会预先生成一个与所有字体的字符纹理。当需要支持亚洲语言或者较大的字体的时候，若使用正常纹理，则字体的纹理将非常大。</p>
</blockquote>
<h2 id="OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义"><a href="#OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义" class="headerlink" title="OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义"></a>OnBecameVisible及OnBecameInvisible的发生时机，以及这一对回调函数的意义</h2><blockquote>
<p>当物体是否可见切换之时。可以用于只需要在物体可见时才进行的计算。</p>
</blockquote>
<h2 id="采用Input-mousePosition-来获取鼠标在屏幕上的位置，以下表达正确的是（C）"><a href="#采用Input-mousePosition-来获取鼠标在屏幕上的位置，以下表达正确的是（C）" class="headerlink" title="采用Input.mousePosition 来获取鼠标在屏幕上的位置，以下表达正确的是（C）"></a>采用Input.mousePosition 来获取鼠标在屏幕上的位置，以下表达正确的是（C）</h2><blockquote>
<p>A.左上角为原点（0，0），右下角为（Screen.Width, Screen.Height）<br>B.左下角为原点（0，0），右下角为（Screen.Height, Screen.Width）<br>C.左下角为原点（0，0），右上角为（Screen.Width, Screen.Height）<br>D.左上角为原点（0，0），右下角为（Screen.Height, Screen.Width）</p>
</blockquote>
<h2 id="物体自身旋转使用的函数？"><a href="#物体自身旋转使用的函数？" class="headerlink" title="物体自身旋转使用的函数？"></a>物体自身旋转使用的函数？</h2><blockquote>
<p>Transform.Rotate()</p>
</blockquote>
<h2 id="物体绕某点旋转使用函数叫什么？"><a href="#物体绕某点旋转使用函数叫什么？" class="headerlink" title="物体绕某点旋转使用函数叫什么？"></a>物体绕某点旋转使用函数叫什么？</h2><blockquote>
<p>transform.RotateAround()</p>
</blockquote>
<h2 id="以下选项中，将游戏对象绕Z轴逆时针旋转90度（C）"><a href="#以下选项中，将游戏对象绕Z轴逆时针旋转90度（C）" class="headerlink" title="以下选项中，将游戏对象绕Z轴逆时针旋转90度（C）"></a>以下选项中，将游戏对象绕Z轴逆时针旋转90度（C）</h2><blockquote>
<p>A.transform.rotation = Quaternion.Euler(0,0,90)<br>B.transform.rotation = Quaternion.Angle(0,0,90)<br>C.transform.Rotate(new Vector3(0,0,90))<br>D.transform.Rotate(new Vector3(90,0,0))</p>
</blockquote>
<h2 id="游戏对象B是游戏对象A的子物体，游戏对象A经过了旋转，请写出游戏B围绕自身的Y轴进行旋转的脚本语句，以及游戏对象B围绕世界坐标的Y轴旋转的脚本语句"><a href="#游戏对象B是游戏对象A的子物体，游戏对象A经过了旋转，请写出游戏B围绕自身的Y轴进行旋转的脚本语句，以及游戏对象B围绕世界坐标的Y轴旋转的脚本语句" class="headerlink" title="游戏对象B是游戏对象A的子物体，游戏对象A经过了旋转，请写出游戏B围绕自身的Y轴进行旋转的脚本语句，以及游戏对象B围绕世界坐标的Y轴旋转的脚本语句"></a>游戏对象B是游戏对象A的子物体，游戏对象A经过了旋转，请写出游戏B围绕自身的Y轴进行旋转的脚本语句，以及游戏对象B围绕世界坐标的Y轴旋转的脚本语句</h2><blockquote>
<p>绕世界坐标旋转：transform.Rotate (transform.up<em>speed</em>Time.deltatime);<br>绕自身Y轴旋转：transform.Rotate (Vector.up<em>speed</em>Time.deltatime);</p>
</blockquote>
<h2 id="U3D中用于记录节点空间几何信息的组件名称，及其父类名称"><a href="#U3D中用于记录节点空间几何信息的组件名称，及其父类名称" class="headerlink" title="U3D中用于记录节点空间几何信息的组件名称，及其父类名称"></a>U3D中用于记录节点空间几何信息的组件名称，及其父类名称</h2><blockquote>
<p>Transform 父类是 Component</p>
</blockquote>
<h2 id="关于Vector3-的API，以下说法正确的是（BC）"><a href="#关于Vector3-的API，以下说法正确的是（BC）" class="headerlink" title="关于Vector3 的API，以下说法正确的是（BC）"></a>关于Vector3 的API，以下说法正确的是（BC）</h2><blockquote>
<p>A.Vector3.normalize 可以获取一个三维向量的法线向量<br>B.Vector3.magnitude 可以获取一个三维向量的长度<br>C.Vector3.forward 与 Vector3(0,0,1)是一样的意思<br>D.Vector3.Dot(向量A,向量B)是用来计算向量A与向量B的叉乘</p>
</blockquote>
<h2 id="以下哪个函数在游戏进入新场景后会被马上调用（B）"><a href="#以下哪个函数在游戏进入新场景后会被马上调用（B）" class="headerlink" title="以下哪个函数在游戏进入新场景后会被马上调用（B）"></a>以下哪个函数在游戏进入新场景后会被马上调用（B）</h2><blockquote>
<p>A.MonoBehaviour.OnSceneWastLoaded()<br>B.MonoBehaviour.OnSceneEnter()<br>C.MonoBehaviour.OnLevelEnter()<br>D.MonoBehaviour.OnLevelWastLoaded()</p>
</blockquote>
<h2 id="14-在Unity引擎中，Collider所指的是什么（D）"><a href="#14-在Unity引擎中，Collider所指的是什么（D）" class="headerlink" title="14.在Unity引擎中，Collider所指的是什么（D）"></a>14.在Unity引擎中，Collider所指的是什么（D）</h2><blockquote>
<p>A.collider 是Unity引擎中所支持的一种资源，可用作存储网格信息<br>B.Collider 是Unity引擎中内置的一种组件，可用对网格进行渲染<br>C.Collider 是Unity引擎中所支持的一种资源，可用作游戏对象的坐标转换<br>D.Collider 是Unity引擎中内置的一种组件，可用作游戏对象之间的碰撞检测</p>
</blockquote>
<h2 id="下列选项中，关于Transform组件的Scale参数描述正确的是（A）"><a href="#下列选项中，关于Transform组件的Scale参数描述正确的是（A）" class="headerlink" title="下列选项中，关于Transform组件的Scale参数描述正确的是（A）"></a>下列选项中，关于Transform组件的Scale参数描述正确的是（A）</h2><blockquote>
<p>A.Transform组件的Scale参数不会影响ParticleSystem产生粒子的大小<br>B.Transform组件的Scale参数不会影响GUITexture的大小<br>C.添加Collider组件后的GameoObject，其 Collider 组件的尺寸不受Transform组件的Scale参数影响<br>D.添加Rigidbody组件后的物体，大小将不再受Transform组件中 Scale 参数的影响</p>
</blockquote>
<h2 id="如何销毁一个UnityEngine-Object及其子类"><a href="#如何销毁一个UnityEngine-Object及其子类" class="headerlink" title="如何销毁一个UnityEngine.Object及其子类"></a>如何销毁一个UnityEngine.Object及其子类</h2><blockquote>
<p>Destroy()方法</p>
</blockquote>
<h2 id="DestroyImmediate和Destroy的区别"><a href="#DestroyImmediate和Destroy的区别" class="headerlink" title="DestroyImmediate和Destroy的区别"></a>DestroyImmediate和Destroy的区别</h2><blockquote>
<p>DestroyImmeditate 销毁对象的时候，会立即释放资源。Destroy只是从该场景销毁，但是还在内存当中。</p>
</blockquote>
<h2 id="在编辑场景时将GameObject设置为Static有何作用"><a href="#在编辑场景时将GameObject设置为Static有何作用" class="headerlink" title="在编辑场景时将GameObject设置为Static有何作用"></a>在编辑场景时将GameObject设置为Static有何作用</h2><blockquote>
<p>设置游戏对象为Static时，这些部分被静态物体挡住而不可见时，将会剔除（或禁用）网格对象。因此，在你的场景中的所有不会动的物体都应该标记为Static。</p>
</blockquote>
<h2 id="如何通过脚本来删除其自身对应的Gameobject（A）"><a href="#如何通过脚本来删除其自身对应的Gameobject（A）" class="headerlink" title="如何通过脚本来删除其自身对应的Gameobject（A）"></a>如何通过脚本来删除其自身对应的Gameobject（A）</h2><blockquote>
<p>A.Destroy(gameObject) B.this.Destroy()<br>C.Destroy(this) D.其他三项都可以</p>
</blockquote>
<h2 id="某个GameObject有一个名为MyScript的脚本，该脚本中有一个名为DoSomething-的函数，则如何在该Gameobject的另外一个脚本中调用该函数？（A）"><a href="#某个GameObject有一个名为MyScript的脚本，该脚本中有一个名为DoSomething-的函数，则如何在该Gameobject的另外一个脚本中调用该函数？（A）" class="headerlink" title="某个GameObject有一个名为MyScript的脚本，该脚本中有一个名为DoSomething 的函数，则如何在该Gameobject的另外一个脚本中调用该函数？（A）"></a>某个GameObject有一个名为MyScript的脚本，该脚本中有一个名为DoSomething 的函数，则如何在该Gameobject的另外一个脚本中调用该函数？（A）</h2><blockquote>
<p>A.GetComponent().DoSomething()<br>B.GetComponent<br>C.GetComponent().Call(“DoSomething”)<br>D.GetComponent</p>
</blockquote>
<h2 id="CompareTag比直接用gameObject-tag要好"><a href="#CompareTag比直接用gameObject-tag要好" class="headerlink" title="CompareTag比直接用gameObject.tag要好"></a>CompareTag比直接用gameObject.tag要好</h2><h2 id="简述一下对象池"><a href="#简述一下对象池" class="headerlink" title="简述一下对象池"></a>简述一下对象池</h2><blockquote>
<p>对象池就存放需要被反复调用资源的一个空间，当一个对象回大量生成的时候如果每次都销毁创建会很费时间，通过对象池把暂时不用的对象放到一个池中（也就是一个集合），当下次要重新生成这个对象的时候先去池中查找一下是否有可用的对象，如果有的话就直接拿出来使用，不需要再创建，如果池中没有可用的对象，才需要重新创建，利用空间换时间来达到游戏的高速运行效果，在FPS游戏中要常被大量复制的对象包括子弹，敌人，粒子等</p>
</blockquote>
<h2 id="对象池使用什么数据结构构建"><a href="#对象池使用什么数据结构构建" class="headerlink" title="对象池使用什么数据结构构建"></a>对象池使用什么数据结构构建</h2><h2 id="频繁创建GameObject会降低程序性能为什么？怎么解决？"><a href="#频繁创建GameObject会降低程序性能为什么？怎么解决？" class="headerlink" title="频繁创建GameObject会降低程序性能为什么？怎么解决？"></a>频繁创建GameObject会降低程序性能为什么？怎么解决？</h2><blockquote>
<p>频繁创建游戏对象，会增加游戏的Drawcall数，降低帧率，GPU会一直在渲染绘制。可以通过对象池来管理对象：当需要创建一个游戏对象时，先去对象池中查找一下对象池中是否存在没有被正在使用的对象，如果有的话直接使用这个对象，并把它标记为正在使用，没有话就创建一个，并把它添加到池中，然后标记为使用中。一个游戏对象使用完毕的时候，不要销毁掉，把它放在池中，标记为未使用。</p>
</blockquote>
<h2 id="如何在Unity中创建地形系统？-D"><a href="#如何在Unity中创建地形系统？-D" class="headerlink" title="如何在Unity中创建地形系统？(D)"></a>如何在Unity中创建地形系统？(D)</h2><blockquote>
<p>A.Terrain-&gt;Create Terrain B.Component-&gt;Create Terrain<br>C.Asset-&gt;Create Terrain D.Windows-&gt;Create Terrain</p>
</blockquote>
<h1 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h1><h2 id="当删除Unity工程Assets目录下地meta文件时会导致什么？为什么？"><a href="#当删除Unity工程Assets目录下地meta文件时会导致什么？为什么？" class="headerlink" title="当删除Unity工程Assets目录下地meta文件时会导致什么？为什么？"></a>当删除Unity工程Assets目录下地meta文件时会导致什么？为什么？</h2><blockquote>
<p>会导致在场景中游戏对象看不到，或者报错，材质找不到资源。多人协作的时候会导致资源的重复产生。因为每个资源文件都对应一个.meta文件，这个.meta文件中的guid就是唯一标识这个资源的。材质就是通过这个guid来记录自己使用了那些资源，而且同一个资源的guid会因为不同的电脑而不同，所以当你上传了丢失了.meta文件的资源的时候，到了别人的机器上就会重新产生guid，那个这个资源就相当于垃圾了。</p>
</blockquote>
<h2 id="meta文件的作用"><a href="#meta文件的作用" class="headerlink" title="meta文件的作用"></a>meta文件的作用</h2><h2 id="prefab的作用"><a href="#prefab的作用" class="headerlink" title="prefab的作用"></a>prefab的作用</h2><blockquote>
<ol>
<li>在游戏运行时实例化。Prefab相当于一个模板，对已有的素材、脚本和参数做一个基础的配置，便于以后的修改</li>
<li>Prefab打包的内容简化了导出操作，便于团队协同</li>
</ol>
</blockquote>
<h2 id="下列叙述中有关-Prefab-说法错误的是哪一项（B）"><a href="#下列叙述中有关-Prefab-说法错误的是哪一项（B）" class="headerlink" title="下列叙述中有关 Prefab 说法错误的是哪一项（B）"></a>下列叙述中有关 Prefab 说法错误的是哪一项（B）</h2><blockquote>
<p>A.Prefab 是一种资源类型 B.Prefab 是一种可以反复使用的游戏对象<br>C.Prefab 可以多次在场景进行实例 D.当一个 Prefab 添加到场景中时，也就是创建了它的一个实例</p>
</blockquote>
<h2 id="资源加载方式"><a href="#资源加载方式" class="headerlink" title="资源加载方式"></a>资源加载方式</h2><blockquote>
<p>1.Resources<br>2.AssetBundle<br>3.AssetDatabase</p>
</blockquote>
<h2 id="资源数据库-AssetDatabase"><a href="#资源数据库-AssetDatabase" class="headerlink" title="资源数据库 (AssetDatabase)"></a>资源数据库 (AssetDatabase)</h2><blockquote>
<p>资源数据库 (AssetDatabase) 是允许您访问工程中的资源的 API。此外，其提供方法供您查找和加载资源，还可创建、删除和修改资源。Unity 编辑器 (Editor) 在内部使用资源数据库 (AssetDatabase) 追踪资源文件，并维护资源和引用资源的对象之间的关联。Unity 需要追踪工程文件夹发生的所有变化，如需访问或修改资源数据，您应始终使用资源数据库 (AssetDatabase) API，而非文件系统。 资源数据库 (AssetDatabase) 接口仅适用于编辑器，不可用于内置播放器。和所有其他编辑器类一样，其只适用于置于编辑器 (Editor) 文件夹中的脚本（只在主要的资源 (Assets) 文件夹中创建名为“编辑器”的文件夹（不存在该文件夹的情况下））。</p>
</blockquote>
<h2 id="什么是AssetBundle-谈谈对AssetBundle内存分配情况的理解"><a href="#什么是AssetBundle-谈谈对AssetBundle内存分配情况的理解" class="headerlink" title="什么是AssetBundle?谈谈对AssetBundle内存分配情况的理解"></a>什么是AssetBundle?谈谈对AssetBundle内存分配情况的理解</h2><blockquote>
<p>可以把多个游戏对象或资源二进制文件封装到AssetBundle中，提供封装与解包的方法使用很方便。</p>
<p>加载资源三个步骤：</p>
<ol>
<li>www/LoadFromFile/LoadFromMemory等接口加载AssetBundle本身</li>
<li>AssetBundle.LoadAsset()等接口从AssetBundle中加载资源</li>
<li>对于GameObject类资源，需要通过GameObject.Instantiate()创建Clone</li>
</ol>
<p>黑色区域：www类本身占用内存，还保留了一份对WebStream数据的引用。使用www = null或www.dispose()释放。前者等待GC，后者立即释放。释放后WebStream引用计数会减一。</p>
<p>橙色区域：WebStream数据，数据真正的存储区域。AssetBundle被加载进来后，这部分内存就被分配了。包含三个内容：1、压缩后的AssetBundle本身。2、解压后的资源。3、一个解压缓冲区。www或AssetBundle对象都只是有一个结构指向了WebStream数据，从而对外部提供操作真正资源数据的方法。当WebStream数据引用为0时，系统会自动释放。为了不频繁的开辟和销毁解压Buffer，绿色Decompression解压缓冲区Unity会至少保留一份。</p>
<p>粉色区域：AssetBundle对象，引用WebStream数据部分，提供从WebStream数据中加载资源的接口。AssetBundle.Unload(bool unloadAllLoadedObjects)释放资源。AssetBundle.Unload(false)释放AssetBundle对象本身，可能引起WebStream释放，导致无法通过接口或依赖关系从该AssetBundle加载资源，但已加载资源可以正常使用。AssetBundle(true)不仅释放WebStream部分，所有被加载出来的资源将被释放。</p>
<p>红色部分：通过Instantiate()创建的GameObject所包含的资源。这些资源根据类型与AssetBundle原始资源(WebStream资源部分)有不同关系。如Texture、shader资源，通常只是使用，不会做出改动，所以仅仅是引用关系；每个GameObject是特殊的，所以是完全复制一份；Mesh和Material，则是引用+复制的关系。</p>
</blockquote>
<h2 id="动态加载资源的方式-区别"><a href="#动态加载资源的方式-区别" class="headerlink" title="动态加载资源的方式 区别"></a>动态加载资源的方式 区别</h2><blockquote>
<p>1.Resources.Load();<br>2.AssetBundle</p>
<p>1.通过Resources模块，调用它的load函数：可以直接load并返回某个类型的Object，前提是要把这个资源放在Resource命名的文件夹下，Unity不关有没有场景引用，都会将其全部打入到安装包中。<br>2.通过bundle的形式：即将资源打成 asset bundle 放在服务器或本地磁盘，然后使用WWW模块get 下来，然后从这个bundle中load某个object。</p>
</blockquote>
<h2 id="以下关于WWW-LoadFromCacheOrDownload描述正确的是（C）"><a href="#以下关于WWW-LoadFromCacheOrDownload描述正确的是（C）" class="headerlink" title="以下关于WWW.LoadFromCacheOrDownload描述正确的是（C）"></a>以下关于WWW.LoadFromCacheOrDownload描述正确的是（C）</h2><blockquote>
<p>A.可被用于将 Text Assets 自动缓存到本地磁盘<br>B.可被用于将 Resource 自动缓存到本地磁盘<br>C.可被用于将 Asset Bundles 自动缓存到本地磁盘<br>D.可被用于将任意格式的Unity资源文件自动缓存到本地磁盘</p>
</blockquote>
<h2 id="如何安全地在不同工程间安全地迁移asset数据（？"><a href="#如何安全地在不同工程间安全地迁移asset数据（？" class="headerlink" title="如何安全地在不同工程间安全地迁移asset数据（？"></a>如何安全地在不同工程间安全地迁移asset数据（？</h2><blockquote>
<ol>
<li>将Assets目录和Library目录一起迁移</li>
<li>导出包，export Package</li>
<li>用unity自带的assets Server功能 或者meta功能</li>
</ol>
</blockquote>
<h2 id="AssetBundle包加载流程"><a href="#AssetBundle包加载流程" class="headerlink" title="AssetBundle包加载流程"></a>AssetBundle包加载流程</h2><h2 id="图集打包怎么分类"><a href="#图集打包怎么分类" class="headerlink" title="图集打包怎么分类"></a>图集打包怎么分类</h2><blockquote>
<p>1.按业务功能的预制，寻找依赖，收集所有预制引用的图片，<br>2.如果有多个预制使用了同一张图片，我们就把它扔到common文件夹<br>3.让图集尽量紧凑，没有太多空白，尽量让图集处于2的n次方大小</p>
</blockquote>
<h2 id="为什么Unity3d中会发生在组件上出现数据丢失的情况"><a href="#为什么Unity3d中会发生在组件上出现数据丢失的情况" class="headerlink" title="为什么Unity3d中会发生在组件上出现数据丢失的情况(?"></a>为什么Unity3d中会发生在组件上出现数据丢失的情况(?</h2><blockquote>
<p>组件上绑定的物体对象被删除了</p>
</blockquote>
<h1 id="UI与Camera"><a href="#UI与Camera" class="headerlink" title="UI与Camera"></a>UI与Camera</h1><h2 id="UGUI的Canvas的作用"><a href="#UGUI的Canvas的作用" class="headerlink" title="UGUI的Canvas的作用"></a>UGUI的Canvas的作用</h2><blockquote>
<p>Canvas画布是承载所有UI元素的区域。所有的UI元素都必须是Canvas的子对象。如果场景中没有画布，那么我们创建任何一个UI元素，都会自动创建画布，并且将新元素置于其下。</p>
<p>创建Canvas：GameObject-&gt;UI-&gt;Canvas</p>
</blockquote>
<h2 id="如何实现UI界面的层级"><a href="#如何实现UI界面的层级" class="headerlink" title="如何实现UI界面的层级"></a>如何实现UI界面的层级</h2><h2 id="Unity3d实现2d游戏，有几种方式"><a href="#Unity3d实现2d游戏，有几种方式" class="headerlink" title="Unity3d实现2d游戏，有几种方式"></a>Unity3d实现2d游戏，有几种方式</h2><blockquote>
<ol>
<li>使用自身的GUI</li>
<li>把摄像机的Projection（投影）值调整为Orthographic（正交投影），不考虑z轴</li>
<li>使用2d的ui插件：2DToolKit、NGUI等</li>
</ol>
</blockquote>
<h2 id="为何大家都在移动设备上寻求U3D原生GUI的替代方案"><a href="#为何大家都在移动设备上寻求U3D原生GUI的替代方案" class="headerlink" title="为何大家都在移动设备上寻求U3D原生GUI的替代方案"></a>为何大家都在移动设备上寻求U3D原生GUI的替代方案</h2><blockquote>
<p>不美观，OnGUI很耗费时间，效率不高，使用不方便</p>
</blockquote>
<h2 id="如何在不同分辨率下保持UI的一致性"><a href="#如何在不同分辨率下保持UI的一致性" class="headerlink" title="如何在不同分辨率下保持UI的一致性(?"></a>如何在不同分辨率下保持UI的一致性(?</h2><blockquote>
<p>NGUI很好的解决了这一点，屏幕分辨率的自适应性，原理就是计算出屏幕的宽高比跟原来的预设的屏幕分辨率求出一个对比值，然后修改摄像机的size。UGUI通过锚点和中心点和分辨率也解决这个问题</p>
</blockquote>
<h2 id="ngui和ugui的区别"><a href="#ngui和ugui的区别" class="headerlink" title="ngui和ugui的区别"></a>ngui和ugui的区别</h2><h2 id="简述NGUI中Grid和Table的作用"><a href="#简述NGUI中Grid和Table的作用" class="headerlink" title="简述NGUI中Grid和Table的作用"></a>简述NGUI中Grid和Table的作用</h2><blockquote>
<p>对Grid和Table下的子物体进行排序和定位</p>
</blockquote>
<h2 id="请简述NGUI中Panel和Anchor的作用"><a href="#请简述NGUI中Panel和Anchor的作用" class="headerlink" title="请简述NGUI中Panel和Anchor的作用"></a>请简述NGUI中Panel和Anchor的作用</h2><blockquote>
<ol>
<li>只要提供一个half-pixel偏移量，它可以让一个控件的位置在Windows系统上精确的显示出来（只有这个Anchor的子控件会受到影响）</li>
<li>如果挂载到一个对象上，那么他可以将这个对象依附到屏幕的角落或者边缘<br>3.UIPanel用来收集和管理它下面所有widget的组件。通过widget的geometry创建实际的draw call。没有panel所有东西都不能够被渲染出来,你可以把UIPanel当做Renderer</li>
</ol>
</blockquote>
<h2 id="UGUI中Image和RawImage的区别"><a href="#UGUI中Image和RawImage的区别" class="headerlink" title="UGUI中Image和RawImage的区别"></a>UGUI中Image和RawImage的区别</h2><blockquote>
<p>Imgae比RawImage更消耗性能<br>Image只能使用Sprite属性的图片，但是RawImage什么样的都可以使用<br>Image适合放一些有操作的图片，裁剪平铺旋转什么的，针对Image Type属性<br>RawImage就放单独展示的图片就可以，性能会比Image好很多</p>
</blockquote>
<h2 id="在场景中放置多个Camera并同时处于活动状态会发生什么-？"><a href="#在场景中放置多个Camera并同时处于活动状态会发生什么-？" class="headerlink" title="在场景中放置多个Camera并同时处于活动状态会发生什么(？"></a>在场景中放置多个Camera并同时处于活动状态会发生什么(？</h2><blockquote>
<p>游戏界面可以看到很多摄像机的混合。可以用depth（深度），Layer（层）+ Culling Mask,enable = false/true来控制</p>
</blockquote>
<h2 id="照相机的Clipping-Planes的作用是什么？调整Near、Fare两个值时，应该注意什么"><a href="#照相机的Clipping-Planes的作用是什么？调整Near、Fare两个值时，应该注意什么" class="headerlink" title="照相机的Clipping Planes的作用是什么？调整Near、Fare两个值时，应该注意什么"></a>照相机的Clipping Planes的作用是什么？调整Near、Fare两个值时，应该注意什么</h2><blockquote>
<p>剪裁平面 。从相机到开始渲染和停止渲染之间的距离。</p>
</blockquote>
<h2 id="将Camera组件的ClearFlags选项选成Depth-only是什么意思？有何用处"><a href="#将Camera组件的ClearFlags选项选成Depth-only是什么意思？有何用处" class="headerlink" title="将Camera组件的ClearFlags选项选成Depth only是什么意思？有何用处"></a>将Camera组件的ClearFlags选项选成Depth only是什么意思？有何用处</h2><blockquote>
<p>如果把摄像机的ClearFlags勾选为Deapth Only,那么摄像机就会只渲染看得见的对象，把背景会完全透明，这种情况一般用在两个摄像机以上的场景中</p>
</blockquote>
<h2 id="在-Unity-中的场景中创建-Camera-时，默认情况下除了带有Transform、Camera、GUILayer、Flare-Layer-组件之外，还带有以下哪种组件（C）"><a href="#在-Unity-中的场景中创建-Camera-时，默认情况下除了带有Transform、Camera、GUILayer、Flare-Layer-组件之外，还带有以下哪种组件（C）" class="headerlink" title="在 Unity 中的场景中创建 Camera 时，默认情况下除了带有Transform、Camera、GUILayer、Flare Layer 组件之外，还带有以下哪种组件（C）"></a>在 Unity 中的场景中创建 Camera 时，默认情况下除了带有Transform、Camera、GUILayer、Flare Layer 组件之外，还带有以下哪种组件（C）</h2><blockquote>
<p>A.Mouse Look B.FPS Input Controller C.Audio Listener D.Character Motor</p>
</blockquote>
<h2 id="以下哪组摄像机中-Normalized-View-Port-Rect-的数值设置可以使摄像机显示的画面位于1280-720分辨率的屏幕画面右上角（D）"><a href="#以下哪组摄像机中-Normalized-View-Port-Rect-的数值设置可以使摄像机显示的画面位于1280-720分辨率的屏幕画面右上角（D）" class="headerlink" title="以下哪组摄像机中 Normalized View Port Rect 的数值设置可以使摄像机显示的画面位于1280*720分辨率的屏幕画面右上角（D）"></a>以下哪组摄像机中 Normalized View Port Rect 的数值设置可以使摄像机显示的画面位于1280*720分辨率的屏幕画面右上角（D）</h2><blockquote>
<p>A.X=640,Y=360,W=640,H=360 B.X=640,Y=0,W=640,H=360<br>C.X=0,Y=0,W=0.5,H=0.5 D.X=0.5,Y=0.5,W=0.5,H=0.5</p>
</blockquote>
<h1 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h1><h2 id="如果将一个声音剪辑文件从Project-视图拖动到-Inspector-视图或者-Scene-视图中的游戏对象上，该游戏对象会自动添加以下哪种组件（C）"><a href="#如果将一个声音剪辑文件从Project-视图拖动到-Inspector-视图或者-Scene-视图中的游戏对象上，该游戏对象会自动添加以下哪种组件（C）" class="headerlink" title="如果将一个声音剪辑文件从Project 视图拖动到 Inspector 视图或者 Scene 视图中的游戏对象上，该游戏对象会自动添加以下哪种组件（C）"></a>如果将一个声音剪辑文件从Project 视图拖动到 Inspector 视图或者 Scene 视图中的游戏对象上，该游戏对象会自动添加以下哪种组件（C）</h2><blockquote>
<p>A.Audio Listener B.Audio Clip C.Audio Source D.Audio Reverb Zone</p>
</blockquote>
<h2 id="以下哪一个选项不属于Unity引擎所支持的视频格式文件（D）"><a href="#以下哪一个选项不属于Unity引擎所支持的视频格式文件（D）" class="headerlink" title="以下哪一个选项不属于Unity引擎所支持的视频格式文件（D）"></a>以下哪一个选项不属于Unity引擎所支持的视频格式文件（D）</h2><blockquote>
<p>A.后缀为mov的文件 B.后缀为mpg的文件<br>C.后缀为avi的文件 D.后缀为swf的文件</p>
</blockquote>
<h2 id="请描述游戏动画有哪几种"><a href="#请描述游戏动画有哪几种" class="headerlink" title="请描述游戏动画有哪几种"></a>请描述游戏动画有哪几种</h2><blockquote>
<p>主要有关节动画、骨骼动画、单一网格模型动画(关键帧动画)。<br>关节动画：把角色分成若干独立部分，一个部分对应一个网格模型，部分的动画连接成一个整体的动画，角色比较灵活，Quake2中使用这种动画；<br>骨骼动画，广泛应用的动画方式，集成了以上两个方式的优点，骨骼按角色特点组成一定的层次结构，有关节相连，可做相对运动，皮肤作为单一网格蒙在骨骼之外，决定角色的外观；<br>单一网格模型动画由一个完整的网格模型构成，在动画序列的关键帧里记录各个顶点的原位置及其改变量，然后插值运算实现动画效果，角色动画较真实。</p>
</blockquote>
<h2 id="下列选项中有关Animator的说法错误的是？（D）"><a href="#下列选项中有关Animator的说法错误的是？（D）" class="headerlink" title="下列选项中有关Animator的说法错误的是？（D）"></a>下列选项中有关Animator的说法错误的是？（D）</h2><blockquote>
<p>A.Animator是Unity引擎中内置的组件<br>B.任何一个具有动画状态机功能的GameObject都需要一个Anim组件<br>C.它主要用于角色行为的设置，包括StateMachine、混合树BlendTrees以及同通过脚本控制的事件<br>D.Animator同Animation组件的用法是相同的</p>
</blockquote>
<h2 id="Animator-CrossFade-命令作用是：（B）"><a href="#Animator-CrossFade-命令作用是：（B）" class="headerlink" title="Animator.CrossFade 命令作用是：（B）"></a>Animator.CrossFade 命令作用是：（B）</h2><blockquote>
<p>A.动画放大 B.动画转换 C.Update() D.OnMouseButton()</p>
</blockquote>
<h2 id="Animation和Animator的区别"><a href="#Animation和Animator的区别" class="headerlink" title="Animation和Animator的区别"></a>Animation和Animator的区别</h2><blockquote>
<p>Animation需要通过代码手动控制动画的播放和迁移。而Animator拥有有动画状态机，可以通过动画状态机来设置动画之间的状态，并且可以为单个动画设置脚本代码来控制事件。</p>
</blockquote>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Unity3d提供了一个用于保存和读取数据的类-PlayerPrefs-，请列出保存和读取整形数据的函数"><a href="#Unity3d提供了一个用于保存和读取数据的类-PlayerPrefs-，请列出保存和读取整形数据的函数" class="headerlink" title="Unity3d提供了一个用于保存和读取数据的类(PlayerPrefs)，请列出保存和读取整形数据的函数"></a>Unity3d提供了一个用于保存和读取数据的类(PlayerPrefs)，请列出保存和读取整形数据的函数</h2><blockquote>
<p>PlayerPrefs.SetInt(string, int) PlayerPrefs.GetInt(string)</p>
</blockquote>
<h2 id="Unity3D是否支持写成多线程程序？如果支持的话需要注意什么"><a href="#Unity3D是否支持写成多线程程序？如果支持的话需要注意什么" class="headerlink" title="Unity3D是否支持写成多线程程序？如果支持的话需要注意什么"></a>Unity3D是否支持写成多线程程序？如果支持的话需要注意什么</h2><blockquote>
<p>仅能从主线程中访问Unity3D的组件，对象和Unity3D系统调用<br>支持：如果同时你要处理很多事情或者与Unity的对象互动小可以用thread,否则使用coroutine。<br>注意：C#中有lock这个关键字,以确保只有一个线程可以在特定时间内访问特定的对象</p>
</blockquote>
<h2 id="Unity3D的协程和C-线程之间的区别是什么？"><a href="#Unity3D的协程和C-线程之间的区别是什么？" class="headerlink" title="Unity3D的协程和C#线程之间的区别是什么？"></a>Unity3D的协程和C#线程之间的区别是什么？</h2><blockquote>
<p>多线程程序同时运行多个线程 ，而在任一指定时刻只有一个协程在运行，并且这个正在运行的协同程序只在必要时才被挂起。除主线程之外的线程无法访问Unity3D的对象、组件、方法。<br>Unity3d没有多线程的概念，不过unity也给我们提供了StartCoroutine（协同程序）和LoadLevelAsync（异步加载关卡）后台加载场景的方法。 StartCoroutine为什么叫协同程序呢，所谓协同，就是当你在StartCoroutine的函数体里处理一段代码时，利用yield语句等待执行结果，这期间不影响主程序的继续执行，可以协同工作。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Unity基础&quot;&gt;&lt;a href=&quot;#Unity基础&quot; class=&quot;headerlink&quot; title=&quot;Unity基础&quot;&gt;&lt;/a&gt;Unity基础&lt;/h1&gt;&lt;h2 id=&quot;Unity和Android与iOS如何交互&quot;&gt;&lt;a href=&quot;#Unity和Androi
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（二） 线性代数与算法</title>
    <link href="http://www.z16388.top/2019/10/29/unity2/"/>
    <id>http://www.z16388.top/2019/10/29/unity2/</id>
    <published>2019-10-29T15:00:02.000Z</published>
    <updated>2020-10-30T08:40:50.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><h2 id="向量的点乘、叉乘以及归一化的意义"><a href="#向量的点乘、叉乘以及归一化的意义" class="headerlink" title="向量的点乘、叉乘以及归一化的意义"></a>向量的点乘、叉乘以及归一化的意义</h2><blockquote>
<p>1.点乘描述了两个向量的相似程度，结果越大两向量越相似，还可表示投影<br>2.叉乘得到的向量垂直于原来的两个向量<br>3.标准化向量：用在只关系方向，不关心大小的时候</p>
<p>叉乘：<br>几何意义：得到一个与这两个向量都垂直的向量，这个向量的模是以两个向量为边的平行四边形的面积<br>在同一平面内， 结果 &gt; 0 表示 B在A的逆时针方向， 结果 &lt;0 表示B在A的顺式针方向， 结果 = 0表示B与A同向<br>应用：计算两个向量方向的<br>点乘：<br>几何意义：可以用来表征或计算两个向量之间的夹角，以及在b向量在a向量方向上的投影<br>两个向量的点乘所得到的是两个向量的余弦值，也就是-1 到1之间，0表示垂直，-1表示相反，1表示相同方向。<br>应用：计算两个向量方向的夹角</p>
</blockquote>
<h2 id="矩阵相乘的意义及注意点"><a href="#矩阵相乘的意义及注意点" class="headerlink" title="矩阵相乘的意义及注意点"></a>矩阵相乘的意义及注意点</h2><blockquote>
<p>用于表示线性变换：旋转、缩放、投影、平移、仿射<br>注意矩阵的蠕变：误差的积累</p>
</blockquote>
<h2 id="简述四元数的作用，四元数对欧拉角的优点"><a href="#简述四元数的作用，四元数对欧拉角的优点" class="headerlink" title="简述四元数的作用，四元数对欧拉角的优点"></a>简述四元数的作用，四元数对欧拉角的优点</h2><blockquote>
<p>四元数用于表示旋转<br>相对欧拉角的优点：<br>1.能进行增量旋转<br>2.避免万向锁<br>3.给定方位的表达方式有两种，互为负（欧拉角有无数种表达方式）</p>
</blockquote>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线性代数&quot;&gt;&lt;a href=&quot;#线性代数&quot; class=&quot;headerlink&quot; title=&quot;线性代数&quot;&gt;&lt;/a&gt;线性代数&lt;/h1&gt;&lt;h2 id=&quot;向量的点乘、叉乘以及归一化的意义&quot;&gt;&lt;a href=&quot;#向量的点乘、叉乘以及归一化的意义&quot; class=&quot;head
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>U3D问题总结（一） 计算机基础与C#</title>
    <link href="http://www.z16388.top/2019/10/29/unity1/"/>
    <id>http://www.z16388.top/2019/10/29/unity1/</id>
    <published>2019-10-29T15:00:01.000Z</published>
    <updated>2020-10-30T08:34:32.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><h2 id="概述序列化"><a href="#概述序列化" class="headerlink" title="概述序列化"></a>概述序列化</h2><blockquote>
<p>定义：将对象的状态信息转换为可以存储或传输的形式的过程。与序列化相对的是反序列化，它将流转换为对象。</p>
<p>目的：当我们需要把对象的状态信息通过网络进行传输，或者需要将对象的状态信息持久化，以便将来使用时都需要把对象进行序列化</p>
<p>对象序列化：1.把对象转换为字节序列的过程称为对象的序列化<br>2.把字节序列恢复为对象的过程称为对象的反序列化</p>
<p>比如，可以序列化一个对象，然后使用HTTP通过Internet在客户端和服务器端之间传输该对象</p>
</blockquote>
<h2 id="什么是协同程序-？"><a href="#什么是协同程序-？" class="headerlink" title="什么是协同程序(？"></a>什么是协同程序(？</h2><blockquote>
<p>A coroutine is a function that is executed partially and, presuming suitable conditions are met, will be resumed at some point in the future until its work is done.</p>
<p>协程是一个分部执行，遇到条件（yield return 语句）会挂起，直到条件满足才会被唤醒继续执行后面的代码。<br>Unity在每一帧（Frame）都会去处理对象上的协程。Unity主要是在Update后去处理协程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">using UnityEngine;  </div><div class="line">using System.Collections;  </div><div class="line">   </div><div class="line">public class CoroutineCountdown : MonoBehaviour  </div><div class="line">&#123;  </div><div class="line">    void Start()  </div><div class="line">    &#123;  </div><div class="line">        StartCoroutine(Countdown());  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    IEnumerator Countdown()  </div><div class="line">    &#123;  </div><div class="line">        for(floattimer = 3; timer &gt;= 0; timer -= Time.deltaTime)  </div><div class="line">            Yield return 0;  </div><div class="line">   </div><div class="line">        Debug.Log(&quot;This message appears after 3 seconds!&quot;);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>yield return的常见返回值及其作用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yield return new WaitForSeconds(3.0f); // 等待3秒，然后继续从此处开始，常用于做定时器</div><div class="line">yield return null; // 这一帧到此暂停，下一帧再从暂停处继续，常用于循环中</div><div class="line">yield return new WaitForEndOfFrame(); // 等到这一帧的cameras和GUI渲染结束后再从此处继续，即等到这帧的末尾再往下运行。这行之后的代码还是在当前帧运行，是在下一帧开始前执行，跟return null很相似</div><div class="line">yield return new WaitForFixedUpdate(); // 在下一次执行FixedUpdate的时候继续执行这段代码，即等一次物理引擎的更新</div><div class="line">yield return www; // 等待直至异步下载完成</div><div class="line">yield break; // 直接跳出协程，对某些判定失败必须跳出的时候，比如加载AssetBundle的时候，WWW失败了，后边加载bundle没有必要了，这时候可以yield break跳出。</div><div class="line">yield return StartCoroutine(methodName); // 等待另一个协程执行完。这是把协程串联起来的关键，常用于让多个协程按顺序逐个运行</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="协程的开启关闭"><a href="#协程的开启关闭" class="headerlink" title="协程的开启关闭"></a>协程的开启关闭</h2><blockquote>
<p>开启：</p>
<ol>
<li>StartCoroutine(string methodName)</li>
<li>StartCoroutine（IEnumerator method)</li>
</ol>
<p>终止：</p>
<ol>
<li>StopCoroutine (string methodName) // 只能终止指定的协程<br>在程序中调用StopCoroutine() 方法只能终止以字符串形式启动的协程</li>
<li>StopAllCoroutine()                // 终止所有协程</li>
</ol>
</blockquote>
<h2 id="协程的用途"><a href="#协程的用途" class="headerlink" title="协程的用途"></a>协程的用途</h2><blockquote>
<p>1.用来延时<br>2.用来异步加载等待<br>3.加载WWW<br>4.制代码在特定的时机执行。</p>
</blockquote>
<h2 id="协同程序的执行代码是什么？有何用处，有何缺点"><a href="#协同程序的执行代码是什么？有何用处，有何缺点" class="headerlink" title="协同程序的执行代码是什么？有何用处，有何缺点"></a>协同程序的执行代码是什么？有何用处，有何缺点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function Start() &#123; </div><div class="line">    // 协同程序WaitAndPrint在Start函数内执行,可以视同于它与Start函数同步执行.</div><div class="line">    StartCoroutine(WaitAndPrint(2.0)); </div><div class="line">    print (&quot;Before WaitAndPrint Finishes &quot; + Time.time );</div><div class="line">&#125;</div><div class="line"></div><div class="line">function WaitAndPrint (waitTime : float) &#123;</div><div class="line">    // 暂停执行waitTime秒</div><div class="line">    yield WaitForSeconds (waitTime);</div><div class="line">    print (&quot;WaitAndPrint &quot;+ Time.time );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>作用：一个协同程序在执行过程中,可以在任意位置使用yield语句。yield的返回值控制何时恢复协同程序向下执行。协同程序在对象自有帧执行过程中堪称优秀。协同程序在性能上没有更多的开销。<br>缺点：协同程序并非真线程，可能会发生堵塞。</p>
</blockquote>
<h2 id="协程的执行原理"><a href="#协程的执行原理" class="headerlink" title="协程的执行原理"></a>协程的执行原理</h2><blockquote>
<p>协程函数的返回值时IEnumerator,它是一个迭代器，可以把它当成执行一个序列的某个节点的指针，它提供了两个重要的接口，分别是Current(返回当前指向的元素)和MoveNext()(将指针向后移动一个单位，如果移动成功，则返回true)</p>
<p>yield关键词用来声明序列中的下一个值或者是一个无意义的值，如果使用yield return x(x是指一个具体的对象或者数值)的话，那么MoveNext返回为true并且Current被赋值为x,如果使用yield break使得MoveNext()返回为false</p>
<p>如果MoveNext函数返回为true意味着协程的执行条件被满足，则能够从当前的位置继续往下执行。否则不能从当前位置继续往下执行。</p>
</blockquote>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="客户端与服务器交互方式有几种"><a href="#客户端与服务器交互方式有几种" class="headerlink" title="客户端与服务器交互方式有几种"></a>客户端与服务器交互方式有几种</h2><blockquote>
<p>socket通常也称作”套接字”，实现服务器和客户端之间的物理连接，并进行数据传输。主要有UDP和TCP两个协议，处于网络协议的传输层。<br>http协议传输的主要有http协议和基于http协议的Soap协议（web service）（基于XML）。常见的方式是 http 的post 和get 请求、web service。</p>
</blockquote>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><blockquote>
<p>1、连接方面区别<br>TCP面向连接（如打电话要先拨号建立连接）。<br>UDP是无连接回的，即发送数据之答前不需要建立连接。</p>
<p>2、安全方面的区别<br>TCP提供可靠的服务，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达。<br>UDP尽最大努力交付，即不保证可靠交付。</p>
<p>3、传输效率的区别<br>TCP传输效率相对较低。<br>UDP传输效率高，适用于对高速传输和实时性有较高的通信或广播通信。</p>
<p>4、连接对象数量的区别<br>TCP连接只能是点到点、一对一的。<br>UDP支持一对一，一对多，多对一和多对多的交互通信。</p>
</blockquote>
<h2 id="Http和Https的区别"><a href="#Http和Https的区别" class="headerlink" title="Http和Https的区别"></a>Http和Https的区别</h2><blockquote>
<p>一、传输bai信息安全性不同<br>1.http协议：是超文本传输协议，信息是明文传输。如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息。<br>2.https协议：是具有安全性的ssl加密传输协议，为浏览器和服务器之间的通信加密，确保数据传输的安全。</p>
<p>二、连接方式不同<br>1.http协议：http的连接很简单，是无状态的。<br>2.https协议：是由SSL＋HTTP协议构建的可进行加密传输、身份认证的网络协议。</p>
<p>三、默认端口不同<br>1.http协议：默认端口是80<br>2.https协议：默认的端口是443</p>
<p>四、证书申请方式不同<br>1.http协议：免费申请。<br>2.https协议：需要到ca申请证书，一般免费证书很少，需要交费。</p>
</blockquote>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="面向对象的优点"><a href="#面向对象的优点" class="headerlink" title="面向对象的优点"></a>面向对象的优点</h2><blockquote>
<ol>
<li>易维护<br>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的。</li>
<li>质量高<br>在设计时，可重用现有的，在以前的项目的领域中已被测试过的类使系统满足业务需求并具有较高的质量。</li>
<li>效率高<br>在软件开发时，根据设计的需要对现实世界的事物进行抽象，产生类。使用这样的方法解决问题，接近于日常生活和自然的思考方式，势必提高软件开发的效率和质量。</li>
<li>易扩展<br>由于继承、封装、多态的特性，自然设计出高内聚、低耦合的系统结构，使得系统更灵活、更容易扩展，而且成本较低。</li>
</ol>
</blockquote>
<h2 id="什么是里氏代换原则"><a href="#什么是里氏代换原则" class="headerlink" title="什么是里氏代换原则"></a>什么是里氏代换原则</h2><blockquote>
<p>里氏替换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。任何基类可以出现的地方，子类一定可以出现。（就是子类对象可以赋值给基类对象，基类对象不能赋值给子类对象）</p>
</blockquote>
<h2 id="继承和组合的区别"><a href="#继承和组合的区别" class="headerlink" title="继承和组合的区别"></a>继承和组合的区别</h2><blockquote>
<p>继承：可以使用现有类的功能，并且在无需重复编写原有类的情况下对原有类进行功能上的扩展。(is-a关系)</p>
<p>组合：在新类里面创建原有类的对象，重复利用已有类的功能。(has-a关系)</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">组 合 关 系</th>
<th style="text-align:left">继 承 关 系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">优点：不破坏封装，整体类与局部类之间松耦合，彼此相对独立</td>
<td style="text-align:left">缺点：破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性</td>
</tr>
<tr>
<td style="text-align:left">优点：具有较好的可扩展性</td>
<td style="text-align:left">缺点：支持扩展，但是往往以增加系统结构的复杂度为代价</td>
</tr>
<tr>
<td style="text-align:left">优点：支持动态组合。在运行时，整体对象可以选择不同类型的局部对象</td>
<td style="text-align:left">缺点：不支持动态继承。在运行时，子类无法选择不同的父类</td>
</tr>
<tr>
<td style="text-align:left">优点：整体类可以对局部类进行包装，封装局部类的接口，提供新的接口</td>
<td style="text-align:left">缺点：子类不能改变父类的接口</td>
</tr>
<tr>
<td style="text-align:left">缺点：整体类不能自动获得和局部类同样的接口</td>
<td style="text-align:left">优点：子类能自动继承父类的接口</td>
</tr>
<tr>
<td style="text-align:left">缺点：创建整体类的对象时，需要创建所有局部类的对象</td>
<td style="text-align:left">优点：创建子类的对象时，无须创建父类的对象</td>
</tr>
</tbody>
</table>
<h2 id="虚方法virtual抽象方法abstract"><a href="#虚方法virtual抽象方法abstract" class="headerlink" title="虚方法virtual抽象方法abstract"></a>虚方法virtual抽象方法abstract</h2><ol>
<li>虚方法必须有实现部分，抽象方法没有提供实现部分。抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化</li>
<li>抽象方法只能在抽象类中声明，虚方法不是。如果类包含抽象方法，那么该类也是抽象的，也必须声明为抽象的</li>
<li>派生类必须重写抽象类中的抽象方法，虚方法则不必要</li>
<li>虚方法可以实现多态，而抽象方法不行</li>
</ol>
<h2 id="类和结构体的区别？使用环境？"><a href="#类和结构体的区别？使用环境？" class="headerlink" title="类和结构体的区别？使用环境？"></a>类和结构体的区别？使用环境？</h2><blockquote>
<p>结构体是值类型，类是引用类型。结构体存储在栈中，类存储在堆中，栈的空间小但是访问快，堆的空间大但是访问速度较慢。</p>
<p>结构体不能继承，不能创建默认构造函数和析构函数。结构成员不能指定为 abstract、virtual 或 protected。结构体的构造函数必须为所有值赋初值。</p>
<p>结构体一般存储较为轻量的数据，类一般存储具有较为复杂逻辑结构的数据。</p>
<p>使用环境：</p>
<ol>
<li>当堆栈的空间很有限，且有大量的逻辑对象时，创建类要比创建结构好一些；</li>
<li>对于点、矩形和颜色这样的轻量对象，假如要声明一个含有许多个颜色对象的数组，则CLR需要为每个对象分配内存，在这种情况下，使用结构的成本较低；</li>
<li>在表现抽象和多级别的对象层次时，类是最好的选择，因为结构不支持继承。</li>
</ol>
</blockquote>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="Heap与Stack有何区别-？"><a href="#Heap与Stack有何区别-？" class="headerlink" title="Heap与Stack有何区别(？"></a>Heap与Stack有何区别(？</h2><blockquote>
<p>1.heap是堆，stack是栈。<br>2.stack的空间由操作系统自动分配和释放，heap的空间是手动申请和释放的，heap常用new关键字来分配。<br>3.stack空间有限，heap的空间是很大的自由区。</p>
</blockquote>
<h2 id="栈和堆谁比较快？为什么？"><a href="#栈和堆谁比较快？为什么？" class="headerlink" title="栈和堆谁比较快？为什么？"></a>栈和堆谁比较快？为什么？</h2><blockquote>
<p>栈，原因：</p>
<ol>
<li>栈有专门的寄存器，堆是随机内存。</li>
<li>栈是在一级缓存上运行的，而堆是在二级缓存上运行的。</li>
<li>访问栈上的数据只需一次，而访问堆上的数据需要两次，先访问栈，再访问堆。</li>
</ol>
</blockquote>
<h2 id="c-c-程序运行时有堆内存与栈内存之分，请写一个语句在堆中分配一个整数：-int-a-new-int-4-在栈内存中分配一个整数：（int-a-5）。"><a href="#c-c-程序运行时有堆内存与栈内存之分，请写一个语句在堆中分配一个整数：-int-a-new-int-4-在栈内存中分配一个整数：（int-a-5）。" class="headerlink" title="c/c++程序运行时有堆内存与栈内存之分，请写一个语句在堆中分配一个整数：(int a = new int(4)),在栈内存中分配一个整数：（int a = 5）。"></a>c/c++程序运行时有堆内存与栈内存之分，请写一个语句在堆中分配一个整数：(int a = new int(4)),在栈内存中分配一个整数：（int a = 5）。</h2><h2 id="值类型和引用类型有何区别"><a href="#值类型和引用类型有何区别" class="headerlink" title="值类型和引用类型有何区别"></a>值类型和引用类型有何区别</h2><blockquote>
<p>1.值类型根据声明位置不同堆和栈中都有可能存储，引用类型存储在堆中<br>2.值类型存取速度快，引用类型存取速度慢。<br>3.值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针或引用<br>4.值类型继承自System.ValueType，引用类型继承自System.Object</p>
</blockquote>
<h2 id="结构体和类有何区别"><a href="#结构体和类有何区别" class="headerlink" title="结构体和类有何区别"></a>结构体和类有何区别</h2><blockquote>
<p>结构体是一种值类型，而类是引用类型。（值类型、引用类型是根据数据存储的角度来分的）就是值类型用于存储数据的值，引用类型用于存储对实际数据的引用。那么结构体就是当成值来使用的，类则通过引用来对实际数据操作</p>
</blockquote>
<h2 id="排序方式有哪些"><a href="#排序方式有哪些" class="headerlink" title="排序方式有哪些"></a>排序方式有哪些</h2><blockquote>
<p>选择排序，冒泡排序，快速排序，插入排序，希尔排序，归并排序</p>
</blockquote>
<h2 id="k层二叉树最多有-2-k-1-个结点。"><a href="#k层二叉树最多有-2-k-1-个结点。" class="headerlink" title="k层二叉树最多有 2^k - 1 个结点。"></a>k层二叉树最多有 2^k - 1 个结点。</h2><p>## </p>
<h2 id="请简述ArrayList和List的主要区别"><a href="#请简述ArrayList和List的主要区别" class="headerlink" title="请简述ArrayList和List的主要区别"></a>请简述ArrayList和List的主要区别</h2><blockquote>
<p>ArrayList存在不安全类型（ArrayList会把所有插入其中的数据都当做Object来处理）装箱拆箱的操作（费时）List是接口，ArrayList是一个实现了该接口的类，可以被实例化</p>
</blockquote>
<h2 id="数组和List两者效率之间哪个好"><a href="#数组和List两者效率之间哪个好" class="headerlink" title="数组和List两者效率之间哪个好"></a>数组和List两者效率之间哪个好</h2><blockquote>
<p>数组： 它在内存中是连续的存储的，所以索引速度很快，而且赋值与修改元素也很简单。可以利用偏移地址访问元素，时间复杂度为O(1);删除时间复杂度为O(n)，数组没有添加数据选项。</p>
<p>List：基于数组，时间复杂度相同，插入为O(n)；不过在数据少量的时候跟数组差不多，数据庞大的时候效率会低于数组。</p>
</blockquote>
<h2 id="哈希表与字典"><a href="#哈希表与字典" class="headerlink" title="哈希表与字典"></a>哈希表与字典</h2><blockquote>
<p>字典：内部用了Hashtable作为存储结构<br>如果我们试图找到一个不存在的键，它将返回 / 抛出异常。<br>它比哈希表更快，因为没有装箱和拆箱，尤其是值类型。<br>仅公共静态成员是线程安全的。<br>字典是一种通用类型，这意味着我们可以将其与任何数据类型一起使用（创建时，必须同时指定键和值的数据类型）。<br>Dictionay 是 Hashtable 的类型安全实现， Keys和Values是强类型的。<br>Dictionary遍历输出的顺序，就是加入的顺序</p>
<p>哈希表：<br>如果我们尝试查找不存在的键，则返回 null。<br>它比字典慢，因为它需要装箱和拆箱。<br>哈希表中的所有成员都是线程安全的，<br>哈希表不是通用类型，<br>Hashtable 是松散类型的数据结构，我们可以添加任何类型的键和值。<br>HashTable是经过优化的，访问下标的对象先散列过，所以内部是无序散列的</p>
</blockquote>
<h2 id="StringBuilder和String的区别"><a href="#StringBuilder和String的区别" class="headerlink" title="StringBuilder和String的区别"></a>StringBuilder和String的区别</h2><blockquote>
<p>String是字符串常量。<br>StringBuffer是字符串变量 ，线程安全。<br>StringBuilder是字符串变量，线程不安全。<br>String类型是个不可变的对象，当每次对String进行改变时都需要生成一个新的String对象，然后将指针指向一个新的对象，如果在一个循环里面，不断的改变一个对象，就要不断的生成新的对象，所以效率很低，建议在不断更改String对象的地方不要使用String类型。<br>StringBuilder对象在做字符串连接操作时是在原来的字符串上进行修改，改善了性能。这一点我们平时使用中也许都知道，连接操作频繁的时候，使用StringBuilder对象。</p>
<p>如果是处理字符串的话，用string中的方法每次都需要创建一个新的字符串对象并且分配新的内存地址，而stringBuilder是在原来的内存里对字符串进行修改，所以在字符串处理方面还是建议用stringBuilder这样比较节约内存。但是string 类的方法和功能仍然还是比stringBuilder类要强。</p>
</blockquote>
<h2 id="有一本牛津词典，现在输入一串字母组成一个单词，怎么样快速查询词典中是否有这个单词"><a href="#有一本牛津词典，现在输入一串字母组成一个单词，怎么样快速查询词典中是否有这个单词" class="headerlink" title="有一本牛津词典，现在输入一串字母组成一个单词，怎么样快速查询词典中是否有这个单词"></a>有一本牛津词典，现在输入一串字母组成一个单词，怎么样快速查询词典中是否有这个单词</h2><blockquote>
<p>使用树结构来存储词典的单词，以字母为顺序分别放在相应的子树中。然后根据输入将字母从左到右分级并根据树的结构依次查询。</p>
</blockquote>
<h2 id="在一段文本中，有许多”-”和”-”和”-”，判断这段文本中的括号是否使用正确？"><a href="#在一段文本中，有许多”-”和”-”和”-”，判断这段文本中的括号是否使用正确？" class="headerlink" title="在一段文本中，有许多”{}”和”[]”和”()”，判断这段文本中的括号是否使用正确？"></a>在一段文本中，有许多”{}”和”[]”和”()”，判断这段文本中的括号是否使用正确？</h2><blockquote>
<p>使用栈的结构进判断，将所有括号依次入栈，当一次入栈是右括号时判断之前的栈顶是否是对应的左括号，如果是说明合法，将之前的左括号和现在入栈的右括号都出栈。然后继续将新的括号依次入栈，当有一次入栈非法即可判定非法，或者知道最后全部判定合法则判定该文本合法。</p>
</blockquote>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="https://blog.csdn.net/weixin_43122090/article/details/105462226" target="_blank" rel="external">https://blog.csdn.net/weixin_43122090/article/details/105462226</a></p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="在类的构造函数前加上static会报什么错-为什么"><a href="#在类的构造函数前加上static会报什么错-为什么" class="headerlink" title="在类的构造函数前加上static会报什么错?为什么?"></a>在类的构造函数前加上static会报什么错?为什么?</h2><blockquote>
<p>构造函数格式为 public+类名，如果加上static会报错（静态构造函数不能有访问修饰符）<br>原因：静态构造函数不允许访问修饰符，也不接受任何参数；<br>无论创建多少类型的对象，静态构造函数只执行一次；<br>运行库创建类实例或者首次访问静态成员之前，运行库调用静态构造函数；<br>静态构造函数执行先于任何实例级别的构造函数；<br>显然也就无法使用this和base来调用构造函数。</p>
</blockquote>
<h2 id="以下选项中，正确的是（D）"><a href="#以下选项中，正确的是（D）" class="headerlink" title="以下选项中，正确的是（D）"></a>以下选项中，正确的是（D）</h2><blockquote>
<p>A.Mathf.Round方法作用是限制 B.Mathf.Clamp方法作用是插值<br>C.Mathf.Lerp方法作用是四舍五入 D.Mathf.Abs方法作用是取得绝对值</p>
</blockquote>
<h2 id="C-、-Net与Mono的关系？"><a href="#C-、-Net与Mono的关系？" class="headerlink" title="C#、.Net与Mono的关系？"></a>C#、.Net与Mono的关系？</h2><blockquote>
<p>mono是.net的一个开源跨平台工具，就类似java虚拟机，java本身不是跨平台语言，但运行在虚拟机上就能够实现了跨平台，由Xamarin提出，它是.NET框架的一个开源版本。<br>.net是微软的一个开发平台,只能在windows下运行，而mono可以实现跨平台跑，可以运行于linux，Unix，Mac OS等。<br>C#是微软的编程语言，开发包是.NET，就像Java之于JDK</p>
</blockquote>
<h2 id="C-和C-的区别-？"><a href="#C-和C-的区别-？" class="headerlink" title="C#和C++的区别(？"></a>C#和C++的区别(？</h2><blockquote>
<p>C# 与C++ 比较的话，最重要的特性就是C# 是一种完全面向对象的语言，而C++ 不是，另外C# 是基于IL 中间语言和.NET Framework CLR 的，在可移植性，可维护性和强壮性都比C++ 有很大的改进。C# 的设计目标是用来开发快速稳定可扩展的应用程序，当然也可以通过Interop 和Pinvoke 完成一些底层操作</p>
<p>C# 是一种完全面向对象的语言。另外C# 是基于IL 中间语言和.NET Framework CLR 的，在可移植性，可维护性和强壮性都比C++ 有很大的改进。</p>
</blockquote>
<h2 id="C-与C-结构体的区别"><a href="#C-与C-结构体的区别" class="headerlink" title="C#与C++结构体的区别"></a>C#与C++结构体的区别</h2><h2 id="实现计时器的方法"><a href="#实现计时器的方法" class="headerlink" title="## 实现计时器的方法"></a>## 实现计时器的方法</h2><blockquote>
<p>Time eltatine:协程</p>
</blockquote>
<h2 id="“”与null的区别"><a href="#“”与null的区别" class="headerlink" title="“”与null的区别"></a>“”与null的区别</h2><h2 id="ref参数和out参数是什么？有什么区别-？"><a href="#ref参数和out参数是什么？有什么区别-？" class="headerlink" title="ref参数和out参数是什么？有什么区别(？"></a>ref参数和out参数是什么？有什么区别(？</h2><blockquote>
<p>ref和out参数的效果一样，都是通过关键字找到定义在主函数里面的变量的内存地址，并通过方法体内的语法改变它的大小。不同点就是输出参数必须对参数进行初始化。ref必须初始化，out 参数必须在函数里赋值。ref参数是引用，out参数为输出参数。</p>
</blockquote>
<h2 id="C-的委托是什么？有何用处"><a href="#C-的委托是什么？有何用处" class="headerlink" title="C#的委托是什么？有何用处"></a>C#的委托是什么？有何用处</h2><blockquote>
<p>委托类似于一种安全的指针引用，在使用它时是当做类来看待而不是一个方法，相当于对一组方法的列表的引用。用处：使用委托使程序员可以将方法引用封装在委托对象内。然后可以将该委托对象传递给可调用所引用方法的代码，而不必在编译时知道将调用哪个方法。与C或C++中的函数指针不同，委托是面向对象，而且是类型安全的。</p>
</blockquote>
<h2 id="三种泛型委托"><a href="#三种泛型委托" class="headerlink" title="三种泛型委托"></a>三种泛型委托</h2><h2 id="委托delegate是什么，event关键字有什么用"><a href="#委托delegate是什么，event关键字有什么用" class="headerlink" title="委托delegate是什么，event关键字有什么用"></a>委托delegate是什么，event关键字有什么用</h2><blockquote>
<p>delegate 委托，是C#的一种类型，持有对某个方法的引用的类，能够拥有一个签名，引用只能与签名方法相匹配。实现：1、声明一个委托对象，与传递方法具有相同参数列表和返回值类型。2、创建委托对象，将要传递的函数作为参数传入。3、在实现异步调用地方，通过上一步创建对象调用方法。</p>
<p>event 事件，在类中声明且生成，通过使用同一个类或其他类的委托与事件处理程序关联。包含事件的类用于发布事件，称为发布器(publisher)类；接受该事件的类称为订阅器(subscriber)类。事件使用发布-订阅模型。两者的区别：1、委托允许直接访问相应处理函数，事件只能通过公布的回调函数去调用。2、事件只能通过“+=”、“-=”方式注册和取消处理函数，委托除此之外还可以“=”直接赋值处理函数。</p>
</blockquote>
<h2 id="概述c-中代理和事件"><a href="#概述c-中代理和事件" class="headerlink" title="概述c#中代理和事件"></a>概述c#中代理和事件</h2><blockquote>
<p>代理就是用来定义指向方法的引用。<br>C＃事件本质就是对消息的封装，用作对象之间的通信；发送方叫事件发送器，接收方叫事件接收器</p>
</blockquote>
<h2 id="sealed关键字用在类声明时与函数声明时的作用"><a href="#sealed关键字用在类声明时与函数声明时的作用" class="headerlink" title="sealed关键字用在类声明时与函数声明时的作用"></a>sealed关键字用在类声明时与函数声明时的作用</h2><blockquote>
<p>sealed修饰的类为密封类，类声明时可防止其他类继承此类，在方法中声明则可防止派生类重写此方法。</p>
</blockquote>
<h2 id="请简述private，public，protected，internal的区别"><a href="#请简述private，public，protected，internal的区别" class="headerlink" title="请简述private，public，protected，internal的区别"></a>请简述private，public，protected，internal的区别</h2><blockquote>
<p>public：对任何类和成员都公开，无限制访问<br>private：仅对该类公开<br>protected：对该类和其派生类公开<br>internal：只能在包含该类的程序集中访问该类</p>
</blockquote>
<h2 id="请描述接口Interface与抽象类之间的不同（？"><a href="#请描述接口Interface与抽象类之间的不同（？" class="headerlink" title="请描述接口Interface与抽象类之间的不同（？"></a>请描述接口Interface与抽象类之间的不同（？</h2><blockquote>
<p>抽象类和接口都不能实例化。</p>
<p>抽象类可以有抽象的的方法和未抽象的的方法，可以通过子类来重写。抽象类主要是子类的通用结构。</p>
<p>常量、字段、运算符、实例构造函数、析构函数或类型、不能包含静态成员。接口不能有实现的方法。接口主要是作为规范来使用。</p>
</blockquote>
<h2 id="static和const关键字的作用"><a href="#static和const关键字的作用" class="headerlink" title="static和const关键字的作用"></a>static和const关键字的作用</h2><blockquote>
<p>static 关键字至少有下列几个作用：<br>（1）函数体内static 变量的作用范围为该函数体，不同于auto 变量，该变量的内存只被分配一次，因此其值在下次调用时仍维持上次的值；<br>（2）在模块内的static 全局变量可以被模块内所用函数访问，但不能被模块外其它函数访问；<br>（3）在模块内的static 函数只可被这一模块内的其它函数调用，这个函数的使用范围被限制在声明它的模块内；<br>（4）在类中的static 成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；<br>（5）在类中的static 成员函数属于整个类所拥有，这个函数不接收this 指针，因而只能访问类的static 成员变量。<br>const 关键字至少有下列几个作用：<br>（1）欲阻止一个变量被改变，可以使用const 关键字。在定义该const 变量时，通常需要对它进行初始化，因为以后就没有机会再去改变它了；<br>（2）对指针来说，可以指定指针本身为const，也可以指定指针所指的数据为const，或二者同时指定为const；<br>（3）在一个函数声明中，const 可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；<br>（4）对于类的成员函数，若指定其为const 类型，则表明其是一个常函数，不能修改类的成员变量<br>（5）对于类的成员函数，有时候必须指定其返回值为const 类型，以使得其返回值不为“左值”。</p>
</blockquote>
<h2 id="C-中四种访问修饰符是哪些？各有什么区别？"><a href="#C-中四种访问修饰符是哪些？各有什么区别？" class="headerlink" title="C#中四种访问修饰符是哪些？各有什么区别？"></a>C#中四种访问修饰符是哪些？各有什么区别？</h2><blockquote>
<p>1.属性修饰符 2.存取修饰符 3.类修饰符 4.成员修饰符。<br>属性修饰符：<br>Serializable：按值将对象封送到远程服务器。<br>STATread：是单线程套间的意思，是一种线程模型。<br>MATAThread：是多线程套间的意思，也是一种线程模型。<br>存取修饰符：<br>public：存取不受限制。<br>private：只有包含该成员的类可以存取。<br>internal：只有当前工程可以存取。<br>protected：只有包含该成员的类以及派生类可以存取。<br>类修饰符：<br>abstract：抽象类。指示一个类只能作为其它类的基类。<br>sealed：密封类。指示一个类不能被继承。理所当然，密封类不能同时又是抽象类，因为抽象总是希望被继承的。<br>成员修饰符：<br>abstract：指示该方法或属性没有实现。<br>sealed：密封方法。可以防止在派生类中对该方法的override（重载）。不是类的每个成员方法都可以作为密封方法密封方法，必须对基类的虚方法进行重载，提供具体的实现方法。所以，在方法的声明中，sealed修饰符总是和override修饰符同时使用。<br>delegate：委托。用来定义一个函数指针。C#中的事件驱动是基于delegate + event的。<br>const：指定该成员的值只读不允许修改。<br>event：声明一个事件。<br>extern：指示方法在外部实现。<br>override：重写。对由基类继承成员的新实现。<br>readonly：指示一个域只能在声明时以及相同类的内部被赋值。<br>static：指示一个成员属于类型本身，而不是属于特定的对象。即在定义后可不经实例化，就可使用。<br>virtual：指示一个方法或存取器的实现可以在继承类中被覆盖。<br>new：在派生类中隐藏指定的基类成员，从而实现重写的功能。 若要隐藏继承类的成员，请使用相同名称在派生类中声明该成员，并用 new 修饰符修饰它。</p>
</blockquote>
<h2 id="已知strcpy函数的原型是：char-strcpy-char-strDest-const-char-strSrc-1-不调用库函数，实现strcpy函数。2-解释为什么要返回char"><a href="#已知strcpy函数的原型是：char-strcpy-char-strDest-const-char-strSrc-1-不调用库函数，实现strcpy函数。2-解释为什么要返回char" class="headerlink" title="已知strcpy函数的原型是：char  strcpy(char  strDest,const char  strSrc); 1.不调用库函数，实现strcpy函数。2.解释为什么要返回char "></a>已知strcpy函数的原型是：char <em> strcpy(char </em> strDest,const char <em> strSrc); 1.不调用库函数，实现strcpy函数。2.解释为什么要返回char </em></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">char * strcpy(char * strDest,const char * strSrc)</div><div class="line">&#123;</div><div class="line">    if ((strDest==NULL)||(strSrc==NULL))</div><div class="line">        throw &quot;Invalid argument(s)&quot;;</div><div class="line">    char * strDestCopy=strDest;</div><div class="line">    while ((*strDest++=*strSrc++)!=&apos;\0&apos;);</div><div class="line">    return strDestCopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;计算机&quot;&gt;&lt;a href=&quot;#计算机&quot; class=&quot;headerlink&quot; title=&quot;计算机&quot;&gt;&lt;/a&gt;计算机&lt;/h1&gt;&lt;h2 id=&quot;概述序列化&quot;&gt;&lt;a href=&quot;#概述序列化&quot; class=&quot;headerlink&quot; title=&quot;概述序列化&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>生成Java版Anysdk的aar</title>
    <link href="http://www.z16388.top/2018/11/10/anysdk/"/>
    <id>http://www.z16388.top/2018/11/10/anysdk/</id>
    <published>2018-11-10T11:46:31.000Z</published>
    <updated>2018-11-10T12:35:18.277Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在接入Anysdk的时候，我选择了Java的框架。虽然使用Unity版本的会更加方便，直接拖进去就完成了安装步骤，但是不利于控制项目dex文件的大小，不得不进行分包。但是官方提供的是Eclipse的版本，如果想要更好的使用，我们必须把这些东西生成为aar。</p>
<p>&emsp;&emsp;首先，在Android Studio的工程中新建一个library，给的文件拷贝到相应的目录下。需要注意的是，res需要拷贝到src/main/res里。</p>
<p>&emsp;&emsp;如果直接打包的话，我们会发现lib下的armeabi-v7a没有参与打包，缺了so文件怎么能行。这时候，需要在library下的build.gradle中进行配置。</p>
<p>&emsp;&emsp;在buildTypes同级的地方，增加这些代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jniLibs.srcDirs = ['libs']</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里指定了，“在libs目录下寻找so文件”。配置好之后，按照anysdk的文档写好java代码，配好manifest，就可以生成anysdk的aar了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;在接入Anysdk的时候，我选择了Java的框架。虽然使用Unity版本的会更加方便，直接拖进去就完成了安装步骤，但是不利于控制项目dex文件的大小，不得不进行分包。但是官方提供的是Eclipse的版本，如果想要更好的使用，我们必须把这些东西生成为a
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
      <category term="Anysdk" scheme="http://www.z16388.top/tags/Anysdk/"/>
    
      <category term="Unity" scheme="http://www.z16388.top/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Android逆向笔记</title>
    <link href="http://www.z16388.top/2018/11/10/android-d/"/>
    <id>http://www.z16388.top/2018/11/10/android-d/</id>
    <published>2018-11-10T10:32:08.000Z</published>
    <updated>2018-11-10T12:12:42.811Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这几周，一直在倒腾安卓apk相关的东西，前面那一篇<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>就是倒腾的一个中间产物。但是命令行工具还是有它的局限性，随着作死的幅度越来越大已经无法满足我的需求了，便改用python来实现这个工具。大家可以参考这个项目来进行修改<a href="https://github.com/z16388/cs_game_lib" target="_blank" rel="external">https://github.com/z16388/cs_game_lib</a>。后面还有一些扩展的代码没有暂时加入到项目中，打算完善之后提交上去。这篇还会继续更新，可以参考后面的代码结合项目达到你的目的。</p>
<h2 id="关于Apk"><a href="#关于Apk" class="headerlink" title="关于Apk"></a>关于Apk</h2><p>&emsp;&emsp;apk就是一个zip，可以直接解压进行修改，这也是我前一篇中修改apk的方式。但是它不是普通的zip，需要一个签名，否则无法进行安装。但是如果直接进行解压，它里面会有一些二进制化的东西，不方便修改。这时候，我们可以使用apktool进行解包，这样得到的都是文本化的内容了。除此之外，解包比解压能得到更多的res信息，而且不需要我们手动删除签名文件夹。</p>
<h2 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h2><p>&emsp;&emsp;Apktool是一个jar文件，官网是<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a>。可以参考它的文档进行使用，但是会发现，命令行会变得很奇怪，而且是开了一个新的窗口，我们后面命令行的代码不会顺利执行，就很难受。后来发现，它的命令其实是执行同目录下的一个bat脚本文件，而且是加了参数的。所以，在使用apktool时候，我比较推荐直接调用jar,以解包为例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar -Duser.language=zh_cn -Dfile.encoding=UTF-8 apktool.jar d [file name] -o [decode path]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;我们常用的命令其实就是解包和打包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apktool d xxx.apk</div><div class="line">apktool b xxx</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;打包之后，是没有META-INF文件夹的，可以直接签名。关于签名相关的内容可以参考：<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>。</p>
<h2 id="APK解包后的结构"><a href="#APK解包后的结构" class="headerlink" title="APK解包后的结构"></a>APK解包后的结构</h2><p>&emsp;&emsp;解包后的APK目录是会变的，如果进行了打包，那么回在该目录下生成一个build目录。但是基础的会有下面这些：</p>
<ul>
<li>assest</li>
<li>lib</li>
<li>original</li>
<li>res</li>
<li>smali</li>
<li>unknown</li>
</ul>
<p>&emsp;&emsp;除此之外，还有文本化的manifest文件。</p>
<p>&emsp;&emsp;想要修改app安装后的名称，可以去res/values/strings.xml，找到app_ame的字段进行修改。</p>
<p>&emsp;&emsp;想要修改权限可以直接修改manifest文件。</p>
<p>&emsp;&emsp;但是想要修改包名就不是那么简单的事情了，需要反编译smali文件成java，修改目录和包名在反编译回去。这个骚操作还是在计划中，暂时没有实现。</p>
<p>&emsp;&emsp;需要注意的是，如果使用Python原生的xml库区修改安卓的xml的时候，会改变xml文件的名空间。原先满页的android名空间变成了奇怪的ag0。这个问题我还在寻找解决方案。如果完成了，那么关于权限和应用名的修改就可以实现自动化了。</p>
<p>&emsp;&emsp;解包的代码如下，可以替换上面github项目中的解压代码。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"> </div><div class="line"><span class="keyword">import</span> os,os.path</div><div class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> rmtree</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_apk</span><span class="params">(filename, decode_folder)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(decode_folder):</div><div class="line">        rmtree(decode_folder)</div><div class="line">        <span class="keyword">print</span> <span class="string">"删除已存在的文件夹"</span>+decode_folder</div><div class="line">    <span class="keyword">print</span> <span class="string">"开始解包"</span>+filename+<span class="string">"-&gt;"</span>+decode_folder</div><div class="line">    apktool_command = <span class="string">"java -jar -Duser.language=zh_cn -Dfile.encoding=UTF8 apktool.jar d "</span> + filename + <span class="string">" -o "</span> + decode_folder</div><div class="line">    os.system(apktool_command)</div><div class="line">    <span class="keyword">print</span> <span class="string">"解包成功"</span>+filename+<span class="string">"-&gt;"</span>+decode_folder</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_apk</span><span class="params">(folder, apk_out)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.access(apk_out,os.R_OK):</div><div class="line">        <span class="keyword">print</span> <span class="string">"删除已存在的"</span>+apk_out</div><div class="line">        os.remove(apk_out)</div><div class="line">    <span class="keyword">print</span> <span class="string">"打包中"</span>+apk_out</div><div class="line">    apktool_command = <span class="string">"java -jar -Duser.language=zh_cn -Dfile.encoding=UTF8 apktool.jar b "</span> + folder + <span class="string">" -o "</span> + apk_out</div><div class="line">    os.system(apktool_command)</div><div class="line">    <span class="keyword">print</span> <span class="string">"打包成功"</span>+apk_out</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;脚本需要和apktool.jar在同一目录下，否则命令中需要指定路径。</p>
<h2 id="关于签名"><a href="#关于签名" class="headerlink" title="关于签名"></a>关于签名</h2><p>&emsp;&emsp;打包后签名的方法，在这一篇里已经提到了<a href="http://z16388.github.io/2018/10/21/cmdapk" target="_blank" rel="external">命令行修改apk工具</a>。</p>
<p>&emsp;&emsp;需要注意的是，keystore文件是使用eclipse生成的签名文件，算，如果你的应用是使用Android Studio生成的签名，那将是jks文件。(这可是个不错的番号啊…)</p>
<p>&emsp;&emsp;生成jks文件：在Build菜单中，找到Generate Signed Apk选项，在弹出的窗口中选择Create new，填写相关内容，即可创建签名文件。</p>
<p>&emsp;&emsp;如果非要使用keystore，可以使用keytool进行转换，jks文件经过p12文件中转可以转换成keystore文件，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">keytool -importkeystore -srckeystore xxx.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore xxx.p12</div><div class="line">keytool -v -importkeystore -srckeystore xxx.p12 -srcstoretype PKCS12 -destkeystore xxx.keystore -deststoretype JKS</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;除此之外，还可以使用keytool直接生成keystore签名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkeypair -alias serverkey -keypass 111111 -storepass 111111 -dname &quot;C=CN,ST=GD,L=SZ,O=vihoo,OU=dev,CN=vihoo.com&quot; -keyalg RSA -keysize 2048 -validity 3650 -keystore server.keystore</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;这几周，一直在倒腾安卓apk相关的东西，前面那一篇&lt;a href=&quot;http://z16388.github.io/2018/10/21/cmdapk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;命令行修改apk工具&lt;/a&gt;就是倒
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
      <category term="Python" scheme="http://www.z16388.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>关于新版(28, 9.0)Android的坑</title>
    <link href="http://www.z16388.top/2018/11/10/androidversionkeng/"/>
    <id>http://www.z16388.top/2018/11/10/androidversionkeng/</id>
    <published>2018-11-10T09:34:38.000Z</published>
    <updated>2018-11-10T10:16:30.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-9-0"><a href="#Android-9-0" class="headerlink" title="Android 9.0"></a>Android 9.0</h1><p>&emsp;&emsp;前几天出包就出现了一个非常痛心的事情。发现使用刚发售的，搭载安卓9.0系统的手机无法进行热更的。这就很难受了。各种去查，发现是在10月31日晚上，SDK突然更新了，增加了新的版本28，也就是安卓9.0。</p>
<p>&emsp;&emsp;Unity和安卓9.0的矛盾是，网络相关的东西会受到影响。目前知道的还有Unity的后台统计也是无法使用的，当时清了整个后台，一天多都是白白的，一个Bug都没有，难受。</p>
<p>&emsp;&emsp;解决方法就是到sdk目录中把28给删了，最高版本使用27。然后打出的包解包看一下manifest，确认版本是27，以防止不兼容安卓9.0。这个在传到谷歌商店中构建版本时也是可以确认的。</p>
<h1 id="Android-9-0-1"><a href="#Android-9-0-1" class="headerlink" title="Android 9.0"></a>Android 9.0</h1><p>&emsp;&emsp;在接某第三方sdk的时候遇到了另一个问题，发现他们的sdk在8.0的系统里无法使用。logcat之后发现是他们使用了一个无法在全屏模式下使用的属性。这其实是一个8.0.0版本的bug，在8.1版本中得到了修复，我也用手边的诺基亚7升级了系统，验证了这一点。</p>
<p>&emsp;&emsp;然后他们在第二天就更新了sdk版本，可喜可贺，可喜可贺~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-9-0&quot;&gt;&lt;a href=&quot;#Android-9-0&quot; class=&quot;headerlink&quot; title=&quot;Android 9.0&quot;&gt;&lt;/a&gt;Android 9.0&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;前几天出包就出现了一个非常痛心的事情。发现使
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>命令行修改apk工具</title>
    <link href="http://www.z16388.top/2018/10/21/cmdapk/"/>
    <id>http://www.z16388.top/2018/10/21/cmdapk/</id>
    <published>2018-10-21T06:24:25.000Z</published>
    <updated>2018-11-10T10:32:59.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;在前一段时间的工作中，我得到了一个新的任务，写一个命令行工具，修改apk中的某个文件，再进行重新打包。这个过程实际上十分简单：首先，apk文件就是一个zip文件，但是在安装的时候安卓系统会校验签名，因此我们需要对重新打包的apk进行签名。下面是实现这个工具的重难点和具体思路：</p>
<h2 id="命令行数组"><a href="#命令行数组" class="headerlink" title="命令行数组"></a>命令行数组</h2><p>&emsp;&emsp;如果想要生成一批apk，他们中需要修改的位置都是相同的，只有写入的文本不同。那么，第一时间我们会想到字符串数组。但是在命令行中是没有数组的，有的文章采用本地文件逐行读取的方法，但我们也可以使用下面的方法来对数组进行模拟:</p>
<p><a href="https://www.yiibai.com/batch_script/batch_script_arrays.html" target="_blank" rel="external">参考资料：</a><a href="https://www.yiibai.com/batch_script/batch_script_arrays.html" target="_blank" rel="external">https://www.yiibai.com/batch_script/batch_script_arrays.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">set a[0]=1 </div><div class="line">set a[1]=2 </div><div class="line">set a[2]=3 </div><div class="line">echo The first element of the array is %a[0]% </div><div class="line">echo The second element of the array is %a[1]% </div><div class="line">echo The third element of the array is %a[2]%</div></pre></td></tr></table></figure>
<h2 id="批处理压缩与解压缩"><a href="#批处理压缩与解压缩" class="headerlink" title="批处理压缩与解压缩"></a>批处理压缩与解压缩</h2><p>&emsp;&emsp;在windows环境中，我们不能方便地像隔壁那样，直接调用zip和unzip命令进行压缩和解压，需要下载相应的程序来帮助我们完成这一过程。<a href="http://stahlworks.com/dev/index.php?tool=zipunzip" target="_blank" rel="external">下载地址：</a><a href="http://stahlworks.com/dev/index.php?tool=zipunzip" target="_blank" rel="external">http://stahlworks.com/dev/index.php?tool=zipunzip</a></p>
<p>&emsp;&emsp;下载完两个exe文件之后，我们将它放在与脚本相同目录下或者是<code>C:/Windows</code>目录下，推荐后者，然后就可以使用压缩与解压缩命令了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zip -r fileName.apk ./*</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的命令是将当前目录压缩为指定名称的apk文件，其中参数-r为递归压缩子目录下所有文件。不加的话只会得到一个空的文件夹。这里需要注意的是，在打包apk的时候，我们需要cd到解压好的文件目录下进行压缩，否则会出现压缩好之后的apk因为打开后是一个文件夹，不是标准apk目录结构的情况而无法进行安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -o -d /path fileName.apk</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里的命令是将指定apk解压到指定的目录中，-o是不提示覆盖，-d是指定路径。</p>
<h2 id="关于apk签名"><a href="#关于apk签名" class="headerlink" title="关于apk签名"></a>关于apk签名</h2><p>&emsp;&emsp;我们可以通过下面的方法对apk的签名进行查看：解压出位于<code>META-INF</code>位置下的CERT.RSA文件，使用命令查看:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -printcert -file [file path]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;想要对apk重新签名，需要删除apk中原先的签名文件。有博客说删掉两个文件就行，但是会出现错误。<code>jarsigner: java.lang.SecurityException:SHA1 digest error for META-INF/CERT.RSA</code>根据stack overflow上某个老哥给的答案：<a href="https://stackoverflow.com/questions/37513084/jarsigner-java-lang-securityexceptionsha1-digest-error-for-meta-inf-cert-rsa-a" target="_blank" rel="external">https://stackoverflow.com/questions/37513084/jarsigner-java-lang-securityexceptionsha1-digest-error-for-meta-inf-cert-rsa-a</a>我们需要删除整个META-INF文件进行</p>
<p>&emsp;&emsp;apk的重新签名需要项目的证书文件，后缀名为：<code>.keystores</code>，命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore [keystore path] -signedjar [out apk name].apk [current apk name].apk [alias name] -storepass [password]</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;这里需要填写的参数分别是证书文件的路径、签名后apk名及路径、签名前apk名及路径，别名，密码。</p>
<p>&emsp;&emsp;签名完毕后，还可以对生成的apk进行验证。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verify [out apk name].apk</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;至此，整个工具的重点就介绍完毕了。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>&emsp;&emsp;在很多文章中，有人会推荐使用apktool的工具进行上面的一些工作，这里非常不推荐。apktool是一个java写的工具，在解包和打包过程结束后，会自动关闭当前的命令行。解包打包签名，可能就需要有三个脚本了，给工具的制作造成了很大的不便。</p>
<p>&emsp;&emsp;下面是工具的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@echo off</div><div class="line">setlocal enabledelayedexpansion</div><div class="line"></div><div class="line">rem 拖入apk并获取其路径和文件名</div><div class="line">echo 请拖入需要处理的apk</div><div class="line">set /p input=</div><div class="line">set apkUrl=</div><div class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b %input%&apos;) do (set apkUrl=!apkUrl!%%i)</div><div class="line">set fileName=%apkUrl:.apk=%</div><div class="line"></div><div class="line">rem 解包并删除签名</div><div class="line">if exist output rmdir /s/q output</div><div class="line">md output</div><div class="line">cd output</div><div class="line">md %fileName%</div><div class="line">unzip -o -d %fileName% %input%</div><div class="line">rmdir /s/q %fileName%\META-INF</div><div class="line"></div><div class="line">rem 修改文件打包并签名</div><div class="line">for  do (</div><div class="line">[这里填写修改操作]</div><div class="line">cd !fileName!</div><div class="line">zip -r [your file name].apk ./*</div><div class="line">cd..</div><div class="line">jarsigner -verbose -keystore [keystore path] -signedjar [out apk name].apk [current apk name].apk [alias name] -storepass [password]</div><div class="line">)</div><div class="line"></div><div class="line">pause</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;在这里我使用了for循环获取了解压后的文件夹名的方法，实现起来可能显得会比较扭曲。但是如果在事先不确定拖入文件名，并且打出的包对原文件名有需求的话，就得用这种方法去取了。除此之外，在进行签名的时候，签名前和签名后文件名可以是同一个，这样就不会出现新的apk，而是在原有未签名apk的基础上进行签名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在前一段时间的工作中，我得到了一个新的任务，写一个命令行工具，修改apk中的某个文件，再进行重新打包。这个过程实际上
    
    </summary>
    
    
      <category term="Android" scheme="http://www.z16388.top/tags/Android/"/>
    
      <category term="安卓" scheme="http://www.z16388.top/tags/%E5%AE%89%E5%8D%93/"/>
    
  </entry>
  
</feed>
